import { isInsideIFrame } from '../utils/iframe';
import { EventManager } from './EventManager';
import { IFrameMessageType, } from './IFrameCommunicatorTypes';
import { createUuid } from '../utils/createUuid';
import { InvalidEnvironmentError } from '../utils/errors';
export class IFrameCommunicator {
    constructor() {
        this.events = new EventManager();
        this.callbacks = new Map();
        this.addMessageListener = (type, listener) => {
            this.events.on(type, listener);
        };
        this.removeMessageListener = (type, listener) => {
            this.events.off(type, listener);
        };
        this.sendMessageWithResponse = (type, data, callback, metadata) => {
            const requestId = createUuid();
            this.registerCallback(requestId, callback);
            this.sendMessage(type, data, metadata, requestId);
        };
        this.sendMessage = (type, data, metadata, requestId) => {
            if (!isInsideIFrame()) {
                throw InvalidEnvironmentError('IFrameCommunicator: iframe message can only be send while inside iframe.');
            }
            const message = { type, data, metadata, requestId };
            window.parent.postMessage(message, '*');
        };
        this.onMessage = (event) => {
            if (!event.data)
                return;
            const message = event.data;
            this.events.emit(message.type, message.data, message.metadata);
            if (message.requestId) {
                this.executeCallback(message.requestId, message.data);
            }
        };
        this.registerCallback = (requestId, callback) => {
            if (!callback) {
                return;
            }
            this.callbacks.set(requestId, callback);
        };
        this.executeCallback = (requestId, data) => {
            const callback = this.callbacks.get(requestId);
            if (callback) {
                callback(data);
                this.callbacks.delete(requestId);
            }
        };
    }
    initialize() {
        if (typeof window === 'undefined') {
            throw InvalidEnvironmentError('IFrameCommunicator can only be initialized in a browser environment.');
        }
        window.addEventListener('message', this.onMessage, true);
    }
    destroy() {
        this.events.removeAllListeners();
        window.removeEventListener('message', this.onMessage, true);
    }
}
//# sourceMappingURL=IFrameCommunicator.js.map