import { Logger } from '../lib/Logger';
function logErrors(errors) {
    errors.forEach((error) => {
        Logger.error(error);
    });
}
export function validateContentItemClickEditMessageData(data) {
    const errors = [];
    if (!data.projectId) {
        errors.push('Project ID is required to handle element click.');
    }
    if (!data.languageCodename) {
        errors.push('Language codename is required to handle element click.');
    }
    if (!data.itemId) {
        errors.push('Item ID is required to handle element click.');
    }
    logErrors(errors);
    return errors.length === 0;
}
export function validateElementClickMessageData(data) {
    if (!data.elementCodename) {
        Logger.error('Element codename is required to handle element click.');
        return false;
    }
    return validateContentItemClickEditMessageData(data);
}
export function validateContentComponentClickMessageData(data) {
    if (!data.contentComponentId) {
        Logger.error('Content component ID is required to handle element click.');
        return false;
    }
    return validateContentItemClickEditMessageData(data);
}
export function validateAddInitialMessageData(data) {
    const errors = [];
    if (!data.projectId) {
        errors.push('Project ID is required to handle add button click.');
    }
    if (!data.languageCodename) {
        errors.push('Language codename is required to handle add button click.');
    }
    if (!data.itemId) {
        errors.push('Item ID is required to handle add button click.');
    }
    if (!data.elementCodename) {
        errors.push('Element codename is required to handle add button click.');
    }
    if (!data.insertPosition) {
        errors.push('Insert position (placement, targetId) is required to handle add button click.');
    }
    logErrors(errors);
    return errors.length === 0;
}
export function validateAddActionMessageData(data) {
    if (!data.action) {
        Logger.error('Action is required to handle add button click.');
        return false;
    }
    return validateAddInitialMessageData(data);
}
//# sourceMappingURL=validation.js.map