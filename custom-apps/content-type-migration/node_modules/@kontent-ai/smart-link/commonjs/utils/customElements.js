"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHighlightTypeForElement = exports.shouldElementHaveAddButton = exports.shouldElementHaveHighlight = exports.isElementAugmentable = exports.getAugmentableDescendants = exports.HighlightType = void 0;
const dataAttributes_1 = require("./dataAttributes");
const ConfigurationManager_1 = require("../lib/ConfigurationManager");
var HighlightType;
(function (HighlightType) {
    HighlightType["None"] = "";
    HighlightType["Element"] = "element";
    HighlightType["ContentComponent"] = "content-component";
    HighlightType["ContentItem"] = "content-item";
})(HighlightType = exports.HighlightType || (exports.HighlightType = {}));
const DisabledHighlightFeatureSelector = `[${dataAttributes_1.MetadataAttribute.DisableFeatures}*="${dataAttributes_1.DisableableFeature.Highlight}"]`;
const ElementSelector = `*[${dataAttributes_1.DataAttribute.ElementCodename}]:not(${DisabledHighlightFeatureSelector})`;
const ContentComponentSelector = `*[${dataAttributes_1.DataAttribute.ComponentId}]:not([${dataAttributes_1.DataAttribute.ElementCodename}]):not(${DisabledHighlightFeatureSelector})`;
const ContentItemSelector = `*[${dataAttributes_1.DataAttribute.ItemId}]:not([${dataAttributes_1.DataAttribute.ComponentId}]):not([${dataAttributes_1.DataAttribute.ElementCodename}]):not(${DisabledHighlightFeatureSelector})`;
const ElementsWithAddButtonSelector = `*[${dataAttributes_1.MetadataAttribute.AddButton}]`;
const AllAugmentableElementsSelector = `${ElementSelector}, ${ContentComponentSelector}, ${ContentItemSelector}, ${ElementsWithAddButtonSelector}`;
/**
 * Find all descendant HTML elements that could be augmented (have highlights or add buttons near them).
 *
 * @param {HTMLElement | Document} node
 * @returns {NodeListOf<HTMLElement>}
 */
function getAugmentableDescendants(node) {
    const configurationManager = ConfigurationManager_1.ConfigurationManager.getInstance();
    const isInsideWebSpotlight = configurationManager.isInsideWebSpotlightPreviewIFrame;
    if (isInsideWebSpotlight) {
        return node.querySelectorAll(AllAugmentableElementsSelector);
    }
    return node.querySelectorAll(ElementSelector);
}
exports.getAugmentableDescendants = getAugmentableDescendants;
/**
 * Checks if HTML element could be augmented (have highlights or add buttons near them).
 *
 * @param {HTMLElement | null} element
 * @returns {boolean}
 */
function isElementAugmentable(element) {
    return shouldElementHaveHighlight(element) || shouldElementHaveAddButton(element);
}
exports.isElementAugmentable = isElementAugmentable;
/**
 * Check if node should have highlights based on its data-attributes.
 *
 * @param {HTMLElement | null} element
 * @returns {boolean}
 */
function shouldElementHaveHighlight(element) {
    const highlightType = getHighlightTypeForElement(element);
    switch (highlightType) {
        case HighlightType.None:
            return false;
        case HighlightType.Element:
            return true;
        case HighlightType.ContentItem:
        case HighlightType.ContentComponent:
        default: {
            const configurationManager = ConfigurationManager_1.ConfigurationManager.getInstance();
            return configurationManager.isInsideWebSpotlightPreviewIFrame;
        }
    }
}
exports.shouldElementHaveHighlight = shouldElementHaveHighlight;
/**
 * Check if node should have a add button based on its data-attributes.
 *
 * @param {HTMLElement | null} element
 * @returns {boolean}
 */
function shouldElementHaveAddButton(element) {
    const configurationManager = ConfigurationManager_1.ConfigurationManager.getInstance();
    const isInsideWebSpotlight = configurationManager.isInsideWebSpotlightPreviewIFrame;
    // add button should only be visible inside Web Spotlight
    return Boolean(isInsideWebSpotlight && element && element.hasAttribute(dataAttributes_1.MetadataAttribute.AddButton));
}
exports.shouldElementHaveAddButton = shouldElementHaveAddButton;
/**
 * Get HighlightType based on the HTML element data-attributes.
 *
 * @param {HTMLElement | null} element
 * @returns {HighlightType}
 */
function getHighlightTypeForElement(element) {
    if (!element || isFeatureDisabledForElement(element, dataAttributes_1.DisableableFeature.Highlight)) {
        return HighlightType.None;
    }
    // treat node as element if it has element codename attribute
    if (element.hasAttribute(dataAttributes_1.DataAttribute.ElementCodename)) {
        return HighlightType.Element;
    }
    // else treat node as content component if it has component id attribute
    else if (element.hasAttribute(dataAttributes_1.DataAttribute.ComponentId)) {
        return HighlightType.ContentComponent;
    }
    // else treat node as content item if it has item id attribute
    else if (element.hasAttribute(dataAttributes_1.DataAttribute.ItemId)) {
        return HighlightType.ContentItem;
    }
    return HighlightType.None;
}
exports.getHighlightTypeForElement = getHighlightTypeForElement;
function isFeatureDisabledForElement(element, feature) {
    var _a;
    const attribute = element.getAttribute(dataAttributes_1.MetadataAttribute.DisableFeatures);
    return (_a = attribute === null || attribute === void 0 ? void 0 : attribute.toLowerCase().includes(feature)) !== null && _a !== void 0 ? _a : false;
}
//# sourceMappingURL=customElements.js.map