"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryParamPresenceWatcher = void 0;
class QueryParamPresenceWatcher {
    constructor() {
        this.previousValue = new Map();
        this.timers = new Map();
        this.watch = (queryParam, onChange) => {
            const timerId = this.timers.get(queryParam);
            if (timerId) {
                clearTimeout(timerId);
            }
            const isPresent = QueryParamPresenceWatcher.isQueryParamPresent(queryParam);
            const hasChanged = this.previousValue.get(queryParam) !== isPresent;
            if (hasChanged) {
                onChange(isPresent);
            }
            const newTimerId = window.setTimeout(() => this.watch(queryParam, onChange), QueryParamPresenceWatcher.WatchTimeoutMs);
            this.timers.set(queryParam, newTimerId);
        };
        this.unwatchAll = () => {
            this.timers.forEach((timerId) => {
                clearTimeout(timerId);
            });
            this.timers.clear();
        };
    }
    /**
     * Check if query parameter is present in the current page URL.
     * Query parameter value is ignored, only presence is checked.
     *
     * @param {string} queryParam
     * @returns {boolean}
     */
    static isQueryParamPresent(queryParam) {
        const regex = new RegExp(`[?&]${queryParam}([=&]|$)`, 'i');
        return regex.test(window.location.search);
    }
}
exports.QueryParamPresenceWatcher = QueryParamPresenceWatcher;
QueryParamPresenceWatcher.WatchTimeoutMs = 1000;
//# sourceMappingURL=QueryParamPresenceWatcher.js.map