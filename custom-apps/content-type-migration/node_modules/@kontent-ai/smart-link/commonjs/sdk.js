"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KontentSmartLinkEvent = void 0;
const iframe_1 = require("./utils/iframe");
const NodeSmartLinkProvider_1 = require("./lib/NodeSmartLinkProvider");
const storage_1 = require("./utils/storage");
const IFrameCommunicator_1 = require("./lib/IFrameCommunicator");
const IFrameCommunicatorTypes_1 = require("./lib/IFrameCommunicatorTypes");
const QueryParamPresenceWatcher_1 = require("./lib/QueryParamPresenceWatcher");
const components_1 = require("./web-components/components");
const ConfigurationManager_1 = require("./lib/ConfigurationManager");
const errors_1 = require("./utils/errors");
const Logger_1 = require("./lib/Logger");
const reload_1 = require("./utils/reload");
const EventManager_1 = require("./lib/EventManager");
var KontentSmartLinkEvent;
(function (KontentSmartLinkEvent) {
    KontentSmartLinkEvent["Refresh"] = "refresh";
    KontentSmartLinkEvent["Update"] = "update";
})(KontentSmartLinkEvent = exports.KontentSmartLinkEvent || (exports.KontentSmartLinkEvent = {}));
class KontentSmartLinkSDK {
    constructor(configuration) {
        this.initialize = () => __awaiter(this, void 0, void 0, function* () {
            yield (0, components_1.defineAllRequiredWebComponents)();
            const level = this.configurationManager.debug ? Logger_1.LogLevel.Debug : Logger_1.LogLevel.Info;
            Logger_1.Logger.setLogLevel(level);
            if (this.configurationManager.queryParam) {
                this.queryParamPresenceWatcher.watch(this.configurationManager.queryParam, this.nodeSmartLinkProvider.toggle);
            }
            else {
                this.nodeSmartLinkProvider.enable();
            }
            if ((0, iframe_1.isInsideIFrame)()) {
                this.initializeIFrameCommunication();
            }
        });
        this.destroy = () => {
            this.events.removeAllListeners();
            this.queryParamPresenceWatcher.unwatchAll();
            this.iframeCommunicator.destroy();
            this.nodeSmartLinkProvider.destroy();
        };
        this.updateConfiguration = (configuration) => {
            if (typeof configuration.queryParam !== 'undefined') {
                if (!configuration.queryParam) {
                    this.nodeSmartLinkProvider.enable();
                }
                else if (configuration.queryParam !== this.configurationManager.queryParam) {
                    this.queryParamPresenceWatcher.unwatchAll();
                    this.queryParamPresenceWatcher.watch(configuration.queryParam, this.nodeSmartLinkProvider.toggle);
                }
            }
            if (typeof configuration.debug !== 'undefined') {
                const level = configuration.debug ? Logger_1.LogLevel.Debug : Logger_1.LogLevel.Info;
                Logger_1.Logger.setLogLevel(level);
            }
            this.configurationManager.update(configuration);
        };
        this.on = (event, handler) => {
            this.events.on(event, handler);
        };
        this.off = (event, handler) => {
            this.events.off(event, handler);
        };
        this.initializeIFrameCommunication = () => {
            var _a, _b;
            this.iframeCommunicator.initialize();
            const storage = KontentSmartLinkSDK.getSettingsStorage();
            const settings = storage.get();
            const enabled = settings !== null ? settings === null || settings === void 0 ? void 0 : settings.enabled : true;
            const messageData = {
                enabled,
                languageCodename: (_a = this.configurationManager.defaultLanguageCodename) !== null && _a !== void 0 ? _a : null,
                projectId: (_b = this.configurationManager.defaultProjectId) !== null && _b !== void 0 ? _b : null,
                supportedFeatures: {
                    previewIFrameCurrentUrlHandler: true,
                    refreshHandler: true,
                    updateHandler: true,
                },
            };
            this.iframeCommunicator.sendMessageWithResponse(IFrameCommunicatorTypes_1.IFrameMessageType.Initialized, messageData, () => {
                this.configurationManager.update({ isInsideWebSpotlight: true });
                this.queryParamPresenceWatcher.unwatchAll();
                this.nodeSmartLinkProvider.disable();
                if (enabled) {
                    this.nodeSmartLinkProvider.enable();
                }
                this.iframeCommunicator.addMessageListener(IFrameCommunicatorTypes_1.IFrameMessageType.Status, this.handleStatusMessage);
                this.iframeCommunicator.addMessageListener(IFrameCommunicatorTypes_1.IFrameMessageType.RefreshPreview, this.handleRefreshMessage);
                this.iframeCommunicator.addMessageListener(IFrameCommunicatorTypes_1.IFrameMessageType.UpdatePreview, this.handleUpdateMessage);
                this.iframeCommunicator.addMessageListener(IFrameCommunicatorTypes_1.IFrameMessageType.PreviewIFrameCurrentUrl, this.handlePreviewIFrameCurrentUrlRequestMessage);
            });
        };
        this.handleStatusMessage = (data) => {
            if (!data || !this.nodeSmartLinkProvider)
                return;
            this.nodeSmartLinkProvider.toggle(data.enabled);
            KontentSmartLinkSDK.getSettingsStorage().set({
                enabled: data.enabled,
            });
        };
        this.handleRefreshMessage = (data, metadata) => {
            const isCustomRefreshHandlerImplemented = this.events.hasEventListener(KontentSmartLinkEvent.Refresh);
            if (isCustomRefreshHandlerImplemented) {
                this.events.emit(KontentSmartLinkEvent.Refresh, data, metadata, reload_1.reload);
            }
            else {
                (0, reload_1.reload)();
            }
        };
        this.handleUpdateMessage = (data) => {
            this.events.emit(KontentSmartLinkEvent.Update, data, undefined, undefined);
        };
        this.handlePreviewIFrameCurrentUrlRequestMessage = () => {
            const messageData = {
                previewUrl: window.location.href,
            };
            this.iframeCommunicator.sendMessage(IFrameCommunicatorTypes_1.IFrameMessageType.PreviewIFrameCurrentUrlResponse, messageData);
        };
        this.configurationManager = ConfigurationManager_1.ConfigurationManager.getInstance();
        this.configurationManager.update(configuration);
        this.events = new EventManager_1.EventManager();
        this.queryParamPresenceWatcher = new QueryParamPresenceWatcher_1.QueryParamPresenceWatcher();
        this.iframeCommunicator = new IFrameCommunicator_1.IFrameCommunicator();
        this.nodeSmartLinkProvider = new NodeSmartLinkProvider_1.NodeSmartLinkProvider(this.iframeCommunicator);
        this.initialize();
    }
    static getSettingsStorage() {
        return (0, storage_1.createStorage)('kontent-smart-link:iframe-settings');
    }
}
class KontentSmartLink {
    constructor() {
        this.sdk = null;
        this.destroy = () => {
            var _a;
            (_a = this.sdk) === null || _a === void 0 ? void 0 : _a.destroy();
            this.sdk = null;
        };
        this.setConfiguration = (configuration) => {
            if (!this.sdk) {
                throw (0, errors_1.NotInitializedError)('KontentSmartLink is not initialized or has already been destroyed.');
            }
            else {
                this.sdk.updateConfiguration(configuration);
            }
        };
        this.on = (event, handler) => {
            if (!this.sdk) {
                throw (0, errors_1.NotInitializedError)('KontentSmartLink is not initialized or has already been destroyed.');
            }
            else {
                this.sdk.on(event, handler);
            }
        };
        this.off = (event, handler) => {
            if (!this.sdk) {
                throw (0, errors_1.NotInitializedError)('KontentSmartLink is not initialized or has already been destroyed.');
            }
            else {
                this.sdk.off(event, handler);
            }
        };
    }
    static initializeOnLoad(configuration) {
        if (typeof window === 'undefined') {
            throw (0, errors_1.InvalidEnvironmentError)('KontentSmartLink can only be initialized in a browser environment.');
        }
        return new Promise((resolve) => {
            window.addEventListener('load', () => {
                resolve(KontentSmartLink.initialize(configuration));
            });
        });
    }
    static initialize(configuration) {
        if (!KontentSmartLink.instance) {
            KontentSmartLink.instance = new KontentSmartLink();
        }
        if (!KontentSmartLink.instance.sdk) {
            KontentSmartLink.instance.sdk = new KontentSmartLinkSDK(configuration);
        }
        return KontentSmartLink.instance;
    }
}
exports.default = KontentSmartLink;
//# sourceMappingURL=sdk.js.map