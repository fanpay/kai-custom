import { HighlightType } from '../utils/customElements';
import { KSLPositionedElement } from './abstract/KSLPositionedElement';
import { DeepPartial, EditButtonClickedData } from '../utils/dataAttributes';
interface IKSLHighlightElementEventData {
    readonly data: DeepPartial<EditButtonClickedData>;
    readonly targetNode: HTMLElement;
}
export declare type KSLHighlightElementEvent = CustomEvent<IKSLHighlightElementEventData>;
declare global {
    interface WindowEventMap {
        'ksl:highlight:edit': KSLHighlightElementEvent;
    }
    interface HTMLElementEventMap {
        'ksl:highlight:edit': KSLHighlightElementEvent;
    }
}
export declare class KSLHighlightElement extends KSLPositionedElement {
    static get is(): "ksl-highlight";
    get type(): HighlightType;
    get selected(): boolean;
    set selected(value: boolean);
    private readonly editButtonRef;
    constructor();
    static initializeTemplate(): HTMLTemplateElement;
    private static getEditButtonTooltip;
    connectedCallback(): void;
    disconnectedCallback(): void;
    attachTo: (node: HTMLElement) => void;
    adjustPosition: () => void;
    private unregisterTargetNodeListeners;
    private handleTargetNodeMouseEnter;
    private handleTargetNodeMouseLeave;
    private handleEditButtonClick;
    private dispatchEditEvent;
}
export {};
