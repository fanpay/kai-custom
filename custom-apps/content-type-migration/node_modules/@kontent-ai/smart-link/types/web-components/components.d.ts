import { KSLAddButtonElement } from './KSLAddButtonElement';
import { KSLContainerElement } from './KSLContainerElement';
import { KSLButtonElement } from './KSLButtonElement';
import { KSLIconElement } from './KSLIconElement';
import { KSLTooltipElement } from './KSLTooltipElement';
import { KSLHighlightElement } from './KSLHighlightElement';
import { KSLPopoverElement } from './KSLPopoverElement';
declare global {
    interface HTMLElementTagNameMap {
        [KSLIconElement.is]: KSLIconElement;
        [KSLButtonElement.is]: KSLButtonElement;
        [KSLAddButtonElement.is]: KSLAddButtonElement;
        [KSLHighlightElement.is]: KSLHighlightElement;
        [KSLContainerElement.is]: KSLContainerElement;
        [KSLTooltipElement.is]: KSLTooltipElement;
        [KSLPopoverElement.is]: KSLPopoverElement;
    }
}
/**
 * Define all web components if it is possible.
 *
 * @returns {Promise<void[]>}
 */
export declare function defineAllRequiredWebComponents(): Promise<CustomElementConstructor[]>;
/**
 * Check if element is a web component based on its tag name.
 *
 * @param {HTMLElement} element
 * @returns {boolean}
 */
export declare function isElementWebComponent(element: HTMLElement): boolean;
