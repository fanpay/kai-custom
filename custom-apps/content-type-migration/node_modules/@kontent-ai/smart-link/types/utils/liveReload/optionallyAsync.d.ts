import { IContentItem } from '@kontent-ai/delivery-sdk';
export declare type OptionallyAsync<T> = Readonly<{
    optionallyAsyncFnc: (fetchItems?: (codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>) => T | Promise<T>;
}>;
export declare const createOptionallyAsync: <T>(fnc: (fetchItems?: ((codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>) | undefined) => T | Promise<T>) => Readonly<{
    optionallyAsyncFnc: (fetchItems?: ((codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>) | undefined) => T | Promise<T>;
}>;
export declare const applyOnOptionallyAsync: <Input, Output>(fnc: Readonly<{
    optionallyAsyncFnc: (fetchItems?: ((codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>) | undefined) => Input | Promise<Input>;
}>, transformer: (input: Input) => Output) => Readonly<{
    optionallyAsyncFnc: (fetchItems?: ((codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>) | undefined) => Output | Promise<Output>;
}>;
export declare const chainOptionallyAsync: <Input, Output>(fnc: Readonly<{
    optionallyAsyncFnc: (fetchItems?: ((codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>) | undefined) => Input | Promise<Input>;
}>, chainCall: (input: Input) => Readonly<{
    optionallyAsyncFnc: (fetchItems?: ((codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>) | undefined) => Output | Promise<Output>;
}>) => Readonly<{
    optionallyAsyncFnc: (fetchItems?: ((codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>) | undefined) => Output | Promise<Output>;
}>;
export declare const mergeOptionalAsyncs: <T>(asyncs: readonly Readonly<{
    optionallyAsyncFnc: (fetchItems?: ((codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>) | undefined) => T | Promise<T>;
}>[]) => Readonly<{
    optionallyAsyncFnc: (fetchItems?: ((codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>) | undefined) => T[] | Promise<T[]>;
}>;
export declare function evaluateOptionallyAsync<T>(fnc: OptionallyAsync<T>, fetchItems: (codenames: ReadonlyArray<string>) => Promise<ReadonlyArray<IContentItem>>): Promise<T>;
export declare function evaluateOptionallyAsync<T>(fnc: OptionallyAsync<T>, fetchItems: null): T;
