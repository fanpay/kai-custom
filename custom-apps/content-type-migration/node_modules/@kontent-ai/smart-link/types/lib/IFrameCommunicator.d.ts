import { Callback, EventHandler } from './EventManager';
import { IAddActionMessageData, IAddButtonInitialMessageData, IAddButtonPermissionsServerModel, IClickedMessageMetadata, IContentComponentClickedMessageData, IContentItemClickedMessageData, IElementClickedMessageData, IFrameMessageType, IPreviewIFrameCurrentUrlMessageData, IRefreshMessageData, IRefreshMessageMetadata, ISDKInitializedMessageData, ISDKStatusMessageData, IUpdateMessageData } from './IFrameCommunicatorTypes';
export declare type IFrameMessageMap = {
    readonly [IFrameMessageType.Initialized]: EventHandler<ISDKInitializedMessageData, undefined, Callback>;
    readonly [IFrameMessageType.Status]: EventHandler<ISDKStatusMessageData>;
    readonly [IFrameMessageType.ElementClicked]: EventHandler<IElementClickedMessageData, IClickedMessageMetadata>;
    readonly [IFrameMessageType.ContentItemClicked]: EventHandler<IContentItemClickedMessageData, IClickedMessageMetadata>;
    readonly [IFrameMessageType.ContentComponentClicked]: EventHandler<IContentComponentClickedMessageData, IClickedMessageMetadata>;
    readonly [IFrameMessageType.AddInitial]: EventHandler<IAddButtonInitialMessageData, IClickedMessageMetadata, Callback<IAddButtonPermissionsServerModel>>;
    readonly [IFrameMessageType.AddAction]: EventHandler<IAddActionMessageData, IClickedMessageMetadata>;
    readonly [IFrameMessageType.RefreshPreview]: EventHandler<IRefreshMessageData, IRefreshMessageMetadata>;
    readonly [IFrameMessageType.UpdatePreview]: EventHandler<IUpdateMessageData>;
    readonly [IFrameMessageType.PreviewIFrameCurrentUrl]: EventHandler;
    readonly [IFrameMessageType.PreviewIFrameCurrentUrlResponse]: EventHandler<IPreviewIFrameCurrentUrlMessageData>;
};
export interface IFrameMessage<TMessageType extends keyof IFrameMessageMap> {
    readonly type: TMessageType;
    readonly data: Parameters<IFrameMessageMap[TMessageType]>[0];
    readonly metadata?: Parameters<IFrameMessageMap[TMessageType]>[1];
    readonly requestId?: string;
}
export declare class IFrameCommunicator {
    private readonly events;
    private readonly callbacks;
    initialize(): void;
    destroy(): void;
    addMessageListener: <M extends keyof IFrameMessageMap>(type: M, listener: IFrameMessageMap[M]) => void;
    removeMessageListener: <M extends keyof IFrameMessageMap>(type: M, listener: IFrameMessageMap[M]) => void;
    sendMessageWithResponse: <M extends keyof IFrameMessageMap>(type: M, data: Parameters<IFrameMessageMap[M]>[0], callback: Parameters<IFrameMessageMap[M]>[2], metadata?: Parameters<IFrameMessageMap[M]>[1] | undefined) => void;
    sendMessage: <M extends keyof IFrameMessageMap>(type: M, data: Parameters<IFrameMessageMap[M]>[0], metadata?: Parameters<IFrameMessageMap[M]>[1] | undefined, requestId?: string) => void;
    private onMessage;
    private registerCallback;
    private executeCallback;
}
