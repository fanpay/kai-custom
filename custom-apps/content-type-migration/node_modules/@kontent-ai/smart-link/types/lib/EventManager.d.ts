export declare type Callback<TData = undefined, TMetadata = undefined> = (data?: TData, metadata?: TMetadata) => void;
export declare type EventHandler<TEventData = undefined, TEventMetadata = undefined, TEventCallback = undefined> = (data: TEventData, metadata: TEventMetadata, callback: TEventCallback) => void;
declare type EventMap = {
    [k: string]: (...args: any[]) => void;
};
export declare class EventManager<Events extends EventMap> {
    private listeners;
    on: <E extends keyof Events>(event: E, listener: Events[E]) => void;
    off: <E extends keyof Events>(event: E, listener: Events[E]) => void;
    emit: <E extends keyof Events>(event: E, ...args: Parameters<Events[E]>) => void;
    removeAllListeners: () => void;
    hasEventListener: <E extends keyof Events>(event: E) => boolean;
}
export {};
