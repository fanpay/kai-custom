{
  "version": 3,
  "sources": ["../../requires-port/index.js", "../../querystringify/index.js", "../../url-parse/index.js", "../../@kontent-ai/core-sdk/lib/helpers/url.helper.ts", "../../@kontent-ai/core-sdk/lib/helpers/header.helper.ts", "../../@kontent-ai/core-sdk/lib/helpers/headers-helper.ts", "../../@kontent-ai/core-sdk/lib/helpers/retry-helper.ts", "../../@kontent-ai/core-sdk/lib/models/parameters.ts", "../../axios/lib/helpers/bind.js", "../../axios/lib/utils.js", "../../axios/lib/core/AxiosError.js", "../../axios/lib/helpers/null.js", "../../axios/lib/helpers/toFormData.js", "../../axios/lib/helpers/AxiosURLSearchParams.js", "../../axios/lib/helpers/buildURL.js", "../../axios/lib/core/InterceptorManager.js", "../../axios/lib/defaults/transitional.js", "../../axios/lib/platform/browser/classes/URLSearchParams.js", "../../axios/lib/platform/browser/classes/FormData.js", "../../axios/lib/platform/browser/classes/Blob.js", "../../axios/lib/platform/browser/index.js", "../../axios/lib/platform/common/utils.js", "../../axios/lib/platform/index.js", "../../axios/lib/helpers/toURLEncodedForm.js", "../../axios/lib/helpers/formDataToJSON.js", "../../axios/lib/defaults/index.js", "../../axios/lib/helpers/parseHeaders.js", "../../axios/lib/core/AxiosHeaders.js", "../../axios/lib/core/transformData.js", "../../axios/lib/cancel/isCancel.js", "../../axios/lib/cancel/CanceledError.js", "../../axios/lib/core/settle.js", "../../axios/lib/helpers/parseProtocol.js", "../../axios/lib/helpers/speedometer.js", "../../axios/lib/helpers/throttle.js", "../../axios/lib/helpers/progressEventReducer.js", "../../axios/lib/helpers/isURLSameOrigin.js", "../../axios/lib/helpers/cookies.js", "../../axios/lib/helpers/isAbsoluteURL.js", "../../axios/lib/helpers/combineURLs.js", "../../axios/lib/core/buildFullPath.js", "../../axios/lib/core/mergeConfig.js", "../../axios/lib/helpers/resolveConfig.js", "../../axios/lib/adapters/xhr.js", "../../axios/lib/helpers/composeSignals.js", "../../axios/lib/helpers/trackStream.js", "../../axios/lib/adapters/fetch.js", "../../axios/lib/adapters/adapters.js", "../../axios/lib/core/dispatchRequest.js", "../../axios/lib/env/data.js", "../../axios/lib/helpers/validator.js", "../../axios/lib/core/Axios.js", "../../axios/lib/cancel/CancelToken.js", "../../axios/lib/helpers/spread.js", "../../axios/lib/helpers/isAxiosError.js", "../../axios/lib/helpers/HttpStatusCode.js", "../../axios/lib/axios.js", "../../axios/index.js", "../../@kontent-ai/core-sdk/lib/http/http.debugger.ts", "../../@kontent-ai/core-sdk/lib/http/http.functions.ts", "../../@kontent-ai/core-sdk/lib/http/http.service.ts", "../../@kontent-ai/delivery-sdk/lib/models/common/filters.ts", "../../@kontent-ai/delivery-sdk/lib/models/common/parameters.ts", "../../@kontent-ai/delivery-sdk/lib/models/common/common-models.ts", "../../@kontent-ai/delivery-sdk/lib/models/common/headers.ts", "../../@kontent-ai/delivery-sdk/lib/query/common/base-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/element/element-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/elements/element-type.ts", "../../@kontent-ai/delivery-sdk/lib/query/common/base-listing-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/common/base-item-listing-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/item/multiple-items-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/item/single-item-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/taxonomy/taxonomies-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/taxonomy/taxonomy-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/type/multiple-type-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/type/single-type-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/items-feed/items-feed-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/language/languages-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/sync/initialize-sync-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/query/sync/sync-changes-query.class.ts", "../../@kontent-ai/delivery-sdk/lib/sdk-info.generated.ts", "../../@kontent-ai/delivery-sdk/lib/services/base-delivery-query.service.ts", "../../@kontent-ai/delivery-sdk/lib/services/delivery-query.service.ts", "../../@kontent-ai/delivery-sdk/lib/utilities/linked-items.helper.ts", "../../uuid/dist/esm-browser/regex.js", "../../uuid/dist/esm-browser/validate.js", "../../uuid/dist/esm-browser/parse.js", "../../uuid/dist/esm-browser/stringify.js", "../../uuid/dist/esm-browser/rng.js", "../../uuid/dist/esm-browser/v35.js", "../../uuid/dist/esm-browser/md5.js", "../../uuid/dist/esm-browser/v3.js", "../../uuid/dist/esm-browser/native.js", "../../uuid/dist/esm-browser/v4.js", "../../uuid/dist/esm-browser/sha1.js", "../../uuid/dist/esm-browser/v5.js", "../../@kontent-ai/delivery-sdk/lib/utilities/guid.helper.ts", "../../@kontent-ai/delivery-sdk/lib/utilities/delivery-url.helper.ts", "../../@kontent-ai/delivery-sdk/lib/utilities/text.helper.ts", "../../@kontent-ai/delivery-sdk/lib/utilities/enum.helper.ts", "../../@kontent-ai/delivery-sdk/lib/utilities/codename.helper.ts", "../../@kontent-ai/delivery-sdk/lib/mappers/element.mapper.ts", "../../@kontent-ai/delivery-sdk/lib/mappers/item.mapper.ts", "../../@kontent-ai/delivery-sdk/lib/mappers/taxonomy.mapper.ts", "../../@kontent-ai/delivery-sdk/lib/mappers/type.mapper.ts", "../../@kontent-ai/delivery-sdk/lib/mappers/generic-element.mapper.ts", "../../@kontent-ai/delivery-sdk/lib/mappers/language.mapper.ts", "../../@kontent-ai/delivery-sdk/lib/mappers/sync.mapper.ts", "../../@kontent-ai/delivery-sdk/lib/services/mapping.service.ts", "../../@kontent-ai/delivery-sdk/lib/client/delivery-client.ts", "../../@kontent-ai/delivery-sdk/lib/client/delivery-client.factory.ts", "../../@kontent-ai/delivery-sdk/lib/parser/parse-models.ts", "../../@kontent-ai/delivery-sdk/lib/parser/parser-configuration.ts", "../../@kontent-ai/delivery-sdk/lib/parser/parser.helper.ts", "../../@kontent-ai/delivery-sdk/lib/parser/implementation/async-browser-parser.class.ts", "../../@kontent-ai/delivery-sdk/lib/parser/implementation/browser-parser.class.ts", "../../@kontent-ai/delivery-sdk/lib/resolvers/property-name/camel-case-property-name-resolver.class.ts", "../../@kontent-ai/delivery-sdk/lib/resolvers/property-name/pascal-case-property-name-resolver.class.ts", "../../@kontent-ai/delivery-sdk/lib/resolvers/property-name/snake-case-property-name-resolver.class.ts", "../../@kontent-ai/delivery-sdk/lib/resolvers/rich-text/base/base-rich-text-resolver.ts", "../../@kontent-ai/delivery-sdk/lib/resolvers/rich-text/sync/rich-text-html-resolver.ts", "../../@kontent-ai/delivery-sdk/lib/resolvers/rich-text/sync/rich-text-object-resolver.ts", "../../@kontent-ai/delivery-sdk/lib/resolvers/rich-text/sync/rich-text-json-resolver.ts", "../../@kontent-ai/delivery-sdk/lib/resolvers/rich-text/base/base-async-rich-text-resolver.ts", "../../@kontent-ai/delivery-sdk/lib/resolvers/rich-text/async/async-rich-text-html-resolver.ts", "../../@kontent-ai/delivery-sdk/lib/images/image-url-transformation-builder.ts", "../../@kontent-ai/delivery-sdk/lib/images/image-url-transformation-builder.factory.ts"],
  "sourcesContent": ["'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n", "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?#&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    // In the case if failed decoding, we want to omit the key/value pairs\n    // from the result.\n    //\n    if (key === null || value === null || key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      key = encode(key);\n      value = encode(value);\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue;\n      pairs.push(key +'='+ value);\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n", "'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , controlOrWhitespace = /^[\\x00-\\x20\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/\n  , CRHTLF = /[\\n\\r\\t]/g\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , port = /:\\d+$/\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i\n  , windowsDriveLetter = /^[a-zA-Z]:/;\n\n/**\n * Remove control characters and whitespace from the beginning of a string.\n *\n * @param {Object|String} str String to trim.\n * @returns {String} A new string representing `str` stripped of control\n *     characters and whitespace from its beginning.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(controlOrWhitespace, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address, url) {     // Sanitize what is left of the address\n    return isSpecial(url.protocol) ? address.replace(/\\\\/g, '/') : address;\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d*)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * Check whether a protocol scheme is special.\n *\n * @param {String} The protocol scheme of the URL\n * @return {Boolean} `true` if the protocol scheme is special, else `false`\n * @private\n */\nfunction isSpecial(scheme) {\n  return (\n    scheme === 'file:' ||\n    scheme === 'ftp:' ||\n    scheme === 'http:' ||\n    scheme === 'https:' ||\n    scheme === 'ws:' ||\n    scheme === 'wss:'\n  );\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @param {Object} location\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address, location) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n  location = location || {};\n\n  var match = protocolre.exec(address);\n  var protocol = match[1] ? match[1].toLowerCase() : '';\n  var forwardSlashes = !!match[2];\n  var otherSlashes = !!match[3];\n  var slashesCount = 0;\n  var rest;\n\n  if (forwardSlashes) {\n    if (otherSlashes) {\n      rest = match[2] + match[3] + match[4];\n      slashesCount = match[2].length + match[3].length;\n    } else {\n      rest = match[2] + match[4];\n      slashesCount = match[2].length;\n    }\n  } else {\n    if (otherSlashes) {\n      rest = match[3] + match[4];\n      slashesCount = match[3].length;\n    } else {\n      rest = match[4]\n    }\n  }\n\n  if (protocol === 'file:') {\n    if (slashesCount >= 2) {\n      rest = rest.slice(2);\n    }\n  } else if (isSpecial(protocol)) {\n    rest = match[4];\n  } else if (protocol) {\n    if (forwardSlashes) {\n      rest = rest.slice(2);\n    }\n  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {\n    rest = match[4];\n  }\n\n  return {\n    protocol: protocol,\n    slashes: forwardSlashes || isSpecial(protocol),\n    slashesCount: slashesCount,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '', location);\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (\n    extracted.protocol === 'file:' && (\n      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||\n    (!extracted.slashes &&\n      (extracted.protocol ||\n        extracted.slashesCount < 2 ||\n        !isSpecial(url.protocol)))\n  ) {\n    instructions[3] = [/(.*)/, 'pathname'];\n  }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address, url);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      index = parse === '@'\n        ? address.lastIndexOf(parse)\n        : address.indexOf(parse);\n\n      if (~index) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n\n  if (url.auth) {\n    index = url.auth.indexOf(':');\n\n    if (~index) {\n      url.username = url.auth.slice(0, index);\n      url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n      url.password = url.auth.slice(index + 1);\n      url.password = encodeURIComponent(decodeURIComponent(url.password))\n    } else {\n      url.username = encodeURIComponent(decodeURIComponent(url.auth));\n    }\n\n    url.auth = url.password ? url.username +':'+ url.password : url.username;\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (port.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    case 'username':\n    case 'password':\n      url[part] = encodeURIComponent(value);\n      break;\n\n    case 'auth':\n      var index = value.indexOf(':');\n\n      if (~index) {\n        url.username = value.slice(0, index);\n        url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n        url.password = value.slice(index + 1);\n        url.password = encodeURIComponent(decodeURIComponent(url.password));\n      } else {\n        url.username = encodeURIComponent(decodeURIComponent(value));\n      }\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.auth = url.password ? url.username +':'+ url.password : url.username;\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , host = url.host\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result =\n    protocol +\n    ((url.protocol && url.slashes) || isSpecial(url.protocol) ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  } else if (url.password) {\n    result += ':'+ url.password;\n    result += '@';\n  } else if (\n    url.protocol !== 'file:' &&\n    isSpecial(url.protocol) &&\n    !host &&\n    url.pathname !== '/'\n  ) {\n    //\n    // Add back the empty userinfo, otherwise the original invalid URL\n    // might be transformed into a valid one with `url.pathname` as host.\n    //\n    result += '@';\n  }\n\n  //\n  // Trailing colon is removed from `url.host` when it is parsed. If it still\n  // ends with a colon, then add back the trailing colon that was removed. This\n  // prevents an invalid URL from being transformed into a valid one.\n  //\n  if (host[host.length - 1] === ':' || (port.test(url.hostname) && !url.port)) {\n    host += ':';\n  }\n\n  result += host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n", "import { IQueryParameter } from '../models';\r\n\r\nexport class UrlHelper {\r\n\r\n    /**\r\n   * Adds query parameters to given url\r\n   * @param url Url to which options will be added\r\n   * @param options Query parameters to add\r\n   */\r\n    addOptionsToUrl(url: string, options?: IQueryParameter[]): string {\r\n        if (options) {\r\n            options.forEach(filter => {\r\n                if (url.indexOf('?') > -1) {\r\n                    url += '&';\r\n                } else {\r\n                    url += '?';\r\n                }\r\n\r\n                url += filter.getParam();\r\n            });\r\n        }\r\n        return url;\r\n    }\r\n}\r\n\r\nexport const urlHelper = new UrlHelper();\r\n", "import { ISDKInfo } from '../models';\r\n\r\nimport { IHeader } from '../http/http.models';\r\n\r\nexport class HeaderHelper {\r\n\r\n    /**\r\n    * Header name for SDK usage\r\n    */\r\n    private readonly sdkVersionHeader: string = 'X-KC-SDKID';\r\n\r\n    /**\r\n    * Header identifying SDK type & version for internal purposes of Kontent.ai\r\n    */\r\n    getSdkIdHeader(info: ISDKInfo): IHeader {\r\n        return {\r\n            header: this.sdkVersionHeader,\r\n            value: `${info.host};${info.name};${info.version}`\r\n        };\r\n    }\r\n}\r\n\r\nexport const headerHelper = new HeaderHelper();\r\n", "import { AxiosResponse } from 'axios';\r\nimport { IHeader } from '../http/http.models';\r\n\r\nexport function extractHeadersFromAxiosResponse(response: AxiosResponse): IHeader[] {\r\n    const headers: IHeader[] = [];\r\n\r\n    for (const headerKey of Object.keys(response.headers)) {\r\n        headers.push({\r\n            header: headerKey,\r\n            value: response.headers[headerKey]\r\n        });\r\n    }\r\n\r\n    return headers;\r\n}\r\n", "import { AxiosError } from 'axios';\r\n\r\nimport { extractHeadersFromAxiosResponse } from './headers-helper';\r\nimport { IHeader, IRetryStrategyOptions } from '../http/http.models';\r\n\r\nexport class RetryHelper {\r\n    public readonly requestCancelledMessagePrefix: string = 'Request cancelled';\r\n    public readonly retryAfterHeaderName: string = 'Retry-After';\r\n    public readonly defaultRetryStatusCodes: number[] = [408, 429, 500, 502, 503, 504];\r\n    public readonly defaultRetryStrategy = {\r\n        addJitter: true,\r\n        deltaBackoffMs: 1000, // 1 sec\r\n        maxAttempts: 5,\r\n        canRetryError: (error: any) => this.canRetryErrorDefault(error)\r\n    };\r\n\r\n    getRetryErrorResult(data: {\r\n        retryAttempt: number;\r\n        error: any;\r\n        retryStrategy: IRetryStrategyOptions;\r\n    }): {\r\n        retryInMs: number;\r\n        canRetry: boolean;\r\n        maxRetries: number;\r\n    } {\r\n        if (data.error && data.error.message) {\r\n            if ((<string>data.error.message).startsWith(this.requestCancelledMessagePrefix)) {\r\n                // request was cancelled by user, do not retry it\r\n                return {\r\n                    canRetry: false,\r\n                    retryInMs: 0,\r\n                    maxRetries: 0\r\n                };\r\n            }\r\n        }\r\n\r\n        const canRetryError: boolean = data.retryStrategy.canRetryError\r\n            ? data.retryStrategy.canRetryError(data.error)\r\n            : this.defaultRetryStrategy.canRetryError(data.error);\r\n\r\n        if (!canRetryError) {\r\n            // request cannot be retried\r\n            return {\r\n                canRetry: false,\r\n                retryInMs: 0,\r\n                maxRetries: 0\r\n            };\r\n        }\r\n\r\n        const maxRetries: number = (data.retryStrategy.maxAttempts ?? this.defaultRetryStrategy.maxAttempts);\r\n\r\n        const maxRetriesReached: boolean =\r\n            data.retryAttempt >= maxRetries;\r\n\r\n        if (maxRetriesReached) {\r\n            // request cannot be retried anymore due to maximum attempts\r\n            return {\r\n                canRetry: false,\r\n                retryInMs: 0,\r\n                maxRetries: maxRetries\r\n            };\r\n        }\r\n        // get wait time\r\n        const retryResult: number | undefined = this.tryGetRetryAfterInMsFromError(data.error);\r\n\r\n        if (retryResult) {\r\n            // retry after header was provided\r\n            return {\r\n                canRetry: true,\r\n                retryInMs: retryResult,\r\n                maxRetries: maxRetries\r\n            };\r\n        }\r\n\r\n        // wait time was not provided in header\r\n        const waitTimeMs = this.getNextWaitTimeMs(\r\n            data.retryStrategy.addJitter ?? this.defaultRetryStrategy.addJitter,\r\n            data.retryStrategy.deltaBackoffMs ?? this.defaultRetryStrategy.deltaBackoffMs,\r\n            data.retryAttempt\r\n        );\r\n\r\n        return {\r\n            canRetry: true,\r\n            retryInMs: waitTimeMs,\r\n            maxRetries: maxRetries\r\n        };\r\n    }\r\n\r\n    getRetryStrategyFromStrategyOptions(retryOptions?: IRetryStrategyOptions): IRetryStrategyOptions {\r\n        if (!retryOptions) {\r\n            return this.defaultRetryStrategy;\r\n        }\r\n\r\n        return retryOptions;\r\n    }\r\n\r\n    canRetryInTime(\r\n        startTime: Date,\r\n        maxCumulativeWaitTimeMs: number\r\n    ): {\r\n        canRetry: boolean;\r\n        differenceInMs: number;\r\n    } {\r\n        const start = startTime.getTime();\r\n        const now = new Date().getTime();\r\n\r\n        const differenceInMs = now - start;\r\n\r\n        return {\r\n            canRetry: differenceInMs < maxCumulativeWaitTimeMs,\r\n            differenceInMs: differenceInMs\r\n        };\r\n    }\r\n\r\n    private getNextWaitTimeMs(addJitter: boolean, deltaBackoffMs: number, retryAttempts: number): number {\r\n        if (!addJitter) {\r\n            return deltaBackoffMs * Math.pow(2, retryAttempts);\r\n        }\r\n\r\n        const from: number = 0.8 * deltaBackoffMs;\r\n        const to: number = 1.2 * deltaBackoffMs * Math.pow(2, retryAttempts);\r\n\r\n        return this.randomNumberFromInterval(from, to);\r\n    }\r\n\r\n    private canRetryErrorDefault(error: any): boolean {\r\n        const axiosError = this.tryGetAxiosError(error);\r\n\r\n        if (!axiosError) {\r\n            // by default non-axios errors are not retried\r\n            return false;\r\n        }\r\n\r\n        const statusCode: number = this.getStatusCodeFromError(error);\r\n        const canRetryStatusCode: boolean = this.canRetryStatusCode(statusCode, this.defaultRetryStatusCodes);\r\n\r\n        if (canRetryStatusCode) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private tryGetRetryAfterInMsFromError(error: any): number | undefined {\r\n        const axiosError = this.tryGetAxiosError(error);\r\n\r\n        if (!axiosError || !axiosError.response) {\r\n            return undefined;\r\n        }\r\n\r\n        const headers: IHeader[] = extractHeadersFromAxiosResponse(axiosError.response);\r\n\r\n        const retryValueHeader = headers.find(\r\n            (m) => m.header.toLowerCase() === this.retryAfterHeaderName.toLowerCase()\r\n        );\r\n        if (!retryValueHeader) {\r\n            return undefined;\r\n        }\r\n\r\n        const retryInSeconds = +retryValueHeader.value;\r\n\r\n        return retryInSeconds * 1000;\r\n    }\r\n\r\n    private canRetryStatusCode(statusCode: number, useRetryForResponseCodes: number[]): boolean {\r\n        return useRetryForResponseCodes.includes(statusCode);\r\n    }\r\n\r\n    private getStatusCodeFromError(error: any): number {\r\n        const axiosError = this.tryGetAxiosError(error);\r\n\r\n        if (!axiosError || !axiosError.response) {\r\n            return 0;\r\n        }\r\n\r\n        return axiosError.response.status;\r\n    }\r\n\r\n    private tryGetAxiosError(error: any): AxiosError | undefined {\r\n        if (!error) {\r\n            return undefined;\r\n        }\r\n\r\n        if (error.isAxiosError) {\r\n            return error as AxiosError;\r\n        }\r\n\r\n        const originalError = error.originalError;\r\n        if (originalError && originalError.isAxiosError) {\r\n            return originalError as AxiosError;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * min and max included\r\n     */\r\n    private randomNumberFromInterval(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n}\r\n\r\nexport const retryHelper = new RetryHelper();\r\n", "import { IQueryParameter } from './url.models';\r\n\r\nexport namespace Parameters {\r\n    export class CustomParameter implements IQueryParameter {\r\n        /**\r\n         * Custom parameter\r\n         * @constructor\r\n         * @param {string} name - Name of the parameter\r\n         * @param {string} value - Value of the parameter\r\n         */\r\n        constructor(public name: string, public value: string) {\r\n            if (!name) {\r\n                throw Error(`Name of the custom parameter is not specified`);\r\n            }\r\n        }\r\n\r\n        public getParam(): string {\r\n            return this.name;\r\n        }\r\n\r\n        public getParamValue(): string {\r\n            return this.value;\r\n        }\r\n    }\r\n}\r\n", "'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n", "'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\nconst [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  return value != null && Number.isFinite(value = +value) ? value : defaultValue;\n}\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\nconst DIGIT = '0123456789';\n\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n}\n\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = '';\n  const {length} = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length|0]\n  }\n\n  return str;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\n// original code\n// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34\n\nconst _setImmediate = ((setImmediateSupported, postMessageSupported) => {\n  if (setImmediateSupported) {\n    return setImmediate;\n  }\n\n  return postMessageSupported ? ((token, callbacks) => {\n    _global.addEventListener(\"message\", ({source, data}) => {\n      if (source === _global && data === token) {\n        callbacks.length && callbacks.shift()();\n      }\n    }, false);\n\n    return (cb) => {\n      callbacks.push(cb);\n      _global.postMessage(token, \"*\");\n    }\n  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);\n})(\n  typeof setImmediate === 'function',\n  isFunction(_global.postMessage)\n);\n\nconst asap = typeof queueMicrotask !== 'undefined' ?\n  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);\n\n// *********************\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isReadableStream,\n  isRequest,\n  isResponse,\n  isHeaders,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable,\n  setImmediate: _setImmediate,\n  asap\n};\n", "'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n", "// eslint-disable-next-line strict\nexport default null;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n", "'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n", "'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n", "'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n", "'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n", "'use strict';\n\nexport default typeof FormData !== 'undefined' ? FormData : null;\n", "'use strict'\n\nexport default typeof Blob !== 'undefined' ? Blob : null\n", "import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\nimport Blob from './classes/Blob.js'\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n", "const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = (\n  (product) => {\n    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0\n  })(typeof navigator !== 'undefined' && navigator.product);\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\n\nexport {\n  hasBrowserEnv,\n  hasStandardBrowserWebWorkerEnv,\n  hasStandardBrowserEnv,\n  origin\n}\n", "import platform from './node/index.js';\nimport * as utils from './common/utils.js';\n\nexport default {\n  ...utils,\n  ...platform\n}\n", "'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n", "'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n\n    if (name === '__proto__') return true;\n\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http', 'fetch'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data) ||\n      utils.isReadableStream(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (utils.isResponse(data) || utils.isReadableStream(data)) {\n      return data;\n    }\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nexport default defaults;\n", "'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n", "'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else if (utils.isHeaders(header)) {\n      for (const [key, value] of header.entries()) {\n        setHeader(value, key, rewrite);\n      }\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n", "'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n", "'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n", "'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n", "'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n", "'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n", "'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n", "/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  let threshold = 1000 / freq;\n  let lastArgs;\n  let timer;\n\n  const invoke = (args, now = Date.now()) => {\n    timestamp = now;\n    lastArgs = null;\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    fn.apply(null, args);\n  }\n\n  const throttled = (...args) => {\n    const now = Date.now();\n    const passed = now - timestamp;\n    if ( passed >= threshold) {\n      invoke(args, now);\n    } else {\n      lastArgs = args;\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          invoke(lastArgs)\n        }, threshold - passed);\n      }\n    }\n  }\n\n  const flush = () => lastArgs && invoke(lastArgs);\n\n  return [throttled, flush];\n}\n\nexport default throttle;\n", "import speedometer from \"./speedometer.js\";\nimport throttle from \"./throttle.js\";\nimport utils from \"../utils.js\";\n\nexport const progressEventReducer = (listener, isDownloadStream, freq = 3) => {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return throttle(e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e,\n      lengthComputable: total != null,\n      [isDownloadStream ? 'download' : 'upload']: true\n    };\n\n    listener(data);\n  }, freq);\n}\n\nexport const progressEventDecorator = (total, throttled) => {\n  const lengthComputable = total != null;\n\n  return [(loaded) => throttled[0]({\n    lengthComputable,\n    total,\n    loaded\n  }), throttled[1]];\n}\n\nexport const asyncDecorator = (fn) => (...args) => utils.asap(() => fn(...args));\n", "'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover its components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n", "import utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ?\n\n  // Standard browser envs support document.cookie\n  {\n    write(name, value, expires, path, domain, secure) {\n      const cookie = [name + '=' + encodeURIComponent(value)];\n\n      utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());\n\n      utils.isString(path) && cookie.push('path=' + path);\n\n      utils.isString(domain) && cookie.push('domain=' + domain);\n\n      secure === true && cookie.push('secure');\n\n      document.cookie = cookie.join('; ');\n    },\n\n    read(name) {\n      const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return (match ? decodeURIComponent(match[3]) : null);\n    },\n\n    remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    }\n  }\n\n  :\n\n  // Non-standard browser env (web workers, react-native) lack needed support.\n  {\n    write() {},\n    read() {\n      return null;\n    },\n    remove() {}\n  };\n\n", "'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n", "'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/?\\/$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n", "'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? { ...thing } : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n", "import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n", "import utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport {progressEventReducer} from '../helpers/progressEventReducer.js';\nimport resolveConfig from \"../helpers/resolveConfig.js\";\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();\n    let {responseType, onUploadProgress, onDownloadProgress} = _config;\n    let onCanceled;\n    let uploadThrottled, downloadThrottled;\n    let flushUpload, flushDownload;\n\n    function done() {\n      flushUpload && flushUpload(); // flush events\n      flushDownload && flushDownload(); // flush events\n\n      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n\n      _config.signal && _config.signal.removeEventListener('abort', onCanceled);\n    }\n\n    let request = new XMLHttpRequest();\n\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (onDownloadProgress) {\n      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));\n      request.addEventListener('progress', downloadThrottled);\n    }\n\n    // Not all browsers support upload events\n    if (onUploadProgress && request.upload) {\n      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));\n\n      request.upload.addEventListener('progress', uploadThrottled);\n\n      request.upload.addEventListener('loadend', flushUpload);\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n", "import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst composeSignals = (signals, timeout) => {\n  let controller = new AbortController();\n\n  let aborted;\n\n  const onabort = function (cancel) {\n    if (!aborted) {\n      aborted = true;\n      unsubscribe();\n      const err = cancel instanceof Error ? cancel : this.reason;\n      controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n    }\n  }\n\n  let timer = timeout && setTimeout(() => {\n    onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT))\n  }, timeout)\n\n  const unsubscribe = () => {\n    if (signals) {\n      timer && clearTimeout(timer);\n      timer = null;\n      signals.forEach(signal => {\n        signal &&\n        (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));\n      });\n      signals = null;\n    }\n  }\n\n  signals.forEach((signal) => signal && signal.addEventListener && signal.addEventListener('abort', onabort));\n\n  const {signal} = controller;\n\n  signal.unsubscribe = unsubscribe;\n\n  return [signal, () => {\n    timer && clearTimeout(timer);\n    timer = null;\n  }];\n}\n\nexport default composeSignals;\n", "\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize, encode) {\n  for await (const chunk of iterable) {\n    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : (await encode(String(chunk))), chunkSize);\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {\n  const iterator = readBytes(stream, chunkSize, encode);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n", "import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport {trackStream} from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport {progressEventReducer, progressEventDecorator, asyncDecorator} from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\n\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\n    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\n    async (str) => new Uint8Array(await new Response(str).arrayBuffer())\n);\n\nconst test = (fn, ...args) => {\n  try {\n    return !!fn(...args);\n  } catch (e) {\n    return false\n  }\n}\n\nconst supportsRequestStream = isReadableStreamSupported && test(() => {\n  let duplexAccessed = false;\n\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    },\n  }).headers.has('Content-Type');\n\n  return duplexAccessed && !hasContentType;\n});\n\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst supportsResponseStream = isReadableStreamSupported &&\n  test(() => utils.isReadableStream(new Response('').body));\n\n\nconst resolvers = {\n  stream: supportsResponseStream && ((res) => res.body)\n};\n\nisFetchSupported && (((res) => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :\n      (_, config) => {\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      })\n  });\n})(new Response));\n\nconst getBodyLength = async (body) => {\n  if (body == null) {\n    return 0;\n  }\n\n  if(utils.isBlob(body)) {\n    return body.size;\n  }\n\n  if(utils.isSpecCompliantForm(body)) {\n    return (await new Request(body).arrayBuffer()).byteLength;\n  }\n\n  if(utils.isArrayBufferView(body) || utils.isArrayBuffer(body)) {\n    return body.byteLength;\n  }\n\n  if(utils.isURLSearchParams(body)) {\n    body = body + '';\n  }\n\n  if(utils.isString(body)) {\n    return (await encodeText(body)).byteLength;\n  }\n}\n\nconst resolveBodyLength = async (headers, body) => {\n  const length = utils.toFiniteNumber(headers.getContentLength());\n\n  return length == null ? getBodyLength(body) : length;\n}\n\nexport default isFetchSupported && (async (config) => {\n  let {\n    url,\n    method,\n    data,\n    signal,\n    cancelToken,\n    timeout,\n    onDownloadProgress,\n    onUploadProgress,\n    responseType,\n    headers,\n    withCredentials = 'same-origin',\n    fetchOptions\n  } = resolveConfig(config);\n\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n\n  let [composedSignal, stopTimeout] = (signal || cancelToken || timeout) ?\n    composeSignals([signal, cancelToken], timeout) : [];\n\n  let finished, request;\n\n  const onFinish = () => {\n    !finished && setTimeout(() => {\n      composedSignal && composedSignal.unsubscribe();\n    });\n\n    finished = true;\n  }\n\n  let requestContentLength;\n\n  try {\n    if (\n      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\n      (requestContentLength = await resolveBodyLength(headers, data)) !== 0\n    ) {\n      let _request = new Request(url, {\n        method: 'POST',\n        body: data,\n        duplex: \"half\"\n      });\n\n      let contentTypeHeader;\n\n      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n        headers.setContentType(contentTypeHeader)\n      }\n\n      if (_request.body) {\n        const [onProgress, flush] = progressEventDecorator(\n          requestContentLength,\n          progressEventReducer(asyncDecorator(onUploadProgress))\n        );\n\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush, encodeText);\n      }\n    }\n\n    if (!utils.isString(withCredentials)) {\n      withCredentials = withCredentials ? 'include' : 'omit';\n    }\n\n    request = new Request(url, {\n      ...fetchOptions,\n      signal: composedSignal,\n      method: method.toUpperCase(),\n      headers: headers.normalize().toJSON(),\n      body: data,\n      duplex: \"half\",\n      credentials: withCredentials\n    });\n\n    let response = await fetch(request);\n\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n    if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {\n      const options = {};\n\n      ['status', 'statusText', 'headers'].forEach(prop => {\n        options[prop] = response[prop];\n      });\n\n      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n\n      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(\n        responseContentLength,\n        progressEventReducer(asyncDecorator(onDownloadProgress), true)\n      ) || [];\n\n      response = new Response(\n        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {\n          flush && flush();\n          isStreamResponse && onFinish();\n        }, encodeText),\n        options\n      );\n    }\n\n    responseType = responseType || 'text';\n\n    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n\n    !isStreamResponse && onFinish();\n\n    stopTimeout && stopTimeout();\n\n    return await new Promise((resolve, reject) => {\n      settle(resolve, reject, {\n        data: responseData,\n        headers: AxiosHeaders.from(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        config,\n        request\n      })\n    })\n  } catch (err) {\n    onFinish();\n\n    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {\n      throw Object.assign(\n        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\n        {\n          cause: err.cause || err\n        }\n      )\n    }\n\n    throw AxiosError.from(err, err && err.code, config, request);\n  }\n});\n\n\n", "import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport fetchAdapter from './fetch.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter,\n  fetch: fetchAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n", "'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n", "export const VERSION = \"1.7.4\";", "'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n", "'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy;\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n", "'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n", "'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n", "'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n", "const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n", "'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport adapters from './adapters/adapters.js';\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n", "import axios from './lib/axios.js';\n\n// This module is intended to unwrap Axios default export as named.\n// Keep top-level export same with static properties\n// so that it can keep same with es module or cjs\nconst {\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n} = axios;\n\nexport {\n  axios as default,\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n}\n", "export class HttpDebugger {\r\n    /*\r\n    Called when http request is started\r\n    */\r\n    debugStartHttpRequest(): void {\r\n    }\r\n\r\n    /*\r\n    Called when http request is resolved\r\n    */\r\n    debugSuccessHttpRequest(): void {\r\n    }\r\n\r\n    /*\r\n    Called when http request is being retried\r\n    */\r\n    debugRetryHttpRequest(): void {\r\n    }\r\n}\r\n\r\nexport const httpDebugger = new HttpDebugger();\r\n", "import axios, { AxiosInstance, Canceler, CancelToken } from 'axios';\r\nimport { extractHeadersFromAxiosResponse } from '../helpers/headers-helper';\r\n\r\nimport { httpDebugger } from './http.debugger';\r\nimport {\r\n    IHttpCancelRequestToken,\r\n    IHeader,\r\n    IHttpDeleteQueryCall,\r\n    IHttpGetQueryCall,\r\n    IHttpPatchQueryCall,\r\n    IHttpPostQueryCall,\r\n    IHttpPutQueryCall,\r\n    IHttpQueryOptions,\r\n    IResponse,\r\n    IRetryStrategyOptions\r\n} from './http.models';\r\nimport { retryHelper } from '../helpers/retry-helper';\r\n\r\nexport interface IHttpFunctionsConfig {\r\n    logErrorsToConsole: boolean;\r\n}\r\n\r\nexport async function getWithRetryAsync<TRawData>(\r\n    instance: AxiosInstance,\r\n    call: IHttpGetQueryCall,\r\n    functionsConfig: IHttpFunctionsConfig,\r\n    options?: IHttpQueryOptions<CancelToken>\r\n): Promise<IResponse<TRawData>> {\r\n    const retryStrategyOptions = options?.retryStrategy ?? retryHelper.defaultRetryStrategy;\r\n\r\n    return await runWithRetryAsync<TRawData>({\r\n        retryAttempt: 0,\r\n        url: call.url,\r\n        retryStrategy: retryStrategyOptions,\r\n        functionsConfig: functionsConfig,\r\n        call: async (retryAttempt) => {\r\n            httpDebugger.debugStartHttpRequest();\r\n\r\n            const axiosResponse = await instance.get<TRawData>(call.url, {\r\n                headers: getHeadersJson(options?.headers ?? [], false),\r\n                responseType: options?.responseType,\r\n                cancelToken: options?.cancelToken?.token\r\n            });\r\n\r\n            const response: IResponse<TRawData> = {\r\n                data: axiosResponse.data,\r\n                rawResponse: axiosResponse,\r\n                headers: extractHeadersFromAxiosResponse(axiosResponse),\r\n                status: axiosResponse.status,\r\n                retryStrategy: {\r\n                    options: retryStrategyOptions,\r\n                    retryAttempts: retryAttempt\r\n                }\r\n            };\r\n\r\n            httpDebugger.debugSuccessHttpRequest();\r\n            return response;\r\n        }\r\n    });\r\n}\r\n\r\nexport async function postWithRetryAsync<TRawData>(\r\n    instance: AxiosInstance,\r\n    call: IHttpPostQueryCall,\r\n    functionsConfig: IHttpFunctionsConfig,\r\n    options?: IHttpQueryOptions<CancelToken>\r\n): Promise<IResponse<TRawData>> {\r\n    const retryStrategyOptions = options?.retryStrategy ?? retryHelper.defaultRetryStrategy;\r\n\r\n    return await runWithRetryAsync<TRawData>({\r\n        retryAttempt: 0,\r\n        url: call.url,\r\n        retryStrategy: retryStrategyOptions,\r\n        functionsConfig: functionsConfig,\r\n        call: async (retryAttempt) => {\r\n            httpDebugger.debugStartHttpRequest();\r\n\r\n            const axiosResponse = await instance.post<TRawData>(call.url, call.body, {\r\n                headers: getHeadersJson(options?.headers ?? [], false),\r\n                responseType: options?.responseType,\r\n                // required for uploading large files\r\n                // https://github.com/axios/axios/issues/1362\r\n                maxContentLength: 'Infinity' as any,\r\n                maxBodyLength: 'Infinity' as any,\r\n                cancelToken: options?.cancelToken?.token\r\n            });\r\n\r\n            const response: IResponse<TRawData> = {\r\n                data: axiosResponse.data,\r\n                rawResponse: axiosResponse,\r\n                headers: extractHeadersFromAxiosResponse(axiosResponse),\r\n                status: axiosResponse.status,\r\n                retryStrategy: {\r\n                    options: retryStrategyOptions,\r\n                    retryAttempts: retryAttempt\r\n                }\r\n            };\r\n\r\n            httpDebugger.debugSuccessHttpRequest();\r\n            return response;\r\n        }\r\n    });\r\n}\r\n\r\nexport async function putWithRetryAsync<TRawData>(\r\n    instance: AxiosInstance,\r\n    call: IHttpPutQueryCall,\r\n    functionsConfig: IHttpFunctionsConfig,\r\n    options?: IHttpQueryOptions<CancelToken>\r\n): Promise<IResponse<TRawData>> {\r\n    const retryStrategyOptions = options?.retryStrategy ?? retryHelper.defaultRetryStrategy;\r\n\r\n    return await runWithRetryAsync<TRawData>({\r\n        retryAttempt: 0,\r\n        url: call.url,\r\n        retryStrategy: retryStrategyOptions,\r\n        functionsConfig: functionsConfig,\r\n        call: async (retryAttempt) => {\r\n            httpDebugger.debugStartHttpRequest();\r\n\r\n            const axiosResponse = await instance.put<TRawData>(call.url, call.body, {\r\n                headers: getHeadersJson(options?.headers ?? [], false),\r\n                responseType: options?.responseType,\r\n                // required for uploading large files\r\n                // https://github.com/axios/axios/issues/1362\r\n                maxContentLength: 'Infinity' as any,\r\n                maxBodyLength: 'Infinity' as any,\r\n                cancelToken: options?.cancelToken?.token\r\n            });\r\n\r\n            const response: IResponse<TRawData> = {\r\n                data: axiosResponse.data,\r\n                rawResponse: axiosResponse,\r\n                headers: extractHeadersFromAxiosResponse(axiosResponse),\r\n                status: axiosResponse.status,\r\n                retryStrategy: {\r\n                    options: retryStrategyOptions,\r\n                    retryAttempts: retryAttempt\r\n                }\r\n            };\r\n\r\n            httpDebugger.debugSuccessHttpRequest();\r\n            return response;\r\n        }\r\n    });\r\n}\r\n\r\nexport async function patchWithRetryAsync<TRawData>(\r\n    instance: AxiosInstance,\r\n    call: IHttpPatchQueryCall,\r\n    functionsConfig: IHttpFunctionsConfig,\r\n    options?: IHttpQueryOptions<CancelToken>\r\n): Promise<IResponse<TRawData>> {\r\n    const retryStrategyOptions = options?.retryStrategy ?? retryHelper.defaultRetryStrategy;\r\n\r\n    return await runWithRetryAsync<TRawData>({\r\n        retryAttempt: 0,\r\n        url: call.url,\r\n        retryStrategy: retryStrategyOptions,\r\n        functionsConfig: functionsConfig,\r\n        call: async (retryAttempt) => {\r\n            httpDebugger.debugStartHttpRequest();\r\n\r\n            const axiosResponse = await instance.patch<TRawData>(call.url, call.body, {\r\n                headers: getHeadersJson(options?.headers ?? [], false),\r\n                responseType: options?.responseType,\r\n                // required for uploading large files\r\n                // https://github.com/axios/axios/issues/1362\r\n                maxContentLength: 'Infinity' as any,\r\n                maxBodyLength: 'Infinity' as any,\r\n                cancelToken: options?.cancelToken?.token\r\n            });\r\n\r\n            const response: IResponse<TRawData> = {\r\n                data: axiosResponse.data,\r\n                rawResponse: axiosResponse,\r\n                headers: extractHeadersFromAxiosResponse(axiosResponse),\r\n                status: axiosResponse.status,\r\n                retryStrategy: {\r\n                    options: retryStrategyOptions,\r\n                    retryAttempts: retryAttempt\r\n                }\r\n            };\r\n\r\n            httpDebugger.debugSuccessHttpRequest();\r\n            return response;\r\n        }\r\n    });\r\n}\r\n\r\nexport async function deleteWithRetryAsync<TRawData>(\r\n    instance: AxiosInstance,\r\n    call: IHttpDeleteQueryCall,\r\n    functionsConfig: IHttpFunctionsConfig,\r\n    options?: IHttpQueryOptions<CancelToken>\r\n): Promise<IResponse<TRawData>> {\r\n    const retryStrategyOptions = options?.retryStrategy ?? retryHelper.defaultRetryStrategy;\r\n\r\n    return await runWithRetryAsync<TRawData>({\r\n        retryAttempt: 0,\r\n        url: call.url,\r\n        retryStrategy: retryStrategyOptions,\r\n        functionsConfig: functionsConfig,\r\n        call: async (retryAttempt) => {\r\n            httpDebugger.debugStartHttpRequest();\r\n\r\n            const axiosResponse = await instance.delete<TRawData>(call.url, {\r\n                headers: getHeadersJson(options?.headers ?? [], false),\r\n                responseType: options?.responseType,\r\n                // required for uploading large files\r\n                // https://github.com/axios/axios/issues/1362\r\n                maxContentLength: 'Infinity' as any,\r\n                maxBodyLength: 'Infinity' as any,\r\n                cancelToken: options?.cancelToken?.token\r\n            });\r\n\r\n            const response: IResponse<TRawData> = {\r\n                data: axiosResponse.data,\r\n                rawResponse: axiosResponse,\r\n                headers: extractHeadersFromAxiosResponse(axiosResponse),\r\n                status: axiosResponse.status,\r\n                retryStrategy: {\r\n                    options: retryStrategyOptions,\r\n                    retryAttempts: retryAttempt\r\n                }\r\n            };\r\n\r\n            httpDebugger.debugSuccessHttpRequest();\r\n            return response;\r\n        }\r\n    });\r\n}\r\n\r\nexport function createCancelToken(): IHttpCancelRequestToken<CancelToken> {\r\n    let canceler: Canceler;\r\n\r\n    const token = new axios.CancelToken((c) => {\r\n        // An executor function receives a cancel function as a parameter\r\n        canceler = c;\r\n    });\r\n\r\n    return {\r\n        cancel: (cancelMessage) =>\r\n            canceler(`${retryHelper.requestCancelledMessagePrefix}: ${cancelMessage ?? 'User cancel'}`),\r\n        token: token\r\n    };\r\n}\r\n\r\nasync function runWithRetryAsync<TRawData>(data: {\r\n    url: string;\r\n    retryAttempt: number;\r\n    call: (retryAttempt: number) => Promise<IResponse<TRawData>>;\r\n    retryStrategy: IRetryStrategyOptions;\r\n    functionsConfig: IHttpFunctionsConfig;\r\n}): Promise<IResponse<TRawData>> {\r\n    try {\r\n        return await data.call(data.retryAttempt);\r\n    } catch (error) {\r\n        const retryResult = retryHelper.getRetryErrorResult({\r\n            error: error,\r\n            retryAttempt: data.retryAttempt,\r\n            retryStrategy: data.retryStrategy\r\n        });\r\n\r\n        if (retryResult.canRetry) {\r\n            httpDebugger.debugRetryHttpRequest();\r\n\r\n            // wait time before retrying\r\n            await new Promise((resolve) => setTimeout(resolve, retryResult.retryInMs));\r\n\r\n            if (data.functionsConfig.logErrorsToConsole) {\r\n                console.warn(\r\n                    `Retry attempt '${data.retryAttempt + 1}' from a maximum of '${\r\n                        retryResult.maxRetries\r\n                    }' retries. Request url: '${data.url}'`\r\n                );\r\n            }\r\n\r\n            // retry request\r\n            return await runWithRetryAsync({\r\n                call: data.call,\r\n                retryStrategy: data.retryStrategy,\r\n                retryAttempt: data.retryAttempt + 1,\r\n                url: data.url,\r\n                functionsConfig: data.functionsConfig\r\n            });\r\n        }\r\n\r\n        if (data.functionsConfig.logErrorsToConsole) {\r\n            console.error(`Executing '${data.url}' failed. Request was retried '${data.retryAttempt}' times. `, error);\r\n        }\r\n\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction getHeadersJson(headers: IHeader[], addContentTypeHeader: boolean): { [header: string]: string } {\r\n    const headerJson: { [header: string]: string } = {};\r\n\r\n    headers.forEach((header) => {\r\n        headerJson[header.header] = header.value;\r\n    });\r\n\r\n    if (addContentTypeHeader) {\r\n        // add default content type header if not present\r\n        const contentTypeHeader = headers.find((m) => m.header.toLowerCase() === 'Content-Type'.toLowerCase());\r\n\r\n        if (!contentTypeHeader) {\r\n            headerJson['Content-Type'] = 'application/json';\r\n        }\r\n    }\r\n\r\n    return headerJson;\r\n}\r\n", "import axios, { AxiosInstance, AxiosRequestConfig, CancelToken } from 'axios';\r\n\r\nimport * as HttpFunctions from './http.functions';\r\nimport { IHttpFunctionsConfig } from './http.functions';\r\nimport {\r\n    IResponse,\r\n    IHttpDeleteQueryCall,\r\n    IHttpGetQueryCall,\r\n    IHttpPatchQueryCall,\r\n    IHttpPostQueryCall,\r\n    IHttpPutQueryCall,\r\n    IHttpQueryOptions,\r\n    IHttpCancelRequestToken\r\n} from './http.models';\r\nimport { IHttpService } from './ihttp.service';\r\n\r\nexport class HttpService implements IHttpService<CancelToken> {\r\n    private readonly axiosInstance: AxiosInstance;\r\n\r\n    private readonly functionsConfig: IHttpFunctionsConfig;\r\n\r\n    constructor(\r\n        private opts?: {\r\n            axiosRequestConfig?: AxiosRequestConfig;\r\n            logErrorsToConsole?: boolean;\r\n        }\r\n    ) {\r\n        this.axiosInstance = axios.create(opts?.axiosRequestConfig);\r\n        this.functionsConfig = this.getFunctionsConfig();\r\n    }\r\n\r\n    async getAsync<TRawData>(\r\n        call: IHttpGetQueryCall,\r\n        options?: IHttpQueryOptions<CancelToken>\r\n    ): Promise<IResponse<TRawData>> {\r\n        return await HttpFunctions.getWithRetryAsync<TRawData>(this.axiosInstance, call, this.functionsConfig, options);\r\n    }\r\n\r\n    async postAsync<TRawData>(\r\n        call: IHttpPostQueryCall,\r\n        options?: IHttpQueryOptions<CancelToken>\r\n    ): Promise<IResponse<TRawData>> {\r\n        return await HttpFunctions.postWithRetryAsync<TRawData>(\r\n            this.axiosInstance,\r\n            call,\r\n            this.functionsConfig,\r\n            options\r\n        );\r\n    }\r\n\r\n    async putAsync<TRawData>(\r\n        call: IHttpPutQueryCall,\r\n        options?: IHttpQueryOptions<CancelToken>\r\n    ): Promise<IResponse<TRawData>> {\r\n        return await HttpFunctions.putWithRetryAsync<TRawData>(this.axiosInstance, call, this.functionsConfig, options);\r\n    }\r\n\r\n    async patchAsync<TRawData>(\r\n        call: IHttpPatchQueryCall,\r\n        options?: IHttpQueryOptions<CancelToken>\r\n    ): Promise<IResponse<TRawData>> {\r\n        return await HttpFunctions.patchWithRetryAsync<TRawData>(\r\n            this.axiosInstance,\r\n            call,\r\n            this.functionsConfig,\r\n            options\r\n        );\r\n    }\r\n\r\n    async deleteAsync<TRawData>(\r\n        call: IHttpDeleteQueryCall,\r\n        options?: IHttpQueryOptions<CancelToken>\r\n    ): Promise<IResponse<TRawData>> {\r\n        return await HttpFunctions.deleteWithRetryAsync<TRawData>(\r\n            this.axiosInstance,\r\n            call,\r\n            this.functionsConfig,\r\n            options\r\n        );\r\n    }\r\n\r\n    createCancelToken(): IHttpCancelRequestToken<CancelToken> {\r\n        return HttpFunctions.createCancelToken();\r\n    }\r\n\r\n    private getFunctionsConfig(): IHttpFunctionsConfig {\r\n        return {\r\n            logErrorsToConsole: this.opts?.logErrorsToConsole ?? true\r\n        };\r\n    }\r\n}\r\n", "import { IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nexport namespace Filters {\r\n    const valueSeparator: string = ',';\r\n    const defaultValue: string = '';\r\n\r\n    const getParamValueForSystemFilter = (param: string | string[]): string | undefined => {\r\n        if (!param) {\r\n            return defaultValue;\r\n        }\r\n\r\n        if (Array.isArray(param)) {\r\n            let value = '';\r\n            // use [in] filter\r\n            for (let i = 0; i < param.length; i++) {\r\n                value = value + param[i].toString();\r\n\r\n                if (i !== param.length - 1) {\r\n                    // append separator if its not last item\r\n                    value = value + valueSeparator;\r\n                }\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        // single param was given\r\n        return param.toString();\r\n    };\r\n\r\n    export class TypeFilter implements IQueryParameter {\r\n        constructor(public type: string | string[]) {}\r\n\r\n        getParam(): string {\r\n            if (Array.isArray(this.type)) {\r\n                // multiple types\r\n                return `system.type[in]=${getParamValueForSystemFilter(this.type)}`;\r\n            }\r\n\r\n            // single type\r\n            return `system.type=${getParamValueForSystemFilter(this.type)}`;\r\n        }\r\n    }\r\n\r\n    export class CollectionFilter implements IQueryParameter {\r\n        constructor(public collection: string | string[]) {}\r\n\r\n        getParam(): string {\r\n            if (Array.isArray(this.collection)) {\r\n                // multiple collections\r\n                return `system.collection[in]=${getParamValueForSystemFilter(this.collection)}`;\r\n            }\r\n\r\n            // single collection\r\n            return `system.collection=${getParamValueForSystemFilter(this.collection)}`;\r\n        }\r\n    }\r\n\r\n    export class EmptyFilter implements IQueryParameter {\r\n        constructor(public element: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[empty]`;\r\n        }\r\n    }\r\n\r\n    export class NotEmptyFilter implements IQueryParameter {\r\n        constructor(public element: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[nempty]`;\r\n        }\r\n    }\r\n\r\n    export class EqualsFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[eq]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class NotEqualsFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[neq]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class AllFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[all]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values.map((m) => m.trim()).join(',');\r\n        }\r\n    }\r\n\r\n    export class AnyFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[any]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values.map((m) => m.trim()).join(',');\r\n        }\r\n    }\r\n\r\n    export class ContainsFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[contains]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values.map((m) => m.trim()).join(',');\r\n        }\r\n    }\r\n\r\n    export class GreaterThanFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[gt]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class GreaterThanOrEqualFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[gte]=${this.getParamValue()}`;\r\n        }\r\n\r\n        getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class InFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[in]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values\r\n                .map((m) => {\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class NotInFilter implements IQueryParameter {\r\n        constructor(public element: string, public values: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[nin]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.values || !Array.isArray(this.values)) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.values\r\n                .map((m) => {\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class LessThanFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[lt]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class LessThanOrEqualFilter implements IQueryParameter {\r\n        constructor(public element: string, public value: string | number) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[lte]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            if (!this.value) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.value;\r\n        }\r\n    }\r\n\r\n    export class RangeFilter implements IQueryParameter {\r\n        constructor(public element: string, public lowerValue: number | string, public higherValue: number | string) {}\r\n\r\n        getParam(): string {\r\n            return `${this.element.trim()}[range]=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | number | undefined {\r\n            let lowerVal = defaultValue;\r\n            let higherVal = defaultValue;\r\n\r\n            if (this.lowerValue) {\r\n                lowerVal = this.lowerValue.toString();\r\n            }\r\n\r\n            if (this.higherValue) {\r\n                higherVal = this.higherValue.toString();\r\n            }\r\n\r\n            return `${lowerVal},${higherVal}`;\r\n        }\r\n    }\r\n}\r\n", "import { IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nimport { SortOrder } from './sort-order';\r\n\r\nexport namespace Parameters {\r\n    const defaultValue: string = '';\r\n\r\n    export class QueryParameter implements IQueryParameter {\r\n        /**\r\n         * Parameter\r\n         * @constructor\r\n         * @param {string} name - Name of the parameter\r\n         * @param {string} value - Value of the parameter\r\n         */\r\n        constructor(public name: string, public value: string) {\r\n            if (!name) {\r\n                throw Error(`Name of the parameter is not specified`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `${this.name}=${this.value}`;\r\n        }\r\n    }\r\n\r\n    export class ElementsParameter implements IQueryParameter {\r\n        /**\r\n         * Sets elements (projection) so that only certain elements from a content item are returned\r\n         * @constructor\r\n         * @param {string[]} elementCodenames - Array of element codenames to include in response.\r\n         */\r\n        constructor(public elementCodenames: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `elements=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.elementCodenames) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.elementCodenames\r\n                .map((m) => {\r\n                    if (!m) {\r\n                        throw Error(`Codename of 'ElementsParameter' cannot be null or empty`);\r\n                    }\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class ExcludeElementsParameter implements IQueryParameter {\r\n        /**\r\n         * Sets elements (projection) so that only certain elements are excluded from API response\r\n         * @constructor\r\n         * @param {string[]} elementCodenames - Array of element codenames to exclude from API response.\r\n         */\r\n        constructor(public elementCodenames: string[]) {}\r\n\r\n        getParam(): string {\r\n            return `excludeElements=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            if (!this.elementCodenames) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return this.elementCodenames\r\n                .map((m) => {\r\n                    if (!m) {\r\n                        throw Error(`Codename of 'ExcludeElementsParameter' cannot be null or empty`);\r\n                    }\r\n                    return m.trim();\r\n                })\r\n                .join(',');\r\n        }\r\n    }\r\n\r\n    export class LimitParameter implements IQueryParameter {\r\n        /**\r\n         * Limits the number of items that are returned from response\r\n         * @constructor\r\n         * @param {number} limit - Number of elements that will be returned\r\n         */\r\n        constructor(public limit: number) {\r\n            if (limit <= 0) {\r\n                throw Error(`'LimitParameter' must specify a positive integer`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `limit=${this.limit}`;\r\n        }\r\n    }\r\n\r\n    export class IncludeTotalCountParameter implements IQueryParameter {\r\n        /**\r\n         * Adds 'includeTotalCount' query parameter to query\r\n         * @constructor\r\n         */\r\n        constructor() {}\r\n\r\n        getParam(): string {\r\n            return `includeTotalCount=true`;\r\n        }\r\n    }\r\n\r\n    export class SkipParameter implements IQueryParameter {\r\n        /**\r\n         * Configures response to skip certain number of items\r\n         * @constructor\r\n         * @param {number} skip - Number of content items that will be skipped\r\n         */\r\n        constructor(public skip: number) {\r\n            if (skip < 0) {\r\n                throw Error(`'SkipParameter' must specify a positive integer number or zero.\"`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `skip=${this.skip}`;\r\n        }\r\n    }\r\n\r\n    export class OrderParameter implements IQueryParameter {\r\n        /**\r\n         * Sorts the response based on given element.\r\n         * @constructor\r\n         * @param {string} element - Element that will be used for sorting (can be both elements.<elementname> or system.<elementname>)\r\n         * @param {SortOrder} sortOrder - Order type (desc/asc). Defaults to 'asc' if SortOrder is null or invalid.\r\n         */\r\n        constructor(public element: string, public sortOrder: SortOrder) {\r\n            if (!element) {\r\n                throw Error(`Element specified in 'OrderParameter' is null or empty`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `order=${this.getParamValue()}`;\r\n        }\r\n\r\n        private getParamValue(): string | undefined {\r\n            return `${this.element.trim()}[${this.sortOrder}]`;\r\n        }\r\n    }\r\n\r\n    export class CustomParameter implements IQueryParameter {\r\n        constructor(public param: string) {}\r\n\r\n        getParam(): string {\r\n            return this.param;\r\n        }\r\n    }\r\n\r\n    export class DepthParameter implements IQueryParameter {\r\n        /**\r\n         * Configures the depth of the response. Content items might reference another 'linked items' using the Linked items element.\r\n         * Recursively, these linked items can reference another linked items.\r\n         * By default, only one level of linked content is returned.\r\n         * @constructor\r\n         * @param {number} depth - Depth fo the response\r\n         */\r\n        constructor(public depth: number) {\r\n            if (depth < 0) {\r\n                throw Error(`'DepthParameter' must specify a positive integer or zero`);\r\n            }\r\n        }\r\n\r\n        getParam(): string {\r\n            return `depth=${this.depth}`;\r\n        }\r\n    }\r\n\r\n    export class LanguageParameter implements IQueryParameter {\r\n        /**\r\n         * Specifies language version to fetch\r\n         * @constructor\r\n         * @param {string} languageCodename - Codename of the language\r\n         */\r\n        constructor(public languageCodename: string) {}\r\n\r\n        getParam(): string {\r\n            return `language=${this.languageCodename}`;\r\n        }\r\n    }\r\n}\r\n", "import { IHeader, IHttpCancelRequestToken, IQueryParameter } from '@kontent-ai/core-sdk';\r\nimport { IDeliveryNetworkResponse } from './base-responses';\r\nimport { IPagination } from './pagination.class';\r\n\r\nexport type LinkedItemsReferenceHandler = 'map' | 'ignore';\r\n\r\nexport interface IProxyUrlData {\r\n    action: string;\r\n    domain: string;\r\n    queryParameters: IQueryParameter[];\r\n    queryString: string;\r\n    queryConfig: IQueryConfig;\r\n    environmentId: string;\r\n}\r\n\r\nexport interface ISDKInfo {\r\n    /**\r\n     * Name of SDK\r\n     */\r\n    name: string;\r\n    /**\r\n     * Version SDK\r\n     */\r\n    version: string;\r\n    /**\r\n     * Host of SDK\r\n     */\r\n    host: string;\r\n}\r\n\r\nexport interface IKontentResponse {}\r\n\r\nexport interface IKontentListWithHeaderResponse extends IKontentResponse {\r\n    items: any[];\r\n}\r\n\r\nexport interface IKontentListResponse extends IKontentResponse {\r\n    pagination?: IPagination;\r\n    items: any[];\r\n}\r\n\r\nexport interface IKontentListAllResponse extends IKontentResponse {\r\n    responses: any[];\r\n    items: any[];\r\n}\r\n\r\nexport interface IListAllQueryConfig<TResponse extends IKontentListResponse, TContract> {\r\n    /**\r\n     * Number of pages to get. If not set, all available pages are fetched.\r\n     */\r\n    pages?: number;\r\n\r\n    /**\r\n     * Delay between each HTTP requests\r\n     */\r\n    delayBetweenRequests?: number;\r\n\r\n    /**\r\n     * Executed when a list response is loaded\r\n     */\r\n    responseFetched?: (\r\n        response: IDeliveryNetworkResponse<TResponse, TContract>,\r\n        nextPageUrl?: string,\r\n        continuationToken?: string\r\n    ) => void;\r\n}\r\n\r\nexport interface IQueryConfig {\r\n    /**\r\n     * Indicates if query should use preview mode. Overrides default configuration\r\n     */\r\n    usePreviewMode?: boolean;\r\n\r\n    /**\r\n     * Indicates if query should use secured delivery API mode.  Overrides default configuration\r\n     */\r\n    useSecuredMode?: boolean;\r\n\r\n    /**\r\n     * If the requested content has changed since the last request, the header determines whether\r\n     * to wait while fetching content. This can be useful when retrieving changed content\r\n     * in reaction to a webhook call. By default, when the header is not set, the API\r\n     * serves old content (if cached by the CDN) while it's fetching the new content\r\n     * to minimize wait time.\r\n     */\r\n    waitForLoadingNewContent?: boolean;\r\n\r\n    /**\r\n     * Extra headers added to request\r\n     */\r\n    customHeaders?: IHeader[];\r\n\r\n    /**\r\n     * Cancel token\r\n     */\r\n    cancelToken?: IHttpCancelRequestToken<any>;\r\n}\r\n\r\nexport interface IDeliveryErrorRaw {\r\n    message: string;\r\n    request_id: string | null;\r\n    error_code: number;\r\n    specific_code: number;\r\n}\r\n\r\nexport class DeliveryError {\r\n    public message: string;\r\n    public requestId: string | null;\r\n    public errorCode: number;\r\n    public specificCode: number;\r\n\r\n    constructor(data: { message: string; requestId: string | null; errorCode: number; specificCode: number }) {\r\n        this.message = data.message;\r\n        this.requestId = data.requestId;\r\n        this.errorCode = data.errorCode;\r\n        this.specificCode = data.specificCode;\r\n    }\r\n}\r\n", "export const continuationTokenHeaderName: string = 'X-Continuation';\r\nexport const waitForLoadingNewContentHeader: string = 'X-KC-Wait-For-Loading-New-Content';\r\nexport const sdkVersionHeader: string = 'X-KC-SDKID';\r\nexport const staleContentHeaderName: string = 'X-Stale-Content';\r\n\r\n", "import { IHeader, IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { Filters, IDeliveryNetworkResponse, IKontentResponse, IQueryConfig, Parameters } from '../../models';\r\nimport { QueryService } from '../../services';\r\n\r\nexport abstract class BaseQuery<TResponse extends IKontentResponse, TQueryConfig extends IQueryConfig, TContract> {\r\n    protected parameters: IQueryParameter[] = [];\r\n    protected customUrl?: string;\r\n    protected abstract _queryConfig: TQueryConfig;\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService) {}\r\n\r\n    /**\r\n     * Gets URL of the query\r\n     */\r\n    abstract getUrl(): string;\r\n\r\n    /**\r\n     * Gets promise for query execution\r\n     */\r\n    abstract toPromise(): Promise<IDeliveryNetworkResponse<TResponse, TContract>>;\r\n\r\n    /**\r\n     * Maps json data to response\r\n     */\r\n    abstract map(json: any): TResponse;\r\n\r\n    /**\r\n     * Adds custom parameter to query\r\n     * @param name Name of parameter\r\n     * @param value Value of parameter\r\n     */\r\n    withCustomParameter(name: string, value: string): this {\r\n        this.parameters.push(new Parameters.QueryParameter(name, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds parameter to query\r\n     * @param name Name of parameter\r\n     * @param value Value of parameter\r\n     */\r\n    withParameter(parameter: IQueryParameter): this {\r\n        this.parameters.push(parameter);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds parameters to query\r\n     * @param parameters Array of parameters\r\n     */\r\n    withParameters(parameters: IQueryParameter[]): this {\r\n        this.parameters.push(...parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets headers used by this query\r\n     */\r\n    getHeaders(): IHeader[] {\r\n        return this.queryService.getHeaders(this._queryConfig, []);\r\n    }\r\n\r\n    /**\r\n     * Sets request headers\r\n     */\r\n    withHeaders(headers: IHeader[]): this {\r\n        const queryHeaders = this._queryConfig.customHeaders ?? [];\r\n        queryHeaders.push(...headers);\r\n        this._queryConfig.customHeaders = queryHeaders;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets request header\r\n     */\r\n    withHeader(header: IHeader): this {\r\n        const queryHeaders = this._queryConfig.customHeaders ?? [];\r\n        queryHeaders.push(header);\r\n        this._queryConfig.customHeaders = queryHeaders;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets custom URL of request (overrides default URL of the query)\r\n     */\r\n    withCustomUrl(url: string): this {\r\n        this.customUrl = url;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets all query parameter currently applied to query\r\n     */\r\n    getParameters(): IQueryParameter[] {\r\n        return this.parameters;\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: TQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    protected resolveUrlInternal(action: string): string {\r\n        // use custom URL if user specified it\r\n        if (this.customUrl) {\r\n            return this.customUrl;\r\n        }\r\n\r\n        // use original url\r\n        return this.queryService.getUrl(action, this._queryConfig ?? {}, this.getParameters());\r\n    }\r\n\r\n    protected processDefaultLanguageParameter(): void {\r\n        // add default language if none is specified && default language is specified globally\r\n        if (this.config.defaultLanguage) {\r\n            const languageParameter = this.getParameters().find((m) =>\r\n                m.getParam()?.toLowerCase().includes('language='.toLowerCase())\r\n            );\r\n            if (!languageParameter) {\r\n                // language parameter was not specified in query, use globally defined language\r\n                this.parameters.push(new Parameters.LanguageParameter(this.config.defaultLanguage));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processExcludeArchivedItemsParameter(): void {\r\n        if (this.config.excludeArchivedItems) {\r\n            this.parameters.push(new Filters.NotEqualsFilter('system.workflow_step', 'archived'));\r\n        }\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { Responses, IElementQueryConfig, IDeliveryNetworkResponse } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class ElementQuery extends BaseQuery<\r\n    Responses.IViewContentTypeElementResponse,\r\n    IElementQueryConfig,\r\n    Contracts.IViewContentTypeElementContract\r\n> {\r\n\r\n    protected _queryConfig: IElementQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService,\r\n        private typeCodename: string,\r\n        private elementCodename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!typeCodename) {\r\n            throw Error(`Codename of the type has to be provided`);\r\n        }\r\n\r\n        if (!elementCodename) {\r\n            throw Error(`Codename of the element has to be provided`);\r\n        }\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IViewContentTypeElementResponse,\r\n            Contracts.IViewContentTypeElementContract\r\n        >\r\n    > {\r\n        return this.queryService.getElementAsync(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        return super.resolveUrlInternal(`/types/${this.typeCodename}/elements/${this.elementCodename}`);\r\n    }\r\n\r\n    map(json: any): Responses.IViewContentTypeElementResponse {\r\n        return this.queryService.mappingService.viewContentTypeElementResponse(json);\r\n    }\r\n}\r\n", "/**\r\n* Represents codename of Kontent.ai element types\r\n*/\r\nexport enum ElementType {\r\n    Text = 'text',\r\n    Number = 'number',\r\n    ModularContent = 'modular_content',\r\n    Asset = 'asset',\r\n    DateTime = 'date_time',\r\n    RichText = 'rich_text',\r\n    MultipleChoice = 'multiple_choice',\r\n    UrlSlug = 'url_slug',\r\n    Taxonomy = 'taxonomy',\r\n    Custom = 'custom',\r\n    Unknown = 'unknown'\r\n}\r\n", "import { ElementType, Elements } from '../../elements';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    continuationTokenHeaderName,\r\n    IGroupedNetworkResponse,\r\n    IKontentListAllResponse,\r\n    IKontentListResponse,\r\n    IDeliveryNetworkResponse,\r\n    IListAllQueryConfig,\r\n    IQueryConfig,\r\n    IContentItem\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from './base-query.class';\r\n\r\nexport abstract class BaseListingQuery<\r\n    TResponse extends IKontentListResponse,\r\n    TAllResponse extends IKontentListAllResponse,\r\n    TQueryConfig extends IQueryConfig,\r\n    TContract\r\n> extends BaseQuery<TResponse, TQueryConfig, TContract> {\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Sets continuation token header\r\n     */\r\n    withContinuationToken(token: string): this {\r\n        // remove previous continuation token if there is any\r\n        let queryHeaders = this._queryConfig.customHeaders ?? [];\r\n        queryHeaders = queryHeaders.filter((m) => m.header !== continuationTokenHeaderName);\r\n\r\n        this._queryConfig.customHeaders = queryHeaders;\r\n\r\n        this.withHeaders([\r\n            {\r\n                header: continuationTokenHeaderName,\r\n                value: token\r\n            }\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Query to get all items. Uses paging data and may execute multiple HTTP requests depending on number of items\r\n     */\r\n    toAllPromise(\r\n        queryAllConfig?: IListAllQueryConfig<TResponse, TContract>\r\n    ): Promise<IGroupedNetworkResponse<TAllResponse>> {\r\n        return this.queryService.getListAllResponse<TResponse, TAllResponse, TContract>({\r\n            page: 1,\r\n            listQueryConfig: queryAllConfig,\r\n            allResponseFactory: (items, responses) => {\r\n                const response = this.allResponseFactory(items, responses);\r\n\r\n                return {\r\n                    data: response,\r\n                    responses: responses\r\n                };\r\n            },\r\n            getResponse: (nextPageUrl, continuationToken) => {\r\n                if (nextPageUrl) {\r\n                    this.withCustomUrl(nextPageUrl);\r\n                }\r\n                if (continuationToken) {\r\n                    this.withContinuationToken(continuationToken);\r\n                }\r\n\r\n                return this.toPromise();\r\n            }\r\n        });\r\n    }\r\n\r\n    protected abstract allResponseFactory(\r\n        items: IContentItem[],\r\n        responses: IDeliveryNetworkResponse<TResponse, TContract>[]\r\n    ): TAllResponse;\r\n\r\n    protected linkItemsInRte(allContentItems: IContentItem[]): void {\r\n        for (const item of allContentItems) {\r\n            for (const elementKey of Object.keys(item.elements)) {\r\n                const element = item.elements[elementKey];\r\n\r\n                if (element.type === ElementType.ModularContent) {\r\n                    const linkedItemElement = element as Elements.LinkedItemsElement;\r\n\r\n                    // We create separate array for ordered items because the 'linkedItems' from response might be incomplete\r\n                    // e.g. If 4 items are linked, only 2 might be available in the response. Rest needs to be mapped from all available items\r\n                    const orderedLinkedItems: IContentItem[] = [];\r\n\r\n                    for (const linkedItemCodename of linkedItemElement.value) {\r\n                        let linkedItem: IContentItem | undefined;\r\n\r\n                        const linkedItemInElement = linkedItemElement.linkedItems.find(\r\n                            (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                        );\r\n                        if (linkedItemInElement) {\r\n                            linkedItem = linkedItemInElement;\r\n                        } else {\r\n                            linkedItem = allContentItems.find(\r\n                                (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                            );\r\n                        }\r\n\r\n                        if (linkedItem) {\r\n                            orderedLinkedItems.push(linkedItem);\r\n                        }\r\n                    }\r\n\r\n                    // Replace linked items with the ordered one\r\n                    linkedItemElement.linkedItems = orderedLinkedItems;\r\n                }\r\n\r\n                if (element.type === ElementType.RichText) {\r\n                    const orderedLinkedItems: IContentItem[] = [];\r\n\r\n                    const richTextElement = element as Elements.RichTextElement;\r\n\r\n                    for (const linkedItemCodename of richTextElement.linkedItemCodenames) {\r\n                        let linkedItem: IContentItem | undefined;\r\n\r\n                        const linkedItemInElement = richTextElement.linkedItems.find(\r\n                            (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                        );\r\n                        if (linkedItemInElement) {\r\n                            linkedItem = linkedItemInElement;\r\n                        } else {\r\n                            linkedItem = allContentItems.find(\r\n                                (m) => m.system.codename.toLowerCase() === linkedItemCodename.toLowerCase()\r\n                            );\r\n                        }\r\n\r\n                        if (linkedItem) {\r\n                            orderedLinkedItems.push(linkedItem);\r\n                        }\r\n                    }\r\n\r\n                    richTextElement.linkedItems = orderedLinkedItems;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    Filters,\r\n    IKontentListAllResponse,\r\n    IKontentListResponse,\r\n    IQueryConfig,\r\n    Parameters,\r\n    SortOrder\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from './base-listing-query.class';\r\n\r\nexport abstract class BaseItemListingQuery<\r\n    TResponse extends IKontentListResponse,\r\n    TAllResponse extends IKontentListAllResponse,\r\n    TQueryConfig extends IQueryConfig,\r\n    TContract\r\n> extends BaseListingQuery<TResponse, TAllResponse, TQueryConfig, TContract> {\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Empty filter condition\r\n     * @param element Element with empty value\r\n     */\r\n    emptyFilter(element: string): this {\r\n        this.parameters.push(new Filters.EmptyFilter(element));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not empty filter condition\r\n     * @param element Element with non-empty value\r\n     */\r\n    notEmptyFilter(element: string): this {\r\n        this.parameters.push(new Filters.NotEmptyFilter(element));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Equals filter condition\r\n     * @param element Element to filter. Example: 'elements.movie'\r\n     * @param value Value to match. Example: 'Kingsman'\r\n     */\r\n    equalsFilter(element: string, value: string): this {\r\n        this.parameters.push(new Filters.EqualsFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not equals filter condition\r\n     * @param element Element to filter. Example: 'elements.movie'\r\n     * @param value Value to match. Example: 'Kingsman'\r\n     */\r\n    notEqualsFilter(element: string, value: string): this {\r\n        this.parameters.push(new Filters.NotEqualsFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * All filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    allFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.AllFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Any filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    anyFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.AnyFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Contains filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    containsFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.ContainsFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Greater then filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    greaterThanFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.GreaterThanFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Greater then or equals filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    greaterThanOrEqualFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.GreaterThanOrEqualFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * In filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    inFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.InFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not in filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    notInFilter(element: string, values: string[]): this {\r\n        this.parameters.push(new Filters.NotInFilter(element, values));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Less then filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    lessThanFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.LessThanFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    lessThanOrEqualFilter(element: string, value: string | number): this {\r\n        this.parameters.push(new Filters.LessThanOrEqualFilter(element, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param element Element to filter.\r\n     * @param lowerValue Lower value of range (e.g. 2)\r\n     * @param higherValue Higher value of range (e.g. 10)\r\n     */\r\n    rangeFilter(element: string, lowerValue: number | string, higherValue: number | string): this {\r\n        this.parameters.push(new Filters.RangeFilter(element, lowerValue, higherValue));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Limits the number of items returned by query\r\n     * @param limit Number of items to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Orders query based on given element and sort order\r\n     * @param element Element by which to order\r\n     * @param sortOrder Asc/Desc order type\r\n     */\r\n    orderParameter(element: string, sortOrder: SortOrder): this {\r\n        this.parameters.push(new Parameters.OrderParameter(element, sortOrder));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets descending order on given element\r\n     * @param element Element by which to order\r\n     */\r\n    orderByDescending(element: string): this {\r\n        this.parameters.push(new Parameters.OrderParameter(element, 'desc'));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets Ascending order on given element\r\n     * @param element Element by which to order\r\n     */\r\n    orderByAscending(element: string): this {\r\n        this.parameters.push(new Parameters.OrderParameter(element, 'asc'));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of items\r\n     * @param skip Number of items to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { Filters, IContentItem, IItemQueryConfig, IDeliveryNetworkResponse, Responses, Parameters } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseItemListingQuery } from '../common/base-item-listing-query.class';\r\n\r\nexport class MultipleItemsQuery<TContentItem extends IContentItem = IContentItem> extends BaseItemListingQuery<\r\n    Responses.IListContentItemsResponse<TContentItem>,\r\n    Responses.IListContentItemsAllResponse<TContentItem>,\r\n    IItemQueryConfig,\r\n    Contracts.IListContentItemsContract\r\n> {\r\n    protected _queryConfig: IItemQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Adds information about the total number of content items matching your query.\r\n     * When set to true, the pagination object returned in the API response contains\r\n     * an additional total_count property.\r\n     */\r\n    includeTotalCountParameter(): this {\r\n        this.parameters.push(new Parameters.IncludeTotalCountParameter());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: string): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items of given types (logical or)\r\n     * I.e. get items of either 'Actor' or 'Movie' type\r\n     * @param types Types to get\r\n     */\r\n    types(types: string[]): this {\r\n        this.parameters.push(new Filters.TypeFilter(types));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: string): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items from given collections (logical or)\r\n     * I.e. get items of either 'default' or 'christmas-campaign' collection\r\n     * @param collections Collections to get\r\n     */\r\n    collections(collections: string[]): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collections));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Indicates depth of query that affects loading of nested linked items.\r\n     * @param depth Depth of the query (> 0)\r\n     */\r\n    depthParameter(depth: number): this {\r\n        this.parameters.push(new Parameters.DepthParameter(depth));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: string): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: string[]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: string[]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IListContentItemsResponse<TContentItem>, Contracts.IListContentItemsContract>\r\n    > {\r\n        return this.queryService.getMultipleItems(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/items';\r\n\r\n        // handle default language\r\n        this.processDefaultLanguageParameter();\r\n\r\n        // handle archived items\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IListContentItemsResponse<TContentItem> {\r\n        return this.queryService.mappingService.listContentItemsResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: any[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListContentItemsResponse<TContentItem>,\r\n            Contracts.IListContentItemsContract\r\n        >[]\r\n    ): Responses.IListContentItemsAllResponse<TContentItem> {\r\n        this.linkItems(items, responses);\r\n\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n\r\n    private linkItems(\r\n        items: IContentItem[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListContentItemsResponse<TContentItem>,\r\n            Contracts.IListContentItemsContract\r\n        >[]\r\n    ): void {\r\n        // prepare all available items (including components) for linking\r\n        const allContentItems: IContentItem[] = [];\r\n\r\n        // process linked items (modular_content part of the response)\r\n        for (const response of responses) {\r\n            allContentItems.push(...Object.values(response.data.linkedItems));\r\n        }\r\n\r\n        // add standard items\r\n        for (const item of items) {\r\n            if (!allContentItems.find((m) => m.system.codename.toLowerCase() === item.system.codename.toLowerCase())) {\r\n                allContentItems.push(item);\r\n            }\r\n        }\r\n        // process main items\r\n        this.linkItemsInRte(allContentItems);\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { IContentItem, IItemQueryConfig, IDeliveryNetworkResponse, Responses, Parameters } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class SingleItemQuery<TContentItem extends IContentItem = IContentItem> extends BaseQuery<\r\n    Responses.IViewContentItemResponse<TContentItem>,\r\n    IItemQueryConfig,\r\n    Contracts.IViewContentItemContract\r\n> {\r\n    protected _queryConfig: IItemQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService,\r\n        private codename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!codename) {\r\n            throw Error(`'codename' has to be configured for 'SingleItemQuery' query`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates depth of query that affects loading of nested linked items.\r\n     * @param depth Depth of the query (> 0)\r\n     */\r\n    depthParameter(depth: number): this {\r\n        this.parameters.push(new Parameters.DepthParameter(depth));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: string): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: string[]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: string[]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IViewContentItemResponse<TContentItem>, Contracts.IViewContentItemContract>\r\n    > {\r\n        return this.queryService.getSingleItemAsync(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/items/' + this.codename;\r\n\r\n        // add default language is necessry\r\n        this.processDefaultLanguageParameter();\r\n\r\n        //process client level archived item exclusion\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IViewContentItemResponse<TContentItem> {\r\n        return this.queryService.mappingService.viewContentItemResponse(json);\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    IDeliveryNetworkResponse,\r\n    ITaxonomyQueryConfig,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class TaxonomiesQuery extends BaseListingQuery<\r\n    Responses.IListTaxonomiesResponse,\r\n    Responses.IListTaxonomiesAllResponse,\r\n    ITaxonomyQueryConfig,\r\n    Contracts.IListTaxonomyGroupsContract\r\n> {\r\n    /**\r\n     * Taxonomies endpoint URL action\r\n     */\r\n    protected readonly taxonomiesEndpoint: string = 'taxonomies';\r\n\r\n    protected _queryConfig: ITaxonomyQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Limits the number of taxonomies returned by query\r\n     * @param limit Number of taxonomies to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of taxonomies\r\n     * @param skip Number of taxonomies to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<\r\n            Responses.IListTaxonomiesResponse,\r\n            Contracts.IListTaxonomyGroupsContract\r\n        >\r\n    > {\r\n        return this.queryService.getTaxonomies(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.taxonomiesEndpoint;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IListTaxonomiesResponse {\r\n        return this.queryService.mappingService.listTaxonomiesResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: any[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListTaxonomiesResponse,\r\n            Contracts.IListTaxonomyGroupsContract\r\n        >[]\r\n    ): Responses.IListTaxonomiesAllResponse {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { IDeliveryNetworkResponse, ITaxonomyQueryConfig, Responses } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class TaxonomyQuery extends BaseQuery<\r\n    Responses.IViewTaxonomyResponse,\r\n    ITaxonomyQueryConfig,\r\n    Contracts.IViewTaxonomyGroupContract\r\n> {\r\n    /**\r\n     * Taxonomies endpoint URL action\r\n     */\r\n    protected readonly taxonomiesEndpoint: string = 'taxonomies';\r\n\r\n    protected _queryConfig: ITaxonomyQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService,\r\n        private taxonomyCodename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!taxonomyCodename) {\r\n            throw Error(`Cannot create taxonomy query without codename of the taxonomy`);\r\n        }\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IViewTaxonomyResponse, Contracts.IViewTaxonomyGroupContract>\r\n    > {\r\n        return this.queryService.getTaxonomy(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.taxonomiesEndpoint + '/' + this.taxonomyCodename;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IViewTaxonomyResponse {\r\n        return this.queryService.mappingService.viewTaxonomyResponse(json);\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { IContentTypeQueryConfig, IDeliveryNetworkResponse, Parameters, Responses } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class MultipleTypeQuery extends BaseListingQuery<\r\n    Responses.IListContentTypesResponse,\r\n    Responses.IListContentTypesAllResponse,\r\n    IContentTypeQueryConfig,\r\n    Contracts.IListContentTypeContract\r\n> {\r\n    protected _queryConfig: IContentTypeQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: string[]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: string[]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Limits the number of taxonomies returned by query\r\n     * @param limit Number of taxonomies to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of taxonomies\r\n     * @param skip Number of taxonomies to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IListContentTypesResponse, Contracts.IListContentTypeContract>\r\n    > {\r\n        return this.queryService.getMultipleTypes(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/types';\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IListContentTypesResponse {\r\n        return this.queryService.mappingService.listContentTypesResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: any[],\r\n        responses: IDeliveryNetworkResponse<Responses.IListContentTypesResponse, Contracts.IListContentTypeContract>[]\r\n    ): Responses.IListContentTypesAllResponse {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { IContentTypeQueryConfig, IDeliveryNetworkResponse, Responses } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class SingleTypeQuery extends BaseQuery<\r\n    Responses.IViewContentTypeResponse,\r\n    IContentTypeQueryConfig,\r\n    Contracts.IViewContentTypeContract\r\n> {\r\n    protected _queryConfig: IContentTypeQueryConfig = {};\r\n\r\n    constructor(\r\n        protected config: IDeliveryClientConfig,\r\n        protected queryService: QueryService,\r\n        private typeCodename: string\r\n    ) {\r\n        super(config, queryService);\r\n\r\n        if (!typeCodename) {\r\n            throw Error(`Cannot create type query without the codename of the type`);\r\n        }\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IViewContentTypeResponse, Contracts.IViewContentTypeContract>\r\n    > {\r\n        return this.queryService.getSingleType(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/types/' + this.typeCodename;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    map(json: any): Responses.IViewContentTypeResponse {\r\n        return this.queryService.mappingService.viewContentTypeResponse(json);\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    Filters,\r\n    IContentItem,\r\n    IDeliveryNetworkResponse,\r\n    Parameters,\r\n    Responses,\r\n    IItemFeedQueryConfig\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseItemListingQuery } from '../common/base-item-listing-query.class';\r\n\r\nexport class ItemsFeedQuery<TContentItem extends IContentItem = IContentItem> extends BaseItemListingQuery<\r\n    Responses.IListItemsFeedResponse<TContentItem>,\r\n    Responses.IListItemsFeedAllResponse<TContentItem>,\r\n    IItemFeedQueryConfig,\r\n    Contracts.IItemsFeedContract\r\n> {\r\n    protected _queryConfig: IItemFeedQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: string): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items of given types (logical or)\r\n     * I.e. get items of either 'Actor' or 'Movie' type\r\n     * @param types Types to get\r\n     */\r\n    types(types: string[]): this {\r\n        this.parameters.push(new Filters.TypeFilter(types));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: string): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets items from given collections (logical or)\r\n     * I.e. get items of either 'default' or 'christmas-campaign' collection\r\n     * @param collections Collections to get\r\n     */\r\n    collections(collections: string[]): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collections));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: string): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to limit the number of elements returned by query.\r\n     * @param elementCodenames Array of element codenames to fetch\r\n     */\r\n    elementsParameter(elementCodenames: string[]): this {\r\n        this.parameters.push(new Parameters.ElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used to exclude elements returned by query.\r\n     * @param elementCodenames Array of element codenames to exclude\r\n     */\r\n    excludeElementsParameter(elementCodenames: string[]): this {\r\n        this.parameters.push(new Parameters.ExcludeElementsParameter(elementCodenames));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IListItemsFeedResponse<TContentItem>, Contracts.IItemsFeedContract>\r\n    > {\r\n        return this.queryService.getItemsFeed(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/items-feed';\r\n\r\n        // add default language is necessary\r\n        this.processDefaultLanguageParameter();\r\n\r\n        //process client level archived item exclusion\r\n        this.processExcludeArchivedItemsParameter();\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemFeedQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IListItemsFeedResponse<TContentItem> {\r\n        return this.queryService.mappingService.itemsFeedResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: TContentItem[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListItemsFeedResponse<TContentItem>,\r\n            Contracts.IItemsFeedContract\r\n        >[]\r\n    ): Responses.IListItemsFeedAllResponse<TContentItem> {\r\n        if (this.canLinkItems()) {\r\n            this.linkFeedItems(items, responses);\r\n        }\r\n\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n\r\n    private linkFeedItems(\r\n        items: TContentItem[],\r\n        responses: IDeliveryNetworkResponse<\r\n            Responses.IListItemsFeedResponse<TContentItem>,\r\n            Contracts.IItemsFeedContract\r\n        >[]\r\n    ): void {\r\n        // prepare all available items (including components) for linking\r\n        const allAvailableContentItems: IContentItem[] = [];\r\n\r\n        // process linked items (modular_content part of the response)\r\n        for (const response of responses) {\r\n            allAvailableContentItems.push(...Object.values(response.data.linkedItems));\r\n        }\r\n\r\n        // add standard items\r\n        for (const item of items) {\r\n            if (\r\n                !allAvailableContentItems.find(\r\n                    (m) => m.system.codename.toLowerCase() === item.system.codename.toLowerCase()\r\n                )\r\n            ) {\r\n                allAvailableContentItems.push(item);\r\n            }\r\n        }\r\n        // process main items\r\n        this.linkItemsInRte(allAvailableContentItems);\r\n    }\r\n\r\n    private canLinkItems(): boolean {\r\n        if (this.config.linkedItemsReferenceHandler === 'ignore') {\r\n            return false;\r\n        }\r\n\r\n        if (this._queryConfig.disableItemLinking === true) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    IDeliveryNetworkResponse,\r\n    ILanguagesQueryConfig,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class LanguagesQuery extends BaseListingQuery<\r\n    Responses.IListLanguagesResponse,\r\n    Responses.IListLanguagesAllResponse,\r\n    ILanguagesQueryConfig,\r\n    Contracts.IListLanguagesContract\r\n> {\r\n    /**\r\n     * Endpoint\r\n     */\r\n    protected readonly endpoint: string = 'languages';\r\n\r\n    protected _queryConfig: ILanguagesQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Limits the number of taxonomies returned by query\r\n     * @param limit Number of taxonomies to load\r\n     */\r\n    limitParameter(limit: number): this {\r\n        this.parameters.push(new Parameters.LimitParameter(limit));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the selected number of taxonomies\r\n     * @param skip Number of taxonomies to skip\r\n     */\r\n    skipParameter(skip: number): this {\r\n        this.parameters.push(new Parameters.SkipParameter(skip));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IListLanguagesResponse, Contracts.IListLanguagesContract>\r\n    > {\r\n        return this.queryService.getLanguages(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.endpoint;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: ILanguagesQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IListLanguagesResponse {\r\n        return this.queryService.mappingService.listLanguagesResponse(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: any[],\r\n        responses: IDeliveryNetworkResponse<Responses.IListLanguagesResponse, Contracts.IListLanguagesContract>[]\r\n    ): Responses.IListLanguagesAllResponse {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport {\r\n    Filters,\r\n    IDeliveryNetworkResponse,\r\n    ILanguagesQueryConfig,\r\n    ISyncInitQueryConfig,\r\n    Parameters,\r\n    Responses\r\n} from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseQuery } from '../common/base-query.class';\r\n\r\nexport class InitializeSyncQuery extends BaseQuery<\r\n    Responses.IInitializeSyncResponse,\r\n    ISyncInitQueryConfig,\r\n    Contracts.IInitializeSyncContract\r\n> {\r\n    protected readonly endpoint: string = 'sync/init';\r\n\r\n    protected _queryConfig: ILanguagesQueryConfig = {};\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    type(type: string): this {\r\n        this.parameters.push(new Filters.TypeFilter(type));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    collection(collection: string): this {\r\n        this.parameters.push(new Filters.CollectionFilter(collection));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Language codename\r\n     * @param languageCodename Codename of the language\r\n     */\r\n    languageParameter(languageCodename: string): this {\r\n        this.parameters.push(new Parameters.LanguageParameter(languageCodename));\r\n        return this;\r\n    }\r\n\r\n    toPromise(): Promise<\r\n        IDeliveryNetworkResponse<Responses.IInitializeSyncResponse, Contracts.IInitializeSyncContract>\r\n    > {\r\n        return this.queryService.initializeSync(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        const action = '/' + this.endpoint;\r\n\r\n        return super.resolveUrlInternal(action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: ISyncInitQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.IInitializeSyncResponse {\r\n        return this.queryService.mappingService.initializeContentSync(json);\r\n    }\r\n}\r\n", "import { Contracts } from '../../contracts';\r\nimport { IDeliveryClientConfig } from '../../config';\r\nimport { IItemQueryConfig, IDeliveryNetworkResponse, Responses } from '../../models';\r\nimport { QueryService } from '../../services';\r\nimport { BaseListingQuery } from '../common/base-listing-query.class';\r\n\r\nexport class SyncChangesQuery extends BaseListingQuery<\r\n    Responses.ISyncChangesResponse,\r\n    Responses.ISyncChangesAllResponse,\r\n    IItemQueryConfig,\r\n    Contracts.ISyncChangesContract\r\n> {\r\n    protected _queryConfig: IItemQueryConfig = {};\r\n\r\n    private readonly action: string = '/sync';\r\n\r\n    constructor(protected config: IDeliveryClientConfig, protected queryService: QueryService) {\r\n        super(config, queryService);\r\n    }\r\n\r\n    toPromise(): Promise<IDeliveryNetworkResponse<Responses.ISyncChangesResponse, Contracts.ISyncChangesContract>> {\r\n        return this.queryService.syncChanges(this.getUrl(), this._queryConfig ?? {});\r\n    }\r\n\r\n    getUrl(): string {\r\n        return super.resolveUrlInternal(this.action);\r\n    }\r\n\r\n    /**\r\n     * Used to configure query\r\n     * @param queryConfig Query configuration\r\n     */\r\n    queryConfig(queryConfig: IItemQueryConfig): this {\r\n        this._queryConfig = queryConfig;\r\n        return this;\r\n    }\r\n\r\n    map(json: any): Responses.ISyncChangesResponse {\r\n        return this.queryService.mappingService.syncChanges(json);\r\n    }\r\n\r\n    protected allResponseFactory(\r\n        items: any[],\r\n        responses: IDeliveryNetworkResponse<Responses.ISyncChangesResponse, Contracts.ISyncChangesContract>[]\r\n    ): Responses.ISyncChangesAllResponse {\r\n        return {\r\n            items: items,\r\n            responses: responses\r\n        };\r\n    }\r\n}\r\n", "\nimport { ISDKInfo } from '@kontent-ai/core-sdk';\nexport const sdkInfo: ISDKInfo = {\n    host: 'npmjs.com',\n    version: '14.11.0',\n    name: '@kontent-ai/delivery-sdk'\n};\n", "import { IResponse, IHeader, IHttpService, IQueryParameter, urlHelper } from '@kontent-ai/core-sdk';\r\nimport { AxiosError } from 'axios';\r\nimport {\r\n    waitForLoadingNewContentHeader,\r\n    IQueryConfig,\r\n    ISDKInfo,\r\n    IDeliveryErrorRaw,\r\n    DeliveryError,\r\n    sdkVersionHeader,\r\n    staleContentHeaderName,\r\n    continuationTokenHeaderName,\r\n    IDeliveryNetworkResponse\r\n} from '../models';\r\n\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { IMappingService } from './mapping.service';\r\n\r\nexport abstract class BaseDeliveryQueryService {\r\n    /**\r\n     * Default base Url to Kontent.ai Delivery API\r\n     */\r\n    private readonly defaultBaseDeliveryApiUrl: string = 'https://deliver.kontent.ai';\r\n\r\n    /**\r\n     * Default preview url to Kontent.ai Delivery API\r\n     */\r\n    private readonly defaultPreviewDeliveryApiUrl: string = 'https://preview-deliver.kontent.ai';\r\n\r\n    constructor(\r\n        /**\r\n         * Delivery client configuration\r\n         */\r\n        public readonly config: IDeliveryClientConfig,\r\n        /**\r\n         * Http service for fetching data\r\n         */\r\n        public readonly httpService: IHttpService<any>,\r\n        /**\r\n         * Information about the SDK\r\n         */\r\n        public readonly sdkInfo: ISDKInfo,\r\n        /**\r\n         * Mapping service\r\n         */\r\n        public readonly mappingService: IMappingService\r\n    ) {}\r\n\r\n    /**\r\n     * Gets url based on the action, query configuration and options (parameters)\r\n     * @param action Action (= url part) that will be hit\r\n     * @param queryConfig Query configuration\r\n     * @param options Query options\r\n     */\r\n    getUrl(action: string, queryConfig: IQueryConfig, options?: IQueryParameter[]): string {\r\n        if (!this.config.proxy || !this.config.proxy.advancedProxyUrlResolver) {\r\n            return urlHelper.addOptionsToUrl(this.getBaseUrl(queryConfig) + action, options);\r\n        }\r\n        return this.config.proxy.advancedProxyUrlResolver({\r\n            queryParameters: options ? options : [],\r\n            queryString: urlHelper.addOptionsToUrl('', options),\r\n            action: action,\r\n            domain: this.getDomain(queryConfig),\r\n            queryConfig: queryConfig,\r\n            environmentId: this.config.environmentId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets proper set of headers for given request.\r\n     * @param queryConfig Query configuration\r\n     * @param additionalHeaders Custom headers\r\n     */\r\n    getHeaders(queryConfig: IQueryConfig, additionalHeaders?: IHeader[]): IHeader[] {\r\n        const headers: IHeader[] = [];\r\n\r\n        if (additionalHeaders) {\r\n            headers.push(...additionalHeaders);\r\n        }\r\n\r\n        // add SDK Id header for monitoring SDK usage\r\n        headers.push(this.getSdkIdHeader());\r\n\r\n        // add headers from global config\r\n        if (this.config.globalHeaders) {\r\n            headers.push(...this.config.globalHeaders(queryConfig));\r\n        }\r\n\r\n        // add query / global headers from query config\r\n        headers.push(...this.getQueryHeaders(queryConfig));\r\n\r\n        if (this.isPreviewModeEnabled(queryConfig) && this.isSecuredModeEnabled(queryConfig)) {\r\n            throw Error(`Preview & secured modes cannot be used at the same time.`);\r\n        }\r\n\r\n        // add preview header is required\r\n        if (this.isPreviewModeEnabled(queryConfig) && this.config.previewApiKey) {\r\n            headers.push(this.getAuthorizationHeader(this.config.previewApiKey));\r\n        }\r\n\r\n        // add secured mode header is required\r\n        if (this.isSecuredModeEnabled(queryConfig) && this.config.secureApiKey) {\r\n            headers.push(this.getAuthorizationHeader(this.config.secureApiKey));\r\n        }\r\n\r\n        // add 'X-KC-Wait-For-Loading-New-Content' header if required\r\n        if (this.shouldAddWaitForLoadingNewContentHeader(queryConfig)) {\r\n            headers.push({\r\n                header: waitForLoadingNewContentHeader,\r\n                value: 'true'\r\n            });\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Http POST response\r\n     * @param url Url of request\r\n     * @param queryConfig Query config configuration\r\n     */\r\n    protected async postResponseAsync<TRawData>(\r\n        url: string,\r\n        body: any,\r\n        queryConfig?: IQueryConfig,\r\n        serviceConfig?: {\r\n            headers?: IHeader[];\r\n        }\r\n    ): Promise<IResponse<TRawData>> {\r\n        if (!queryConfig) {\r\n            queryConfig = {};\r\n        }\r\n\r\n        if (!serviceConfig) {\r\n            serviceConfig = {};\r\n        }\r\n\r\n        try {\r\n            return await this.httpService.postAsync<TRawData>(\r\n                {\r\n                    url: url,\r\n                    body: body\r\n                },\r\n                {\r\n                    cancelToken: queryConfig?.cancelToken,\r\n                    responseType: 'json',\r\n                    retryStrategy: this.config.retryStrategy,\r\n                    headers: this.getHeaders(queryConfig, serviceConfig.headers ? serviceConfig.headers : [])\r\n                }\r\n            );\r\n        } catch (error) {\r\n            throw this.mapDeliveryError(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Http GET response\r\n     * @param url Url of request\r\n     * @param queryConfig Query config configuration\r\n     */\r\n    protected async getResponseAsync<TRawData>(\r\n        url: string,\r\n        queryConfig?: IQueryConfig,\r\n        serviceConfig?: {\r\n            headers?: IHeader[];\r\n        }\r\n    ): Promise<IResponse<TRawData>> {\r\n        if (!queryConfig) {\r\n            queryConfig = {};\r\n        }\r\n\r\n        if (!serviceConfig) {\r\n            serviceConfig = {};\r\n        }\r\n\r\n        try {\r\n            return await this.httpService.getAsync<TRawData>(\r\n                {\r\n                    url: url\r\n                },\r\n                {\r\n                    cancelToken: queryConfig?.cancelToken,\r\n                    responseType: 'json',\r\n                    retryStrategy: this.config.retryStrategy,\r\n                    headers: this.getHeaders(queryConfig, serviceConfig.headers ? serviceConfig.headers : [])\r\n                }\r\n            );\r\n        } catch (error) {\r\n            throw this.mapDeliveryError(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets base URL of the request including the environment Id\r\n     * @param queryConfig Query configuration\r\n     */\r\n    protected getBaseUrl(queryConfig: IQueryConfig): string {\r\n        return this.getDomain(queryConfig) + '/' + this.config.environmentId;\r\n    }\r\n\r\n    protected mapNetworkResponse<TData, TContract>(\r\n        data: TData,\r\n        response: IResponse<any>\r\n    ): IDeliveryNetworkResponse<TData, TContract> {\r\n        return {\r\n            data: data,\r\n            response: response,\r\n            hasStaleContent: this.getHasStaleContent(response.headers),\r\n            xContinuationToken: this.getContinuationToken(response.headers)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Indicates if current query should use preview mode\r\n     * @param queryConfig Query configuration\r\n     */\r\n    private isPreviewModeEnabled(queryConfig: IQueryConfig): boolean {\r\n        if (queryConfig.usePreviewMode !== undefined) {\r\n            return queryConfig.usePreviewMode;\r\n        }\r\n\r\n        if (!this.config.defaultQueryConfig) {\r\n            return false;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig.usePreviewMode === true) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getQueryHeaders(queryConfig: IQueryConfig): IHeader[] {\r\n        if (queryConfig.customHeaders) {\r\n            return queryConfig.customHeaders;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig?.customHeaders) {\r\n            return this.config.defaultQueryConfig.customHeaders;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    private shouldAddWaitForLoadingNewContentHeader(queryConfig: IQueryConfig): boolean {\r\n        if (queryConfig.waitForLoadingNewContent !== undefined) {\r\n            return queryConfig.waitForLoadingNewContent;\r\n        }\r\n\r\n        if (!this.config.defaultQueryConfig) {\r\n            return false;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig.waitForLoadingNewContent === true) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Indicates if current query should use secured mode\r\n     * @param queryConfig Query configuration\r\n     */\r\n    private isSecuredModeEnabled(queryConfig: IQueryConfig): boolean {\r\n        if (queryConfig.useSecuredMode !== undefined) {\r\n            return queryConfig.useSecuredMode;\r\n        }\r\n\r\n        if (!this.config.defaultQueryConfig) {\r\n            return false;\r\n        }\r\n\r\n        if (this.config.defaultQueryConfig.useSecuredMode === true) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets preview or standard URL based on client and query configuration\r\n     * @param queryConfig Query configuration\r\n     */\r\n    private getDomain(queryConfig: IQueryConfig): string {\r\n        if (this.isPreviewModeEnabled(queryConfig)) {\r\n            if (!this.config.previewApiKey) {\r\n                throw Error(`Preview API key is not configured.`);\r\n            }\r\n\r\n            // check custom preview url\r\n            if (this.config.proxy && this.config.proxy.basePreviewUrl) {\r\n                return this.config.proxy.basePreviewUrl;\r\n            }\r\n\r\n            // use default preview url\r\n            return this.defaultPreviewDeliveryApiUrl;\r\n        }\r\n\r\n        // check custom base url\r\n        if (this.config.proxy && this.config.proxy.baseUrl) {\r\n            return this.config.proxy.baseUrl;\r\n        }\r\n        return this.defaultBaseDeliveryApiUrl;\r\n    }\r\n\r\n    /**\r\n     * Gets authorization header. This is used for 'preview' functionality\r\n     */\r\n    private getAuthorizationHeader(key?: string): IHeader {\r\n        if (!key) {\r\n            throw Error(`Cannot get authorization header because key is invalid`);\r\n        }\r\n        // authorization header required for preview mode\r\n        return {\r\n            header: 'authorization',\r\n            value: `bearer ${key}`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Header identifying SDK type & version for internal purposes of Kontent.ai\r\n     */\r\n    private getSdkIdHeader(): IHeader {\r\n        return {\r\n            header: sdkVersionHeader,\r\n            value: `${this.sdkInfo.host};${this.sdkInfo.name};${this.sdkInfo.version}`\r\n        };\r\n    }\r\n\r\n    private mapDeliveryError(error: any): any {\r\n        let axiosError: AxiosError | undefined;\r\n\r\n        if (error.error) {\r\n            axiosError = error.error;\r\n        } else {\r\n            axiosError = error;\r\n        }\r\n\r\n        if (!axiosError || !axiosError.isAxiosError) {\r\n            return error;\r\n        }\r\n\r\n        const deliveryErrorData = axiosError.response?.data as IDeliveryErrorRaw;\r\n\r\n        if (!deliveryErrorData || !deliveryErrorData.error_code) {\r\n            return error;\r\n        }\r\n\r\n        return new DeliveryError({\r\n            errorCode: deliveryErrorData.error_code,\r\n            message: deliveryErrorData.message,\r\n            specificCode: deliveryErrorData.specific_code,\r\n            requestId: deliveryErrorData.request_id\r\n        });\r\n    }\r\n\r\n    private getHasStaleContent(headers: IHeader[]): boolean {\r\n        const hasStaleContentHeader = headers.find(\r\n            (m) => m.header.toLowerCase() === staleContentHeaderName.toLowerCase()\r\n        );\r\n\r\n        if (hasStaleContentHeader) {\r\n            if (hasStaleContentHeader.value.toString() === '1') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getContinuationToken(headers: IHeader[]): string | undefined {\r\n        const header = headers.find((m) => m.header.toLowerCase() === continuationTokenHeaderName.toLowerCase());\r\n        return header ? header.value : undefined;\r\n    }\r\n}\r\n", "import { IHttpService } from '@kontent-ai/core-sdk';\r\n\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport {\r\n    Responses,\r\n    IContentItem,\r\n    IContentTypeQueryConfig,\r\n    IGroupedNetworkResponse,\r\n    IItemQueryConfig,\r\n    IDeliveryNetworkResponse,\r\n    ILanguagesQueryConfig,\r\n    ITaxonomyQueryConfig,\r\n    ISyncInitQueryConfig\r\n} from '../models';\r\nimport {\r\n    IKontentListAllResponse,\r\n    IKontentListResponse,\r\n    IListAllQueryConfig,\r\n    ISDKInfo\r\n} from '../models/common/common-models';\r\nimport { BaseDeliveryQueryService } from './base-delivery-query.service';\r\nimport { IMappingService } from './mapping.service';\r\n\r\nexport class QueryService extends BaseDeliveryQueryService {\r\n    constructor(\r\n        config: IDeliveryClientConfig,\r\n        httpService: IHttpService<any>,\r\n        sdkInfo: ISDKInfo,\r\n        mappingService: IMappingService\r\n    ) {\r\n        super(config, httpService, sdkInfo, mappingService);\r\n    }\r\n\r\n    /**\r\n     * Gets single item from given url\r\n     * @param url Url used to get single item\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getSingleItemAsync<TContentItem extends IContentItem = IContentItem>(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<Responses.IViewContentItemResponse<TContentItem>, Contracts.IViewContentItemContract>\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IViewContentItemContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse<\r\n            Responses.IViewContentItemResponse<TContentItem>,\r\n            Contracts.IViewContentItemContract\r\n        >(this.mappingService.viewContentItemResponse<TContentItem>(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single feed response. Might not contain all items in your environment.\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getItemsFeed<TContentItem extends IContentItem = IContentItem>(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IListItemsFeedResponse<TContentItem>, Contracts.IItemsFeedContract>> {\r\n        const response = await this.getResponseAsync<Contracts.IItemsFeedContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.itemsFeedResponse<TContentItem>(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets multiple items from given url\r\n     * @param url Url used to get multiple items\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getMultipleItems<TContentItem extends IContentItem = IContentItem>(\r\n        url: string,\r\n        queryConfig: IItemQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<Responses.IListContentItemsResponse<TContentItem>, Contracts.IListContentItemsContract>\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IListContentItemsContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listContentItemsResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single content type from given url\r\n     * @param url Url used to get single type\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getSingleType(\r\n        url: string,\r\n        queryConfig: IContentTypeQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IViewContentTypeResponse, Contracts.IViewContentTypeContract>> {\r\n        const response = await this.getResponseAsync<Contracts.IViewContentTypeContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.viewContentTypeResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets multiple content types from given url\r\n     * @param url Url used to get multiple types\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getMultipleTypes(\r\n        url: string,\r\n        queryConfig: IContentTypeQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IListContentTypesResponse, Contracts.IListContentTypeContract>> {\r\n        const response = await this.getResponseAsync<Contracts.IListContentTypeContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listContentTypesResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Initializes synchronization of changes in content items based on the specified parameters. After the initialization,\r\n     * you'll get an X-Continuation token in the response.\r\n     * Use the token to synchronize changes in the content items matching the initialization criteria.\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async initializeSync(\r\n        url: string,\r\n        queryConfig: ISyncInitQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IInitializeSyncResponse, Contracts.IInitializeSyncContract>> {\r\n        const response = await this.postResponseAsync<Contracts.IInitializeSyncContract>(url, {}, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.initializeContentSync(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Retrieve a list of delta updates to recently changed content items in the specified environment.\r\n     * The types of items you get is determined by the X-Continuation token you use.\r\n     * @param url Url used to get multiple types\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async syncChanges(\r\n        url: string,\r\n        queryConfig: IContentTypeQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.ISyncChangesResponse, Contracts.ISyncChangesContract>> {\r\n        const response = await this.getResponseAsync<Contracts.ISyncChangesContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.syncChanges(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets languages\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getLanguages(\r\n        url: string,\r\n        queryConfig: ILanguagesQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IListLanguagesResponse, Contracts.IListLanguagesContract>> {\r\n        const response = await this.getResponseAsync<Contracts.IListLanguagesContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listLanguagesResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single taxonomy from given url\r\n     * @param url Url used to get single taxonomy\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getTaxonomy(\r\n        url: string,\r\n        queryConfig: ITaxonomyQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IViewTaxonomyResponse, Contracts.IViewTaxonomyGroupContract>> {\r\n        const response = await this.getResponseAsync<Contracts.IViewTaxonomyGroupContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.viewTaxonomyResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets multiple taxonomies from given url\r\n     * @param url Url used to get multiple taxonomies\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getTaxonomies(\r\n        url: string,\r\n        queryConfig: ITaxonomyQueryConfig\r\n    ): Promise<IDeliveryNetworkResponse<Responses.IListTaxonomiesResponse, Contracts.IListTaxonomyGroupsContract>> {\r\n        const response = await this.getResponseAsync<Contracts.IListTaxonomyGroupsContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.listTaxonomiesResponse(response.data), response);\r\n    }\r\n\r\n    /**\r\n     * Gets single content type element from given url\r\n     * @param url Url used to get single content type element\r\n     * @param queryConfig Query configuration\r\n     */\r\n    async getElementAsync(\r\n        url: string,\r\n        queryConfig: ITaxonomyQueryConfig\r\n    ): Promise<\r\n        IDeliveryNetworkResponse<Responses.IViewContentTypeElementResponse, Contracts.IViewContentTypeElementContract>\r\n    > {\r\n        const response = await this.getResponseAsync<Contracts.IViewContentTypeElementContract>(url, queryConfig);\r\n\r\n        return this.mapNetworkResponse(this.mappingService.viewContentTypeElementResponse(response.data), response);\r\n    }\r\n\r\n    async getListAllResponse<\r\n        TResponse extends IKontentListResponse,\r\n        TAllResponse extends IKontentListAllResponse,\r\n        TContract\r\n    >(data: {\r\n        page: number;\r\n        getResponse: (\r\n            nextPageUrl?: string,\r\n            continuationToken?: string\r\n        ) => Promise<IDeliveryNetworkResponse<TResponse, TContract>>;\r\n        allResponseFactory: (\r\n            items: any[],\r\n            responses: IDeliveryNetworkResponse<TResponse, TContract>[]\r\n        ) => IGroupedNetworkResponse<TAllResponse>;\r\n        listQueryConfig?: IListAllQueryConfig<TResponse, TContract>;\r\n    }): Promise<IGroupedNetworkResponse<TAllResponse>> {\r\n        const responses = await this.getListAllResponseInternalAsync({\r\n            page: data.page,\r\n            resolvedResponses: [],\r\n            getResponse: data.getResponse,\r\n            nextPageUrl: undefined,\r\n            continuationToken: undefined,\r\n            listQueryConfig: data.listQueryConfig\r\n        });\r\n\r\n        return data.allResponseFactory(\r\n            responses.reduce((prev: any[], current) => {\r\n                prev.push(...current.data.items);\r\n                return prev;\r\n            }, []),\r\n            responses\r\n        );\r\n    }\r\n\r\n    private async getListAllResponseInternalAsync<TResponse extends IKontentListResponse, TContract>(data: {\r\n        page: number;\r\n        nextPageUrl?: string;\r\n        continuationToken?: string;\r\n        getResponse: (\r\n            nextPageUrl?: string,\r\n            continuationToken?: string\r\n        ) => Promise<IDeliveryNetworkResponse<TResponse, TContract>>;\r\n        resolvedResponses: IDeliveryNetworkResponse<TResponse, TContract>[];\r\n        listQueryConfig?: IListAllQueryConfig<TResponse, TContract>;\r\n    }): Promise<IDeliveryNetworkResponse<TResponse, TContract>[]> {\r\n        if (data.listQueryConfig?.pages) {\r\n            if (data.page > data.listQueryConfig.pages) {\r\n                // page limit reached, return result\r\n                return data.resolvedResponses;\r\n            }\r\n        }\r\n\r\n        const response = await data.getResponse(data.nextPageUrl, data.continuationToken);\r\n\r\n        if (data.listQueryConfig?.delayBetweenRequests) {\r\n            await this.sleep(data.listQueryConfig.delayBetweenRequests);\r\n        }\r\n\r\n        data.resolvedResponses.push(response);\r\n\r\n        if (data.listQueryConfig?.responseFetched) {\r\n            data.listQueryConfig.responseFetched(response, data.nextPageUrl, data.continuationToken);\r\n        }\r\n\r\n        const nextPage = response.data.pagination?.nextPage;\r\n        const continuationToken = response.xContinuationToken;\r\n\r\n        if (nextPage || continuationToken) {\r\n            // recursively fetch next page data\r\n            return await this.getListAllResponseInternalAsync({\r\n                page: data.page + 1,\r\n                nextPageUrl: nextPage,\r\n                continuationToken: continuationToken,\r\n                listQueryConfig: data.listQueryConfig,\r\n                getResponse: data.getResponse,\r\n                resolvedResponses: data.resolvedResponses\r\n            });\r\n        }\r\n\r\n        return data.resolvedResponses;\r\n    }\r\n\r\n    private sleep(ms: number): Promise<void> {\r\n        return new Promise((resolve) => setTimeout(resolve, ms));\r\n    }\r\n}\r\n", "import { IContentItem, IContentItemsContainer } from '../models/item-models';\r\n\r\nexport class LinkedItemsHelper {\r\n\r\n    convertLinkedItemsToArray(linkedItems: IContentItemsContainer): IContentItem[] {\r\n        const linkedItemsArray: IContentItem[] = [];\r\n\r\n        for (const linkedItemKey of Object.keys(linkedItems)) {\r\n            linkedItemsArray.push(linkedItems[linkedItemKey]);\r\n        }\r\n\r\n        return linkedItemsArray;\r\n    }\r\n}\r\n\r\nexport const linkedItemsHelper = new LinkedItemsHelper();\r\n", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;", "import REGEX from './regex.js';\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\nexport default validate;", "import validate from './validate.js';\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n  var v;\n  var arr = new Uint8Array(16);\n\n  // Parse ########-....-....-....-............\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff;\n\n  // Parse ........-####-....-....-............\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff;\n\n  // Parse ........-....-####-....-............\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff;\n\n  // Parse ........-....-....-####-............\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff;\n\n  // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\nexport default parse;", "import validate from './validate.js';\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  //\n  // Note to future-self: No, you can't remove the `toLowerCase()` call.\n  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n  var uuid = unsafeStringify(arr, offset);\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\nexport default stringify;", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n  return getRandomValues(rnds8);\n}", "import { unsafeStringify } from './stringify.js';\nimport parse from './parse.js';\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n  return bytes;\n}\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n\n    // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    if (buf) {\n      offset = offset || 0;\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n      return buf;\n    }\n    return unsafeStringify(bytes);\n  }\n\n  // Function#name is not settable on some platforms (#270)\n  try {\n    generateUUID.name = name;\n  } catch (err) {}\n\n  // For CommonJS default export support\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n\n/*\n * Convert an array of little-endian words to an array of bytes\n */\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n  return output;\n}\n\n/**\n * Calculate output length with padding and bit length\n */\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n  return [a, b, c, d];\n}\n\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n  return output;\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;", "var randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    offset = offset || 0;\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify(rnds);\n}\nexport default v4;", "// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n    case 1:\n      return x ^ y ^ z;\n    case 2:\n      return x & y ^ x & z ^ y & z;\n    case 3:\n      return x ^ y ^ z;\n  }\n}\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n    M[_i] = arr;\n  }\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;", "import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport class GuidHelper {\r\n    genereateGuid(): string {\r\n        return uuidv4();\r\n    }\r\n}\r\n\r\nexport const guidHelper = new GuidHelper();\r\n", "import * as urlParse from 'url-parse';\r\n\r\nexport class DeliveryUrlHelper {\r\n    replaceAssetDomain(originalAssetUrl: string, customDomain: string): string {\r\n        const urlPath = this.getUrlPathname(originalAssetUrl);\r\n\r\n        return `${customDomain}${urlPath}`;\r\n    }\r\n\r\n    getUrlPathname(url: string): string {\r\n        const parsedUrl = urlParse(url);\r\n\r\n        return parsedUrl.pathname;\r\n    }\r\n}\r\n\r\nexport const deliveryUrlHelper = new DeliveryUrlHelper();\r\n", "export class TextHelper {\r\n    getPropertyNameRegex(): RegExp {\r\n        return /[+;,/&()?\\-='\"\\\\\\xa7!%:_\\s.]+(.)?/g;\r\n    }\r\n\r\n    removeZeroWidthCharacters(str: string): string {\r\n        return str.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\r\n    }\r\n\r\n    addUnderscoreWhenStarsWithNumber(str: string): string {\r\n        if (this.startsWithNumber(str)) {\r\n            return `_${str}`;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    startsWithNumber(str: string): boolean {\r\n        if (str.match(/^\\d/)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const textHelper = new TextHelper();\r\n", "export class EnumHelper {\r\n    getAllValues(T: any): string[] {\r\n        const allEnumValues: string[] = Object.keys(T).map((key) => T[key]);\r\n        return allEnumValues;\r\n    }\r\n\r\n    getEnumFromValue<T>(T: any, value: string | number): T | undefined {\r\n        try {\r\n            if (!value) {\r\n                return undefined;\r\n            }\r\n\r\n            // we can map back from index number directly\r\n            if (this.isNumeric(value)) {\r\n                return <T>T[value];\r\n            }\r\n\r\n            // for strings, we need to compare each value separately\r\n            const allEnumValues = this.getAllValues(T);\r\n\r\n            const result = allEnumValues.find((m) => m.toLowerCase() === value.toString().toLowerCase());\r\n\r\n            if (!result) {\r\n                return undefined;\r\n            }\r\n\r\n            return result as T;\r\n        } catch (err) {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    private isNumeric(value: any): boolean {\r\n        return !isNaN(parseFloat(value)) && isFinite(value);\r\n    }\r\n}\r\n\r\nexport const enumHelper = new EnumHelper();\r\n", "export class CodenameHelper {\r\n    /**\r\n     * This is used to prevent errors caused by reserved names in content item codename (e.g. 'constructor')\r\n     */\r\n    escapeCodenameInCodenameIndexer(codename: string): string {\r\n        return `_${codename}`;\r\n    }\r\n}\r\n\r\nexport const codenameHelper = new CodenameHelper();\r\n", "import { codenameHelper, deliveryUrlHelper, enumHelper } from '../utilities';\r\n\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport { ElementModels, Elements, ElementType } from '../elements';\r\nimport {\r\n    IContentItem,\r\n    IContentItemsContainer,\r\n    IMapElementsResult,\r\n    ILink,\r\n    IRichTextImage,\r\n    IContentItemWithRawDataContainer,\r\n    IContentItemWithRawElements\r\n} from '../models';\r\n\r\ninterface IRichTextImageUrlRecord {\r\n    originalUrl: string;\r\n    newUrl: string;\r\n}\r\n\r\nexport class ElementMapper {\r\n    constructor(private readonly config: IDeliveryClientConfig) {}\r\n\r\n    mapElements<TContentItem extends IContentItem = IContentItem>(data: {\r\n        dataToMap: IContentItemWithRawElements;\r\n        processedItems: IContentItemsContainer;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): IMapElementsResult<TContentItem> | undefined {\r\n        // return processed item to avoid infinite recursion\r\n        const processedItem = data.processedItems[\r\n            codenameHelper.escapeCodenameInCodenameIndexer(data.dataToMap.item.system.codename)\r\n        ] as TContentItem | undefined;\r\n        if (processedItem) {\r\n            // item was already resolved\r\n            return {\r\n                item: processedItem,\r\n                processedItems: data.processedItems,\r\n                preparedItems: data.preparedItems,\r\n                processingStartedForCodenames: data.processingStartedForCodenames\r\n            };\r\n        }\r\n\r\n        const preparedItem = data.preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(data.dataToMap.item.system.codename)];\r\n        const itemInstance = preparedItem?.item as TContentItem;\r\n\r\n        if (!itemInstance) {\r\n            // item is not present in response\r\n            return undefined;\r\n        }\r\n\r\n        // mapp elements\r\n        const elementCodenames = Object.getOwnPropertyNames(data.dataToMap.rawItem.elements);\r\n\r\n        for (const elementCodename of elementCodenames) {\r\n            const elementMap = this.resolveElementMap(itemInstance, elementCodename);\r\n            const elementWrapper: ElementModels.IElementWrapper = {\r\n                system: data.dataToMap.item.system,\r\n                rawElement: data.dataToMap.rawItem.elements[elementCodename],\r\n                element: elementMap.resolvedName\r\n            };\r\n            if (elementMap.shouldMapElement) {\r\n                const mappedElement = this.mapElement({\r\n                    elementWrapper: elementWrapper,\r\n                    item: itemInstance,\r\n                    preparedItems: data.preparedItems,\r\n                    processingStartedForCodenames: data.processingStartedForCodenames,\r\n                    processedItems: data.processedItems\r\n                });\r\n\r\n                // set mapped elements\r\n                itemInstance.elements[elementMap.resolvedName] = mappedElement;\r\n            }\r\n        }\r\n\r\n        return {\r\n            item: itemInstance,\r\n            processedItems: data.processedItems,\r\n            preparedItems: data.preparedItems,\r\n            processingStartedForCodenames: data.processingStartedForCodenames\r\n        };\r\n    }\r\n\r\n    private mapElement(data: {\r\n        elementWrapper: ElementModels.IElementWrapper;\r\n        item: IContentItem;\r\n        processedItems: IContentItemsContainer;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): ElementModels.IElement<any> {\r\n        const elementType = enumHelper.getEnumFromValue<ElementType>(ElementType, data.elementWrapper.rawElement.type);\r\n        if (elementType) {\r\n            if (elementType === ElementType.ModularContent) {\r\n                return this.mapLinkedItemsElement({\r\n                    elementWrapper: data.elementWrapper,\r\n                    preparedItems: data.preparedItems,\r\n                    processingStartedForCodenames: data.processingStartedForCodenames,\r\n                    processedItems: data.processedItems\r\n                });\r\n            }\r\n\r\n            if (elementType === ElementType.Text) {\r\n                return this.mapTextElement(data.elementWrapper);\r\n            }\r\n            if (elementType === ElementType.Asset) {\r\n                return this.mapAssetsElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.Number) {\r\n                return this.mapNumberElement(data.elementWrapper);\r\n            }\r\n            if (elementType === ElementType.MultipleChoice) {\r\n                return this.mapMultipleChoiceElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.DateTime) {\r\n                return this.mapDateTimeElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.RichText) {\r\n                // add to parent items\r\n                return this.mapRichTextElement(\r\n                    data.elementWrapper,\r\n                    data.processedItems,\r\n                    data.processingStartedForCodenames,\r\n                    data.preparedItems\r\n                );\r\n            }\r\n\r\n            if (elementType === ElementType.UrlSlug) {\r\n                return this.mapUrlSlugElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.Taxonomy) {\r\n                return this.mapTaxonomyElement(data.elementWrapper);\r\n            }\r\n\r\n            if (elementType === ElementType.Custom) {\r\n                return this.mapCustomElement(data.elementWrapper);\r\n            }\r\n        }\r\n        console.warn(\r\n            `Could not map element '${data.elementWrapper.rawElement.name}' of type '${data.elementWrapper.rawElement.type}'. Returning unknown element instead.`\r\n        );\r\n        return this.mapUnknowElement(data.elementWrapper);\r\n    }\r\n\r\n    private mapRichTextElement(\r\n        elementWrapper: ElementModels.IElementWrapper,\r\n        processedItems: IContentItemsContainer,\r\n        processingStartedForCodenames: string[],\r\n        preparedItems: IContentItemWithRawDataContainer\r\n    ): Elements.RichTextElement {\r\n        const rawElement = elementWrapper.rawElement as Contracts.IRichTextElementContract;\r\n\r\n        // get all linked items and linked items codenames nested in rich text\r\n        const richTextLinkedItems: IContentItem[] = [];\r\n        const richTextLinkedItemsCodenames: string[] = [];\r\n\r\n        // The Kontent Delivery API is not guaranteed to return rich-text modular_content array items in the same order in which they appear inside the `value` property.\r\n        // We extract the modular_content codenames in the rich-text value and sort the raw modular_content based on that order instead.\r\n        const rawModularContentCodenamesMatches = (rawElement.value as string).matchAll(\r\n            /<object[^>]+data-codename=\"(?<codename>[a-z0-9_]*)\".*?>/g\r\n        );\r\n        const rawModularContentCodenamesSorted = Array.from(rawModularContentCodenamesMatches).reduce<string[]>(\r\n            (acc, match) => {\r\n                if (match.groups && match.groups.codename) {\r\n                    acc.push(match.groups.codename);\r\n                }\r\n                return acc;\r\n            },\r\n            [] as string[]\r\n        );\r\n        const rawModularContentCodenames = [...rawElement.modular_content].sort(function (a, b) {\r\n            return rawModularContentCodenamesSorted.indexOf(a) - rawModularContentCodenamesSorted.indexOf(b);\r\n        });\r\n\r\n        for (const codename of rawModularContentCodenames) {\r\n            richTextLinkedItemsCodenames.push(codename);\r\n            // get linked item and check if it exists (it might not be included in response due to 'Depth' parameter)\r\n            const preparedData = preparedItems[codename];\r\n\r\n            // first try to get existing item\r\n            if (this.canMapLinkedItems()) {\r\n                const existingLinkedItem = this.getOrSaveLinkedItemForElement(\r\n                    codename,\r\n                    rawElement,\r\n                    processedItems,\r\n                    processingStartedForCodenames,\r\n                    preparedItems\r\n                );\r\n\r\n                if (existingLinkedItem) {\r\n                    // item was found, add it to linked items\r\n                    richTextLinkedItems.push(existingLinkedItem);\r\n                } else {\r\n                    // item was not found or not yet resolved\r\n                    if (preparedData) {\r\n                        const mappedLinkedItemResult = this.mapElements({\r\n                            dataToMap: preparedData,\r\n                            preparedItems: preparedItems,\r\n                            processingStartedForCodenames: processingStartedForCodenames,\r\n                            processedItems: processedItems\r\n                        });\r\n\r\n                        // add mapped linked item to result\r\n                        if (mappedLinkedItemResult) {\r\n                            richTextLinkedItems.push(mappedLinkedItemResult.item);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // get rich text images\r\n        const richTextImagesResult = this.getRichTextImages(rawElement.images);\r\n\r\n        // extract and map links & images\r\n        const links: ILink[] = this.mapRichTextLinks(rawElement.links);\r\n        const images: IRichTextImage[] = richTextImagesResult.richTextImages;\r\n\r\n        // replace asset urls in html\r\n        const richTextHtml: string = this.getRichTextHtml(rawElement.value, richTextImagesResult.imageUrlRecords);\r\n\r\n        return {\r\n            images: images,\r\n            linkedItemCodenames: richTextLinkedItemsCodenames,\r\n            linkedItems: richTextLinkedItems,\r\n            links: links,\r\n            name: rawElement.name,\r\n            type: ElementType.RichText,\r\n            value: richTextHtml\r\n        };\r\n    }\r\n\r\n    private mapDateTimeElement(elementWrapper: ElementModels.IElementWrapper): Elements.DateTimeElement {\r\n        const rawElement = elementWrapper.rawElement as Contracts.IDateTimeElementContract;\r\n        return {\r\n            ...this.buildElement(elementWrapper, ElementType.DateTime, () => rawElement.value),\r\n            displayTimeZone: rawElement.display_timezone ?? null\r\n        };\r\n    }\r\n\r\n    private mapMultipleChoiceElement(elementWrapper: ElementModels.IElementWrapper): Elements.MultipleChoiceElement {\r\n        return this.buildElement(elementWrapper, ElementType.MultipleChoice, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapNumberElement(elementWrapper: ElementModels.IElementWrapper): Elements.NumberElement {\r\n        return this.buildElement(elementWrapper, ElementType.Number, () => {\r\n            if (elementWrapper.rawElement.value === 0) {\r\n                return 0;\r\n            } else if (elementWrapper.rawElement.value) {\r\n                return +elementWrapper.rawElement.value;\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n\r\n    private mapTextElement(elementWrapper: ElementModels.IElementWrapper): Elements.TextElement {\r\n        return this.buildElement(elementWrapper, ElementType.Text, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapAssetsElement(elementWrapper: ElementModels.IElementWrapper): Elements.AssetsElement {\r\n        return this.buildElement(elementWrapper, ElementType.Asset, () => {\r\n            const assetContracts = elementWrapper.rawElement.value as Contracts.IAssetContract[];\r\n\r\n            const assets: ElementModels.AssetModel[] = [];\r\n\r\n            for (const assetContract of assetContracts) {\r\n                let renditions: { [renditionPresetCodename: string]: ElementModels.Rendition } | null = null;\r\n\r\n                // get asset url (custom domain may be configured)\r\n                const assetUrl: string = this.config.assetsDomain\r\n                    ? deliveryUrlHelper.replaceAssetDomain(assetContract.url, this.config.assetsDomain)\r\n                    : assetContract.url;\r\n\r\n                if (assetContract.renditions) {\r\n                    renditions = {};\r\n\r\n                    for (const renditionPresetKey of Object.keys(assetContract.renditions)) {\r\n                        const rendition = assetContract.renditions[renditionPresetKey];\r\n\r\n                        renditions[renditionPresetKey] = {\r\n                            ...rendition,\r\n                            url: `${assetUrl}?${rendition.query}` // enhance rendition with absolute url\r\n                        };\r\n                    }\r\n                }\r\n\r\n                const renditionToBeApplied: ElementModels.Rendition | null =\r\n                    (this.config.defaultRenditionPreset && renditions?.[this.config.defaultRenditionPreset]) || null;\r\n\r\n                const finalUrl = renditionToBeApplied?.url ?? assetUrl;\r\n\r\n                const asset: ElementModels.AssetModel = {\r\n                    ...assetContract,\r\n                    url: finalUrl, // use custom url of asset which may contain custom domain and applied rendition\r\n                    renditions\r\n                };\r\n\r\n                assets.push(asset);\r\n            }\r\n\r\n            return assets;\r\n        });\r\n    }\r\n\r\n    private mapTaxonomyElement(elementWrapper: ElementModels.IElementWrapper): Elements.TaxonomyElement {\r\n        return {\r\n            ...this.buildElement(elementWrapper, ElementType.Taxonomy, () => elementWrapper.rawElement.value),\r\n            taxonomyGroup: elementWrapper.rawElement.taxonomy_group ?? null\r\n        };\r\n    }\r\n\r\n    private mapUnknowElement(elementWrapper: ElementModels.IElementWrapper): Elements.UnknownElement {\r\n        return this.buildElement(elementWrapper, ElementType.Unknown, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapCustomElement(\r\n        elementWrapper: ElementModels.IElementWrapper\r\n    ): Elements.CustomElement | ElementModels.IElement<string> {\r\n        // try to find element resolver\r\n        if (this.config.elementResolver) {\r\n            const elementResolverValue = this.config.elementResolver(elementWrapper);\r\n\r\n            if (elementResolverValue) {\r\n                return this.buildElement(elementWrapper, ElementType.Custom, () => elementResolverValue);\r\n            }\r\n        }\r\n\r\n        return this.buildElement(elementWrapper, ElementType.Custom, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapUrlSlugElement(elementWrapper: ElementModels.IElementWrapper): Elements.UrlSlugElement {\r\n        return this.buildElement(elementWrapper, ElementType.UrlSlug, () => elementWrapper.rawElement.value);\r\n    }\r\n\r\n    private mapLinkedItemsElement(data: {\r\n        elementWrapper: ElementModels.IElementWrapper;\r\n        processedItems: IContentItemsContainer;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): Elements.LinkedItemsElement<any> {\r\n        // prepare linked items\r\n        const linkedItems: IContentItem[] = [];\r\n\r\n        // value = array of item codenames\r\n        const linkedItemCodenames = data.elementWrapper.rawElement.value as string[];\r\n\r\n        for (const codename of linkedItemCodenames) {\r\n            if (this.canMapLinkedItems()) {\r\n                const linkedItem = this.getOrSaveLinkedItemForElement(\r\n                    codename,\r\n                    data.elementWrapper.rawElement,\r\n                    data.processedItems,\r\n                    data.processingStartedForCodenames,\r\n                    data.preparedItems\r\n                );\r\n                if (linkedItem) {\r\n                    // add item to result\r\n                    linkedItems.push(linkedItem);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            ...this.buildElement(data.elementWrapper, ElementType.ModularContent, () => linkedItemCodenames),\r\n            linkedItems: linkedItems\r\n        };\r\n    }\r\n\r\n    private getOrSaveLinkedItemForElement(\r\n        codename: string,\r\n        element: Contracts.IElementContract,\r\n        processedItems: IContentItemsContainer,\r\n        mappingStartedForCodenames: string[],\r\n        preparedItems: IContentItemWithRawDataContainer\r\n    ): IContentItem | undefined {\r\n        const escapedCodename = codenameHelper.escapeCodenameInCodenameIndexer(codename);\r\n\r\n        // first check if item was already resolved and return it if it was\r\n        const processedItem = processedItems[escapedCodename];\r\n\r\n        if (processedItem) {\r\n            // item was already resolved\r\n            return processedItem;\r\n        }\r\n\r\n        const preparedItem = preparedItems[escapedCodename];\r\n\r\n        if (mappingStartedForCodenames.includes(codename)) {\r\n            return preparedItem?.item;\r\n        }\r\n\r\n        mappingStartedForCodenames.push(codename);\r\n\r\n        // throw error if item is not in response and errors are not skipped\r\n        if (!preparedItem) {\r\n            return undefined;\r\n        }\r\n\r\n        let mappedLinkedItem: IContentItem | undefined;\r\n\r\n        // original resolving if item is still undefined\r\n        const mappedLinkedItemResult = this.mapElements({\r\n            dataToMap: preparedItem,\r\n            preparedItems: preparedItems,\r\n            processingStartedForCodenames: mappingStartedForCodenames,\r\n            processedItems: processedItems\r\n        });\r\n\r\n        if (mappedLinkedItemResult) {\r\n            mappedLinkedItem = mappedLinkedItemResult.item;\r\n\r\n            // add to processed items\r\n            processedItems[escapedCodename] = mappedLinkedItem;\r\n        }\r\n\r\n        return mappedLinkedItem;\r\n    }\r\n\r\n    private mapRichTextLinks(linksJson: Contracts.IRichTextElementLinkWrapperContract): ILink[] {\r\n        const links: ILink[] = [];\r\n\r\n        for (const linkId of Object.keys(linksJson)) {\r\n            const linkRaw = linksJson[linkId];\r\n            links.push({\r\n                codename: linkRaw.codename,\r\n                linkId: linkId,\r\n                urlSlug: linkRaw.url_slug,\r\n                type: linkRaw.type\r\n            });\r\n        }\r\n\r\n        return links;\r\n    }\r\n\r\n    private getRichTextHtml(richTextHtml: string, richTextImageRecords: IRichTextImageUrlRecord[]): string {\r\n        for (const richTextImageRecord of richTextImageRecords) {\r\n            // replace rich text image url if it differs\r\n            if (richTextImageRecord.newUrl !== richTextImageRecord.originalUrl) {\r\n                richTextHtml = richTextHtml.replace(\r\n                    new RegExp(richTextImageRecord.originalUrl, 'g'),\r\n                    richTextImageRecord.newUrl\r\n                );\r\n            }\r\n        }\r\n\r\n        return richTextHtml;\r\n    }\r\n\r\n    private getRichTextImages(imagesJson: Contracts.IRichTextElementImageWrapperContract): {\r\n        richTextImages: IRichTextImage[];\r\n        imageUrlRecords: IRichTextImageUrlRecord[];\r\n    } {\r\n        const images: IRichTextImage[] = [];\r\n        const imageUrlRecords: IRichTextImageUrlRecord[] = [];\r\n\r\n        for (const imageId of Object.keys(imagesJson)) {\r\n            const imageRaw = imagesJson[imageId];\r\n\r\n            // image may contain custom asset domain\r\n            const imageUrl: string = this.config.assetsDomain\r\n                ? deliveryUrlHelper.replaceAssetDomain(imageRaw.url, this.config.assetsDomain)\r\n                : imageRaw.url;\r\n\r\n            images.push({\r\n                description: imageRaw.description ?? null,\r\n                imageId: imageRaw.image_id,\r\n                url: imageUrl,\r\n                height: imageRaw.height ?? null,\r\n                width: imageRaw.width ?? null\r\n            });\r\n\r\n            imageUrlRecords.push({\r\n                originalUrl: imageRaw.url,\r\n                newUrl: imageUrl\r\n            });\r\n        }\r\n\r\n        return {\r\n            imageUrlRecords: imageUrlRecords,\r\n            richTextImages: images\r\n        };\r\n    }\r\n\r\n    private resolveElementMap(\r\n        item: IContentItem,\r\n        originalElementCodename: string\r\n    ): {\r\n        shouldMapElement: boolean;\r\n        resolvedName: string;\r\n    } {\r\n        let resolvedElementPropertyName: string | undefined = undefined;\r\n\r\n        if (this.config.propertyNameResolver) {\r\n            resolvedElementPropertyName = this.config.propertyNameResolver(item.system.type, originalElementCodename);\r\n        }\r\n\r\n        if (!resolvedElementPropertyName) {\r\n            // use original element codename\r\n            resolvedElementPropertyName = originalElementCodename;\r\n        }\r\n\r\n        return {\r\n            resolvedName: resolvedElementPropertyName,\r\n            shouldMapElement: true\r\n        };\r\n    }\r\n\r\n    private buildElement<TValue>(\r\n        elementWrapper: ElementModels.IElementWrapper,\r\n        type: ElementType,\r\n        valueFactory: () => TValue\r\n    ): ElementModels.IElement<TValue> {\r\n        return {\r\n            name: elementWrapper.rawElement.name,\r\n            type: type,\r\n            value: valueFactory()\r\n        };\r\n    }\r\n\r\n    private canMapLinkedItems(): boolean {\r\n        if (!this.config.linkedItemsReferenceHandler) {\r\n            return true;\r\n        }\r\n        return this.config.linkedItemsReferenceHandler === 'map';\r\n    }\r\n}\r\n", "import { codenameHelper } from '../utilities';\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport {\r\n    IContentItem,\r\n    IContentItemsContainer,\r\n    IContentItemWithRawDataContainer,\r\n    IContentItemWithRawElements\r\n} from '../models';\r\nimport { ElementMapper } from './element.mapper';\r\n\r\nexport interface IMapItemResult<TContentItem extends IContentItem = IContentItem> {\r\n    item: TContentItem;\r\n    processedItems: IContentItemsContainer;\r\n    preparedItems: IContentItemWithRawDataContainer;\r\n    processingStartedForCodenames: string[];\r\n}\r\n\r\nexport interface IMultipleItemsMapResult<TContentItem extends IContentItem = IContentItem> {\r\n    items: TContentItem[];\r\n    linkedItems: IContentItemsContainer;\r\n}\r\n\r\nexport interface ISingleItemMapResult<TContentItem extends IContentItem = IContentItem> {\r\n    item: TContentItem;\r\n    linkedItems: IContentItemsContainer;\r\n}\r\n\r\nexport class ItemMapper {\r\n    private readonly elementMapper: ElementMapper;\r\n\r\n    constructor(readonly config: IDeliveryClientConfig) {\r\n        this.elementMapper = new ElementMapper(config);\r\n    }\r\n\r\n    /**\r\n     * Maps single item to its proper strongly typed model from the given response\r\n     * @param response Response used to map the item\r\n     * @param queryConfig Query configuration\r\n     */\r\n    mapSingleItemFromResponse<TContentItem extends IContentItem = IContentItem>(\r\n        response: Contracts.IViewContentItemContract\r\n    ): ISingleItemMapResult<TContentItem> {\r\n        const mapResult = this.mapItems<TContentItem>({\r\n            mainItems: [response.item],\r\n            linkedItems: Object.values(response.modular_content)\r\n        });\r\n\r\n        return {\r\n            item: mapResult.items[0],\r\n            linkedItems: mapResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Maps multiple items to their strongly typed model from the given  response\r\n     * @param response Response used to map the item\r\n     * @param queryConfig Query configuration\r\n     */\r\n    mapMultipleItemsFromResponse<TContentItem extends IContentItem = IContentItem>(\r\n        response: Contracts.IItemsWithModularContentContract\r\n    ): IMultipleItemsMapResult<TContentItem> {\r\n        const mapResult = this.mapItems<TContentItem>({\r\n            mainItems: response.items,\r\n            linkedItems: Object.values(response.modular_content)\r\n        });\r\n\r\n        return mapResult;\r\n    }\r\n\r\n    /**\r\n     * Maps item contracts to full models\r\n     */\r\n    mapItems<TContentItem extends IContentItem = IContentItem>(data: {\r\n        mainItems: Contracts.IContentItemContract[];\r\n        linkedItems: Contracts.IContentItemContract[];\r\n    }): IMultipleItemsMapResult<TContentItem> {\r\n        const processedItems: IContentItemsContainer = {};\r\n        const preparedItems: IContentItemWithRawDataContainer = {};\r\n        const processingStartedForCodenames: string[] = [];\r\n        const mappedMainItems: TContentItem[] = [];\r\n        const mappedLinkedItems: IContentItemsContainer = {};\r\n        const itemsToResolve: Contracts.IContentItemContract[] = [...data.mainItems, ...data.linkedItems];\r\n\r\n        // first prepare reference for all items\r\n        for (const item of itemsToResolve) {\r\n            preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(item.system.codename)] = {\r\n                item: this.createContentItem(item),\r\n                rawItem: item\r\n            };\r\n        }\r\n\r\n        // then resolve main items\r\n        for (const item of data.mainItems) {\r\n            const itemResult = this.mapItem<TContentItem>({\r\n                item: preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(item.system.codename)],\r\n                processedItems: processedItems,\r\n                preparedItems: preparedItems,\r\n                processingStartedForCodenames: processingStartedForCodenames\r\n            });\r\n            mappedMainItems.push(itemResult.item);\r\n        }\r\n\r\n        // and linked items\r\n        for (const item of data.linkedItems) {\r\n            const itemResult = this.mapItem<TContentItem>({\r\n                item: preparedItems[codenameHelper.escapeCodenameInCodenameIndexer(item.system.codename)],\r\n                processedItems: processedItems,\r\n                preparedItems: preparedItems,\r\n                processingStartedForCodenames: processingStartedForCodenames\r\n            });\r\n\r\n            mappedLinkedItems[(item.system.codename)] = itemResult.item;\r\n        }\r\n\r\n        return {\r\n            items: mappedMainItems,\r\n            linkedItems: mappedLinkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Maps item contract to full model\r\n     */\r\n    private mapItem<TContentItem extends IContentItem = IContentItem>(data: {\r\n        item: IContentItemWithRawElements;\r\n        processedItems: IContentItemsContainer;\r\n        processingStartedForCodenames: string[];\r\n        preparedItems: IContentItemWithRawDataContainer;\r\n    }): IMapItemResult<TContentItem> {\r\n        if (!data.item) {\r\n            throw Error(`Could not map item because its undefined`);\r\n        }\r\n\r\n        const result = this.elementMapper.mapElements<TContentItem>({\r\n            dataToMap: data.item,\r\n            preparedItems: data.preparedItems,\r\n            processingStartedForCodenames: [],\r\n            processedItems: data.processedItems\r\n        });\r\n\r\n        if (!result) {\r\n            throw Error(`Mapping of content item '${data.item.item.system.codename}' failed`);\r\n        }\r\n        return {\r\n            item: result.item,\r\n            processedItems: result.processedItems,\r\n            preparedItems: result.preparedItems,\r\n            processingStartedForCodenames: result.processingStartedForCodenames\r\n        };\r\n    }\r\n\r\n    private createContentItem(item: Contracts.IContentItemContract): IContentItem {\r\n        const contentItem: IContentItem = {\r\n            elements: {},\r\n            system: {\r\n                codename: item.system.codename,\r\n                collection: item.system.collection,\r\n                id: item.system.id,\r\n                language: item.system.language,\r\n                lastModified: item.system.last_modified,\r\n                name: item.system.name,\r\n                sitemapLocations: item.system.sitemap_locations,\r\n                type: item.system.type,\r\n                workflowStep: item.system.workflow_step ?? null,\r\n                workflow: item.system.workflow ?? null\r\n            }\r\n        };\r\n\r\n        return contentItem;\r\n    }\r\n}\r\n", "import { Contracts } from '../contracts';\r\nimport { ITaxonomyGroup, ITaxonomySystemAttributes, ITaxonomyTerms } from '../models';\r\n\r\nexport class TaxonomyMapper {\r\n    mapTaxonomy(\r\n        taxonomySystem: Contracts.ITaxonomySystemAttributesContract,\r\n        taxonomyTerms: Contracts.ITaxonomyTermsContract[]\r\n    ): ITaxonomyGroup {\r\n        if (!taxonomySystem) {\r\n            throw Error(`Cannot map taxonomy due to missing 'system' property`);\r\n        }\r\n\r\n        if (!taxonomyTerms) {\r\n            throw Error(`Cannot map taxonomy due to missing 'terms' property`);\r\n        }\r\n\r\n        if (!Array.isArray(taxonomyTerms)) {\r\n            throw Error(`Cannot map terms because no terms array was provided`);\r\n        }\r\n\r\n        const mappedSystemAttributes: ITaxonomySystemAttributes = {\r\n            name: taxonomySystem.name,\r\n            codename: taxonomySystem.codename,\r\n            id: taxonomySystem.id,\r\n            lastModified: taxonomySystem.last_modified\r\n        };\r\n\r\n        const mappedTerms: ITaxonomyTerms[] = this.mapTaxonomyTerms(taxonomyTerms);\r\n\r\n        return {\r\n            system: mappedSystemAttributes,\r\n            terms: mappedTerms\r\n        };\r\n    }\r\n\r\n    mapTaxonomies(taxonomies: Contracts.ITaxonomyGroupContract[]): ITaxonomyGroup[] {\r\n        if (!taxonomies) {\r\n            throw Error(`Cannot map taxonomy due to missing 'taxonomies' property`);\r\n        }\r\n\r\n        if (!Array.isArray(taxonomies)) {\r\n            throw Error(`Cannot map taxonomies because the 'taxonomies' property is not an array `);\r\n        }\r\n\r\n        const mappedTaxonomies: ITaxonomyGroup[] = [];\r\n\r\n        taxonomies.forEach((taxonomy) => {\r\n            mappedTaxonomies.push(this.mapTaxonomy(taxonomy.system, taxonomy.terms));\r\n        });\r\n\r\n        return mappedTaxonomies;\r\n    }\r\n\r\n    /**\r\n     * Recursively map array of taxonomy terms\r\n     * @param termsArray Terms array to map\r\n     */\r\n    private mapTaxonomyTerms(termsArray: Contracts.ITaxonomyTermsContract[]): ITaxonomyTerms[] {\r\n        if (termsArray.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const mappedTermsArray: ITaxonomyTerms[] = [];\r\n\r\n        termsArray.forEach((terms) => {\r\n            const mappedTerms: ITaxonomyTerms = {\r\n                codename: terms.codename,\r\n                name: terms.name,\r\n                terms: this.mapTaxonomyTerms(terms.terms)\r\n            };\r\n\r\n            mappedTermsArray.push(mappedTerms);\r\n        });\r\n\r\n        return mappedTermsArray;\r\n    }\r\n}\r\n", "import { Contracts } from '../contracts';\r\nimport { IContentType, IContentTypeSystemAttributes, IGenericElement } from '../models';\r\n\r\nexport class TypeMapper {\r\n    mapSingleType(response: Contracts.IViewContentTypeContract): IContentType {\r\n        return this.mapType(response);\r\n    }\r\n\r\n    mapMultipleTypes(response: Contracts.IListContentTypeContract): IContentType[] {\r\n        return response.types.map((type) => {\r\n            return this.mapType(type);\r\n        });\r\n    }\r\n\r\n    private mapType(type: Contracts.IContentTypeContract): IContentType {\r\n        if (!type) {\r\n            throw Error(`Cannot map type`);\r\n        }\r\n\r\n        if (!type.elements) {\r\n            throw Error(`Cannot map type elements`);\r\n        }\r\n\r\n        const system: IContentTypeSystemAttributes = {\r\n            codename: type.system.codename,\r\n            id: type.system.id,\r\n            name: type.system.name,\r\n            lastModified: type.system.last_modified\r\n        };\r\n\r\n        const elements: IGenericElement[] = [];\r\n\r\n        const elementNames = Object.getOwnPropertyNames(type.elements);\r\n        elementNames.forEach((elementName: string) => {\r\n            const typeElement = type.elements[elementName];\r\n\r\n            if (!typeElement) {\r\n                throw Error(`Cannot find element '${elementName}' on type '${type.system.codename}'`);\r\n            }\r\n\r\n            // use json property as a codename of the type element\r\n            const elementCodename = elementName;\r\n\r\n            // extra properties for certain element types\r\n            const options: Contracts.IElementOptionContract[] = [];\r\n\r\n            // some elements can contain options\r\n            const rawOptions = typeElement.options;\r\n            if (rawOptions) {\r\n                if (!Array.isArray(rawOptions)) {\r\n                    throw Error(`Content type 'options' property has to be an array`);\r\n                }\r\n\r\n                rawOptions.forEach((rawOption) => {\r\n                    options.push({\r\n                        codename: rawOption.codename,\r\n                        name: rawOption.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            elements.push({\r\n                codename: elementCodename,\r\n                taxonomyGroup: typeElement.taxonomy_group,\r\n                options: options,\r\n                name: typeElement.name,\r\n                type: typeElement.type\r\n            });\r\n        });\r\n\r\n        return {\r\n            elements: elements,\r\n            system: system\r\n        };\r\n    }\r\n}\r\n", "import { Contracts } from '../contracts';\r\nimport { IGenericElement } from '../models';\r\n\r\nexport class GenericElementMapper {\r\n    mapElement(response: Contracts.IViewContentTypeElementContract): IGenericElement {\r\n        if (!response) {\r\n            throw Error(`Invalid response for mapping element`);\r\n        }\r\n\r\n        const element = response;\r\n\r\n        return {\r\n            codename: element.codename,\r\n            name: element.name,\r\n            type: element.type,\r\n            options: element.options ? element.options : [],\r\n            taxonomyGroup: element.taxonomy_group\r\n        };\r\n    }\r\n}\r\n", "import { Contracts } from '../contracts';\r\nimport { ILanguage } from '../models';\r\n\r\nexport class LanguageMapper {\r\n    mapMultipleLanguages(response: Contracts.IListLanguagesContract): ILanguage[] {\r\n        return response.languages.map((language) => {\r\n            return this.mapLanguage(language);\r\n        });\r\n    }\r\n\r\n    private mapLanguage(language: Contracts.ILanguageContract): ILanguage {\r\n        if (!language) {\r\n            throw Error(`Cannot map language`);\r\n        }\r\n\r\n        return {\r\n            system: language.system\r\n        };\r\n    }\r\n}\r\n", "import { Contracts } from '../contracts';\r\nimport { IContentItemDelta } from '../models';\r\n\r\nexport class SyncMapper {\r\n    mapContentItemDelta(itemDeltaContract: Contracts.IContentItemDeltaContract): IContentItemDelta {\r\n        const systemContract = itemDeltaContract.data.system;\r\n\r\n        const elements: Contracts.IContentItemElementsContracts = itemDeltaContract.data.elements\r\n            ? itemDeltaContract.data.elements\r\n            : {};\r\n\r\n        return {\r\n            changeType: itemDeltaContract.change_type,\r\n            timestamp: itemDeltaContract.timestamp,\r\n            data: {\r\n                elements: elements,\r\n                system: {\r\n                    codename: systemContract.codename,\r\n                    collection: systemContract.collection,\r\n                    id: systemContract.id,\r\n                    language: systemContract.language,\r\n                    lastModified: systemContract.last_modified,\r\n                    name: systemContract.name,\r\n                    sitemapLocations: systemContract.sitemap_locations,\r\n                    type: systemContract.type,\r\n                    workflowStep: systemContract.workflow_step ?? null,\r\n                    workflow: systemContract.workflow ?? null\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n", "import { IDeliveryClientConfig } from '../config';\r\nimport { Contracts } from '../contracts';\r\nimport { SyncMapper, GenericElementMapper, ItemMapper, LanguageMapper, TaxonomyMapper, TypeMapper } from '../mappers';\r\nimport { Responses, IContentItem, IPagination } from '../models';\r\n\r\nexport interface IMappingService {\r\n    listContentTypesResponse(data: Contracts.IListContentTypeContract): Responses.IListContentTypesResponse;\r\n\r\n    itemsFeedResponse<TContentItem extends IContentItem = IContentItem>(\r\n        data: Contracts.IItemsFeedContract\r\n    ): Responses.IListItemsFeedResponse<TContentItem>;\r\n\r\n    viewContentTypeResponse(data: Contracts.IViewContentTypeContract): Responses.IViewContentTypeResponse;\r\n\r\n    viewContentItemResponse<TContentItem extends IContentItem = IContentItem>(\r\n        data: Contracts.IViewContentItemContract\r\n    ): Responses.IViewContentItemResponse<TContentItem>;\r\n\r\n    listContentItemsResponse<TContentItem extends IContentItem = IContentItem>(\r\n        data: Contracts.IListContentItemsContract\r\n    ): Responses.IListContentItemsResponse<TContentItem>;\r\n\r\n    viewTaxonomyResponse(data: Contracts.IViewTaxonomyGroupContract): Responses.IViewTaxonomyResponse;\r\n\r\n    listTaxonomiesResponse(data: Contracts.IListTaxonomyGroupsContract): Responses.IListTaxonomiesResponse;\r\n\r\n    viewContentTypeElementResponse(\r\n        data: Contracts.IViewContentTypeElementContract\r\n    ): Responses.IViewContentTypeElementResponse;\r\n\r\n    listLanguagesResponse(data: Contracts.IListLanguagesContract): Responses.IListLanguagesResponse;\r\n    initializeContentSync(data: Contracts.IInitializeSyncContract): Responses.IInitializeSyncResponse;\r\n    syncChanges(data: Contracts.ISyncChangesContract): Responses.ISyncChangesResponse;\r\n}\r\n\r\nexport class MappingService implements IMappingService {\r\n    private readonly typeMapper: TypeMapper;\r\n    private readonly languageMapper: LanguageMapper;\r\n    private readonly itemMapper: ItemMapper;\r\n    private readonly taxonomyMapper: TaxonomyMapper;\r\n    private readonly genericElementMapper: GenericElementMapper;\r\n    private readonly syncMapper: SyncMapper;\r\n\r\n    constructor(readonly config: IDeliveryClientConfig) {\r\n        this.typeMapper = new TypeMapper();\r\n        this.languageMapper = new LanguageMapper();\r\n        this.itemMapper = new ItemMapper(config);\r\n        this.taxonomyMapper = new TaxonomyMapper();\r\n        this.genericElementMapper = new GenericElementMapper();\r\n        this.syncMapper = new SyncMapper();\r\n    }\r\n\r\n    /**\r\n     * Gets response for list of languages\r\n     * @param data Response data\r\n     */\r\n    listLanguagesResponse(data: Contracts.IListLanguagesContract): Responses.IListLanguagesResponse {\r\n        return {\r\n            items: this.languageMapper.mapMultipleLanguages(data),\r\n            pagination: this.mapPagination(data.pagination)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting a multiple type\r\n     * @param data Response data\r\n     */\r\n    listContentTypesResponse(data: Contracts.IListContentTypeContract): Responses.IListContentTypesResponse {\r\n        return {\r\n            items: this.typeMapper.mapMultipleTypes(data),\r\n            pagination: this.mapPagination(data.pagination)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for single type\r\n     * @param data Response data\r\n     * @param options Options\r\n     */\r\n    viewContentTypeResponse(data: Contracts.IViewContentTypeContract): Responses.IViewContentTypeResponse {\r\n        return {\r\n            type: this.typeMapper.mapSingleType(data)\r\n        };\r\n    }\r\n\r\n    itemsFeedResponse<TContentItem extends IContentItem = IContentItem>(\r\n        data: Contracts.IItemsFeedContract\r\n    ): Responses.IListItemsFeedResponse<TContentItem> {\r\n        const itemsResult = this.itemMapper.mapItems<TContentItem>({\r\n            linkedItems: Object.values(data.modular_content),\r\n            mainItems: data.items\r\n        });\r\n\r\n        return {\r\n            items: itemsResult.items,\r\n            linkedItems: itemsResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting single item\r\n     * @param data Response data\r\n     * @param queryConfig Query configuration\r\n     */\r\n    viewContentItemResponse<TContentItem extends IContentItem = IContentItem>(\r\n        data: Contracts.IViewContentItemContract\r\n    ): Responses.IViewContentItemResponse<TContentItem> {\r\n        const itemResult = this.itemMapper.mapSingleItemFromResponse<TContentItem>(data);\r\n\r\n        return {\r\n            item: itemResult.item,\r\n            linkedItems: itemResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting multiple items\r\n     * @param data Response data\r\n     * @param queryConfig Query configuration\r\n     */\r\n    listContentItemsResponse<TContentItem extends IContentItem = IContentItem>(\r\n        data: Contracts.IListContentItemsContract\r\n    ): Responses.IListContentItemsResponse<TContentItem> {\r\n        const itemsResult = this.itemMapper.mapMultipleItemsFromResponse<TContentItem>(data);\r\n\r\n        return {\r\n            items: itemsResult.items,\r\n            pagination: this.mapPagination(data.pagination),\r\n            linkedItems: itemsResult.linkedItems\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting single taxonomy item\r\n     * @param data Response data\r\n     */\r\n    viewTaxonomyResponse(data: Contracts.IViewTaxonomyGroupContract): Responses.IViewTaxonomyResponse {\r\n        return {\r\n            taxonomy: this.taxonomyMapper.mapTaxonomy(data.system, data.terms)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting multiples taxonomies\r\n     * @param data Response data\r\n     */\r\n    listTaxonomiesResponse(data: Contracts.IListTaxonomyGroupsContract): Responses.IListTaxonomiesResponse {\r\n        return {\r\n            items: this.taxonomyMapper.mapTaxonomies(data.taxonomies),\r\n            pagination: this.mapPagination(data.pagination),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets response for getting single content type element\r\n     * @param data Response data\r\n     */\r\n    viewContentTypeElementResponse(\r\n        data: Contracts.IViewContentTypeElementContract\r\n    ): Responses.IViewContentTypeElementResponse {\r\n        return this.genericElementMapper.mapElement(data);\r\n    }\r\n\r\n    initializeContentSync(data: Contracts.IInitializeSyncContract): Responses.IInitializeSyncResponse {\r\n        return {\r\n            items: data.items.map((m) => this.syncMapper.mapContentItemDelta(m))\r\n        };\r\n    }\r\n\r\n    syncChanges(data: Contracts.ISyncChangesContract): Responses.ISyncChangesResponse {\r\n        return {\r\n            items: data.items.map((m) => this.syncMapper.mapContentItemDelta(m))\r\n        };\r\n    }\r\n\r\n    private mapPagination(paginationContract: Contracts.IPaginationContract): IPagination {\r\n        return {\r\n            skip: paginationContract.skip,\r\n            count: paginationContract.count,\r\n            limit: paginationContract.limit,\r\n            nextPage: paginationContract.next_page,\r\n            totalCount: paginationContract.total_count ?? null\r\n        };\r\n    }\r\n}\r\n", "import { HttpService } from '@kontent-ai/core-sdk';\r\n\r\nimport { IDeliveryClientConfig } from '../config';\r\nimport { IContentItem } from '../models';\r\nimport {\r\n    ElementQuery,\r\n    ItemsFeedQuery,\r\n    MultipleItemsQuery,\r\n    MultipleTypeQuery,\r\n    SingleItemQuery,\r\n    SingleTypeQuery,\r\n    TaxonomiesQuery,\r\n    TaxonomyQuery,\r\n    LanguagesQuery,\r\n    InitializeSyncQuery,\r\n    SyncChangesQuery\r\n} from '../query';\r\nimport { sdkInfo } from '../sdk-info.generated';\r\nimport { IMappingService, MappingService, QueryService } from '../services';\r\nimport { IDeliveryClient } from './idelivery-client.interface';\r\n\r\nexport class DeliveryClient implements IDeliveryClient {\r\n    private queryService: QueryService;\r\n    public mappingService: IMappingService;\r\n\r\n    /**\r\n     * Delivery client used to fetch data from Kontent.ai\r\n     * @constructor\r\n     * @param {IDeliveryClientConfig} config - The client configuration\r\n     */\r\n    constructor(protected config: IDeliveryClientConfig) {\r\n        if (!config) {\r\n            throw Error(`Delivery client configuration is not set`);\r\n        }\r\n\r\n        this.mappingService = new MappingService(config);\r\n        this.queryService = new QueryService(\r\n            config,\r\n            config.httpService ? config.httpService : new HttpService(),\r\n            {\r\n                host: sdkInfo.host,\r\n                name: sdkInfo.name,\r\n                version: sdkInfo.version\r\n            },\r\n            this.mappingService\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple languages\r\n     */\r\n    languages(): LanguagesQuery {\r\n        return new LanguagesQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple types\r\n     */\r\n    types(): MultipleTypeQuery {\r\n        return new MultipleTypeQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for single type\r\n     * @param {string} typeCodename - Codename of the type to fetch\r\n     */\r\n    type(typeCodename: string): SingleTypeQuery {\r\n        return new SingleTypeQuery(this.config, this.queryService, typeCodename);\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple items\r\n     */\r\n    items<TContentItem extends IContentItem = IContentItem>(): MultipleItemsQuery<TContentItem> {\r\n        return new MultipleItemsQuery<TContentItem>(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for single item\r\n     * @param {string} codename - Codename of item to fetch\r\n     */\r\n    item<TContentItem extends IContentItem = IContentItem>(codename: string): SingleItemQuery<TContentItem> {\r\n        return new SingleItemQuery<TContentItem>(this.config, this.queryService, codename);\r\n    }\r\n\r\n    /**\r\n     * Gets query for items feed. Executes single HTTP request only\r\n     */\r\n    itemsFeed<TContentItem extends IContentItem = IContentItem>(): ItemsFeedQuery<TContentItem> {\r\n        return new ItemsFeedQuery<TContentItem>(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for single taxonomy\r\n     * @param {string} codename - Codename of taxonomy to fetch\r\n     */\r\n    taxonomy(codename: string): TaxonomyQuery {\r\n        return new TaxonomyQuery(this.config, this.queryService, codename);\r\n    }\r\n\r\n    /**\r\n     * Gets query for multiple taxonomies\r\n     */\r\n    taxonomies(): TaxonomiesQuery {\r\n        return new TaxonomiesQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query for an element within a type\r\n     * @param {string} typeCodename - Codename of the type\r\n     * @param {string} elementCodename - Codename of the element\r\n     */\r\n    element(typeCodename: string, elementCodename: string): ElementQuery {\r\n        return new ElementQuery(this.config, this.queryService, typeCodename, elementCodename);\r\n    }\r\n\r\n    /**\r\n     * Gets query for initializing sync\r\n     */\r\n    initializeSync(): InitializeSyncQuery {\r\n        return new InitializeSyncQuery(this.config, this.queryService);\r\n    }\r\n\r\n    /**\r\n     * Gets query fetching delta updates of content items\r\n     */\r\n    syncChanges(): SyncChangesQuery {\r\n        return new SyncChangesQuery(this.config, this.queryService);\r\n    }\r\n}\r\n", "import { IDeliveryClientConfig } from '../config/delivery-configs';\r\nimport { DeliveryClient } from './delivery-client';\r\n\r\nexport function createDeliveryClient(config: IDeliveryClientConfig): DeliveryClient {\r\n    return new DeliveryClient(config);\r\n}\r\n", "import { Elements } from '../elements/elements';\r\nimport { ContentItemType, IContentItem, ILink, IRichTextImage } from '../models';\r\n\r\n/**\r\n * This class as a wrapper is required so we can pass\r\n * index as a reference and not a value\r\n */\r\n export class ParsedItemIndexReferenceWrapper {\r\n    constructor(public index: number) {}\r\n\r\n    increment(): void {\r\n        this.index++;\r\n    }\r\n}\r\n\r\nexport interface IParsedObjects {\r\n    links: ILinkObject[];\r\n    linkedItems: ILinkedItemContentObject[];\r\n    images: IImageObject[];\r\n}\r\n\r\n\r\nexport interface ILinkedItemContentObject {\r\n    dataType: string;\r\n    dataCodename: string;\r\n    itemType: ContentItemType;\r\n}\r\n\r\nexport interface ILinkObject {\r\n    dataItemId: string;\r\n}\r\n\r\nexport interface IImageObject {\r\n    imageId: string;\r\n}\r\n\r\nexport interface IParserElementAttribute {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\n\r\nexport interface IParserElement {\r\n    attributes: IParserElementAttribute[];\r\n    html?: string;\r\n    text?: string;\r\n    parentElement?: IParserElement;\r\n    tag: string;\r\n    setOuterHtml: (newHtml: string) => void;\r\n    setInnerHtml: (newHtml: string) => void;\r\n    setAttribute: (attributeName: string, attributeValue?: string) => void;\r\n    sourceElement: any;\r\n}\r\n\r\nexport interface IParseResolvers {\r\n    elementResolver: (element: IParserElement) => void;\r\n    genericElementResolver: (element: IParserElement) => void;\r\n    urlResolver: (element: IParserElement, linkId: string, linkText: string, link?: ILink) => void;\r\n    imageResolver: (element: IParserElement, imageId: string, image?: IRichTextImage) => void;\r\n    contentItemResolver: (element: IParserElement, linkedItemCodename: string, linkedItemIndex: number, linkedItem?: IContentItem) => void;\r\n}\r\n\r\nexport interface IAsyncParseResolvers {\r\n    elementResolverAsync: (element: IParserElement) => Promise<void>;\r\n    genericElementResolverAsync: (element: IParserElement) => Promise<void>;\r\n    urlResolverAsync: (element: IParserElement, linkId: string, linkText: string, link?: ILink) => Promise<void>;\r\n    imageResolverAsync: (element: IParserElement, imageId: string, image?: IRichTextImage) => Promise<void>;\r\n    contentItemResolverAsync: (element: IParserElement, linkedItemCodename: string, linkedItemIndex: number, linkedItem?: IContentItem) => Promise<void>;\r\n}\r\n\r\nexport interface IParserResult<TParserOutput> {\r\n    result: TParserOutput;\r\n    linkedItemCodenames: string[];\r\n    componentCodenames: string[];\r\n}\r\n\r\nexport interface IParser<TParserOutput> {\r\n    parse(\r\n        html: string,\r\n        mainRichTextElement: Elements.RichTextElement,\r\n        resolvers: IParseResolvers,\r\n        linkedItems: IContentItem[]\r\n    ): IParserResult<TParserOutput>;\r\n}\r\n\r\nexport interface IAsyncParser<TParserOutput> {\r\n    parseAsync(\r\n        html: string,\r\n        mainRichTextElement: Elements.RichTextElement,\r\n        resolvers: IAsyncParseResolvers,\r\n        linkedItems: IContentItem[]\r\n    ): Promise<IParserResult<TParserOutput>>;\r\n}\r\n", "\r\nexport const parserConfiguration = {\r\n    linkedItemWrapperElem: 'div',\r\n    modularContentElementData: {\r\n        type: 'application/kenticocloud',\r\n        dataType: 'data-type',\r\n        dataCodename: 'data-codename',\r\n        relAttribute: 'data-rel',\r\n        componentRel: 'component'\r\n    },\r\n    linkElementData: {\r\n        nodeName: 'a',\r\n        dataItemId: 'data-item-id',\r\n    },\r\n    imageElementData: {\r\n        nodeName: 'img',\r\n        dataImageId: 'data-image-id',\r\n        srcAttribute: 'src'\r\n    },\r\n    resolvedLinkedItemIndexAttribute: 'data-sdk-item-index',\r\n    resolvedAttribute: 'data-sdk-resolved'\r\n\r\n};\r\n", "import { Elements, ElementType } from '../elements';\r\nimport { IContentItem, ILink, IRichTextImage } from '../models';\r\nimport { IParserElement, IParserElementAttribute } from './parse-models';\r\n\r\nexport class ParserHelper {\r\n\r\n    public readonly sdkResolvedAttributeName: string = 'data-sdk-resolved';\r\n\r\n    getLinkedItem(linkedItems: IContentItem[], itemCodename: string): IContentItem | undefined {\r\n        if (!linkedItems) {\r\n            return undefined;\r\n        }\r\n        return linkedItems.find((m) => m.system.codename === itemCodename);\r\n    }\r\n\r\n    tryGetImage(\r\n        inputElement: Elements.RichTextElement,\r\n        linkedItems: IContentItem[],\r\n        imageId: string\r\n    ): IRichTextImage | undefined {\r\n        const elementImage = inputElement.images.find((m) => m.imageId === imageId);\r\n        if (elementImage) {\r\n            return elementImage;\r\n        }\r\n\r\n        // try to find image in all linked items\r\n        if (linkedItems) {\r\n            for (const linkedItem of linkedItems) {\r\n                for (const elementKey of Object.keys(linkedItem.elements)) {\r\n                    const element = linkedItem.elements[elementKey];\r\n                    if (element.type === ElementType.RichText) {\r\n                        const richTextElement = element as Elements.RichTextElement;\r\n                        const richTextElementImage = richTextElement.images.find((m) => m.imageId === imageId);\r\n                        if (richTextElementImage) {\r\n                            return richTextElementImage;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    tryGetLink(inputElement: Elements.RichTextElement, linkedItems: IContentItem[], linkId: string): ILink | undefined {\r\n        const elementLink = inputElement.links.find((m) => m.linkId === linkId);\r\n        if (elementLink) {\r\n            return elementLink;\r\n        }\r\n\r\n        // try to find link in all linked items\r\n        if (linkedItems) {\r\n            for (const linkedItem of linkedItems) {\r\n                for (const elementKey of Object.keys(linkedItem.elements)) {\r\n                    const element = linkedItem.elements[elementKey];\r\n                    if (element.type === ElementType.RichText) {\r\n                        const richTextElement = element as Elements.RichTextElement;\r\n                        const richTextElementLink = richTextElement.links.find((m) => m.linkId === linkId);\r\n                        if (richTextElementLink) {\r\n                            return richTextElementLink;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    convertToParserElement(element: Element): IParserElement {\r\n        const attributes: IParserElementAttribute[] = [];\r\n\r\n        for (let i = 0; i < element.attributes.length; i++) {\r\n            const attribute = element.attributes[i];\r\n\r\n            attributes.push({\r\n                name: attribute.name,\r\n                value: attribute.value\r\n            });\r\n        }\r\n\r\n        return {\r\n            tag: element.tagName,\r\n            setAttribute: (attributeName, attributeValue) => {\r\n                const attribute = element.attributes.getNamedItem(attributeName);\r\n                if (attribute) {\r\n                    attribute.value = attributeValue ?? '';\r\n                } else {\r\n                    element.setAttribute(attributeName, attributeValue ?? '');\r\n                }\r\n            },\r\n            setInnerHtml: (newHtml) => (element.innerHTML = newHtml),\r\n            setOuterHtml: (newHtml) => (element.outerHTML = newHtml),\r\n            html: element.innerHTML,\r\n            text: element.textContent ? element.textContent : undefined,\r\n            attributes: attributes,\r\n            parentElement: element.parentElement ? this.convertToParserElement(element.parentElement) : undefined,\r\n            sourceElement: element\r\n        };\r\n    }\r\n}\r\n\r\nexport const parserHelper = new ParserHelper();\r\n", "import {\r\n    IParsedObjects,\r\n    IImageObject,\r\n    ILinkedItemContentObject,\r\n    ILinkObject,\r\n    ParsedItemIndexReferenceWrapper,\r\n    IParserResult,\r\n    IAsyncParser,\r\n    IAsyncParseResolvers\r\n} from '../parse-models';\r\nimport { parserConfiguration } from '../parser-configuration';\r\nimport { ContentItemType, IContentItem } from '../../models';\r\nimport { parserHelper } from '../parser.helper';\r\nimport { Elements } from '../../elements';\r\n\r\nexport class AsyncBrowserParser implements IAsyncParser<string> {\r\n    async parseAsync(\r\n        html: string,\r\n        mainRichTextElement: Elements.RichTextElement,\r\n        resolvers: IAsyncParseResolvers,\r\n        linkedItems: IContentItem[]\r\n    ): Promise<IParserResult<string>> {\r\n        return await this.parseInternalAsync(\r\n            mainRichTextElement,\r\n            resolvers,\r\n            html,\r\n            linkedItems,\r\n            new ParsedItemIndexReferenceWrapper(0),\r\n            null\r\n        );\r\n    }\r\n\r\n    private async parseInternalAsync(\r\n        mainRichTextElement: Elements.RichTextElement,\r\n        resolvers: IAsyncParseResolvers,\r\n        html: string,\r\n        linkedItems: IContentItem[],\r\n        linkedItemIndex: ParsedItemIndexReferenceWrapper,\r\n        parentElement: Element | null\r\n    ): Promise<IParserResult<string>> {\r\n        const rootElement = this.createWrapperElement(html);\r\n\r\n        // get all linked items\r\n        const result = await this.processRichTextElementAsync(\r\n            mainRichTextElement,\r\n            resolvers,\r\n            rootElement.children,\r\n            {\r\n                links: [],\r\n                linkedItems: [],\r\n                images: []\r\n            },\r\n            linkedItems,\r\n            linkedItemIndex,\r\n            parentElement\r\n        );\r\n\r\n        return {\r\n            componentCodenames: result.linkedItems.filter((m) => m.itemType === 'component').map((m) => m.dataCodename),\r\n            linkedItemCodenames: result.linkedItems\r\n                .filter((m) => m.itemType === 'linkedItem')\r\n                .map((m) => m.dataCodename),\r\n            result: rootElement.innerHTML\r\n        };\r\n    }\r\n\r\n    private async processRichTextElementAsync(\r\n        mainRichTextElement: Elements.RichTextElement,\r\n        resolvers: IAsyncParseResolvers,\r\n        htmlCollection: HTMLCollection,\r\n        result: IParsedObjects,\r\n        linkedItems: IContentItem[],\r\n        linkedItemIndex: ParsedItemIndexReferenceWrapper,\r\n        parentElement: Element | null\r\n    ): Promise<IParsedObjects> {\r\n        if (!htmlCollection || htmlCollection.length === 0) {\r\n            // there are no more nodes\r\n        } else {\r\n            // extract objects\r\n            for (let i = 0; i < htmlCollection.length; i++) {\r\n                const element = htmlCollection[i];\r\n\r\n                await resolvers.elementResolverAsync(parserHelper.convertToParserElement(element));\r\n\r\n                const typeAttribute = element.attributes ? element.attributes.getNamedItem('type') : undefined;\r\n\r\n                // process linked items (modular items)\r\n                if (\r\n                    element.attributes &&\r\n                    typeAttribute &&\r\n                    typeAttribute.value &&\r\n                    typeAttribute.value.toLowerCase() ===\r\n                        parserConfiguration.modularContentElementData.type.toLowerCase()\r\n                ) {\r\n                    const dataCodenameAttribute = element.attributes.getNamedItem(\r\n                        parserConfiguration.modularContentElementData.dataCodename\r\n                    );\r\n                    const dataTypeAttribute = element.attributes.getNamedItem(\r\n                        parserConfiguration.modularContentElementData.dataType\r\n                    );\r\n\r\n                    if (!dataTypeAttribute) {\r\n                        throw Error('Missing data type attribute. This is likely an error caused by invalid response.');\r\n                    }\r\n\r\n                    const relAttribute = element.attributes.getNamedItem(\r\n                        parserConfiguration.modularContentElementData.relAttribute\r\n                    );\r\n\r\n                    let itemType: ContentItemType = 'linkedItem';\r\n\r\n                    if (\r\n                        relAttribute &&\r\n                        relAttribute.value === parserConfiguration.modularContentElementData.componentRel\r\n                    ) {\r\n                        itemType = 'component';\r\n                    }\r\n\r\n                    // prepare link item object\r\n                    const linkItemContentObject: ILinkedItemContentObject = {\r\n                        dataCodename: dataCodenameAttribute ? dataCodenameAttribute.value : '',\r\n                        dataType: dataTypeAttribute ? dataTypeAttribute.value : '',\r\n                        itemType: itemType\r\n                    };\r\n\r\n                    // replace html\r\n                    const elementParent = element.parentElement;\r\n\r\n                    if (!elementParent) {\r\n                        console.warn(\r\n                            `Could not replace linked item '${linkItemContentObject.dataCodename}' of '${linkItemContentObject.dataType}' because parent node is undefined. Please report this error if you are seeing this.`\r\n                        );\r\n                    } else {\r\n                        if (dataTypeAttribute.value === 'item') {\r\n                            // add to result\r\n                            result.linkedItems.push(linkItemContentObject);\r\n\r\n                            // resolve linked item\r\n                            await resolvers.contentItemResolverAsync(\r\n                                parserHelper.convertToParserElement(element),\r\n                                linkItemContentObject.dataCodename,\r\n                                linkedItemIndex.index,\r\n                                parserHelper.getLinkedItem(linkedItems, linkItemContentObject.dataCodename)\r\n                            );\r\n\r\n                            // increment index\r\n                            linkedItemIndex.increment();\r\n                        } else {\r\n                            console.warn(\r\n                                `Rich text element contains object with unsupported data type '${dataTypeAttribute.value}'`\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                // process links\r\n                else if (\r\n                    element.nodeName.toLowerCase() === parserConfiguration.linkElementData.nodeName.toLowerCase()\r\n                ) {\r\n                    const dataItemIdAttribute = element.attributes.getNamedItem(\r\n                        parserConfiguration.linkElementData.dataItemId\r\n                    );\r\n\r\n                    if (dataItemIdAttribute) {\r\n                        const linkObject: ILinkObject = {\r\n                            dataItemId: dataItemIdAttribute ? dataItemIdAttribute.value : ''\r\n                        };\r\n\r\n                        // add to result\r\n                        result.links.push(linkObject);\r\n\r\n                        // get original link text (the one inside <a> tag)\r\n                        const linkText = element.innerHTML;\r\n\r\n                        await resolvers.urlResolverAsync(\r\n                            parserHelper.convertToParserElement(element),\r\n                            linkObject.dataItemId,\r\n                            linkText,\r\n                            parserHelper.tryGetLink(mainRichTextElement, linkedItems, linkObject.dataItemId)\r\n                        );\r\n                    }\r\n                }\r\n                // process images\r\n                else if (\r\n                    element.nodeName.toLowerCase() === parserConfiguration.imageElementData.nodeName.toLowerCase()\r\n                ) {\r\n                    const dataImageIdAttribute = element.attributes.getNamedItem(\r\n                        parserConfiguration.imageElementData.dataImageId\r\n                    );\r\n\r\n                    // continue only if data image id is present. There could be regular img tags included\r\n                    if (dataImageIdAttribute) {\r\n                        const imageObj: IImageObject = {\r\n                            imageId: dataImageIdAttribute.value\r\n                        };\r\n\r\n                        result.images.push(imageObj);\r\n\r\n                        // resolve image\r\n                        await resolvers.imageResolverAsync(\r\n                            parserHelper.convertToParserElement(element),\r\n                            imageObj.imageId,\r\n                            parserHelper.tryGetImage(mainRichTextElement, linkedItems, imageObj.imageId)\r\n                        );\r\n                    }\r\n                } else {\r\n                    // process generic elements\r\n                    await resolvers.genericElementResolverAsync(parserHelper.convertToParserElement(element));\r\n                }\r\n\r\n                // recursively process child nodes\r\n                if (element.children && element.children.length > 0) {\r\n                    await this.processRichTextElementAsync(\r\n                        mainRichTextElement,\r\n                        resolvers,\r\n                        element.children,\r\n                        result,\r\n                        linkedItems,\r\n                        linkedItemIndex,\r\n                        parentElement\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private createWrapperElement(html: string): HTMLElement {\r\n        const element = document.createElement(parserConfiguration.linkedItemWrapperElem);\r\n        element.innerHTML = html;\r\n\r\n        return element;\r\n    }\r\n}\r\n\r\nexport const asyncBrowserParser = new AsyncBrowserParser();\r\n", "import {\r\n    IParsedObjects,\r\n    IImageObject,\r\n    ILinkedItemContentObject,\r\n    ILinkObject,\r\n    ParsedItemIndexReferenceWrapper,\r\n    IParser,\r\n    IParseResolvers,\r\n    IParserResult\r\n} from '../parse-models';\r\nimport { parserConfiguration } from '../parser-configuration';\r\nimport { ContentItemType, IContentItem } from '../../models';\r\nimport { parserHelper } from '../parser.helper';\r\nimport { Elements } from '../../elements';\r\n\r\nexport class BrowserParser implements IParser<string> {\r\n    parse(\r\n        html: string,\r\n        mainRichTextElement: Elements.RichTextElement,\r\n        resolvers: IParseResolvers,\r\n        linkedItems: IContentItem[]\r\n    ): IParserResult<string> {\r\n        return this.parseInternal(\r\n            mainRichTextElement,\r\n            resolvers,\r\n            html,\r\n            linkedItems,\r\n            new ParsedItemIndexReferenceWrapper(0),\r\n            null\r\n        );\r\n    }\r\n\r\n    private parseInternal(\r\n        mainRichTextElement: Elements.RichTextElement,\r\n        resolvers: IParseResolvers,\r\n        html: string,\r\n        linkedItems: IContentItem[],\r\n        linkedItemIndex: ParsedItemIndexReferenceWrapper,\r\n        parentElement: Element | null\r\n    ): IParserResult<string> {\r\n        const rootElement = this.createWrapperElement(html);\r\n\r\n        // get all linked items\r\n        const result = this.processRichTextElement(\r\n            mainRichTextElement,\r\n            resolvers,\r\n            rootElement.children,\r\n            {\r\n                links: [],\r\n                linkedItems: [],\r\n                images: []\r\n            },\r\n            linkedItems,\r\n            linkedItemIndex,\r\n            parentElement\r\n        );\r\n\r\n        return {\r\n            componentCodenames: result.linkedItems.filter((m) => m.itemType === 'component').map((m) => m.dataCodename),\r\n            linkedItemCodenames: result.linkedItems\r\n                .filter((m) => m.itemType === 'linkedItem')\r\n                .map((m) => m.dataCodename),\r\n            result: rootElement.innerHTML\r\n        };\r\n    }\r\n\r\n    private processRichTextElement(\r\n        mainRichTextElement: Elements.RichTextElement,\r\n        resolvers: IParseResolvers,\r\n        htmlCollection: HTMLCollection,\r\n        result: IParsedObjects,\r\n        linkedItems: IContentItem[],\r\n        linkedItemIndex: ParsedItemIndexReferenceWrapper,\r\n        parentElement: Element | null\r\n    ): IParsedObjects {\r\n        if (!htmlCollection || htmlCollection.length === 0) {\r\n            // there are no more nodes\r\n        } else {\r\n            // extract objects\r\n            for (let i = 0; i < htmlCollection.length; i++) {\r\n                const element = htmlCollection[i];\r\n\r\n                resolvers.elementResolver(parserHelper.convertToParserElement(element));\r\n\r\n                const typeAttribute = element.attributes ? element.attributes.getNamedItem('type') : undefined;\r\n\r\n                // process linked items (modular items)\r\n                if (\r\n                    element.attributes &&\r\n                    typeAttribute &&\r\n                    typeAttribute.value &&\r\n                    typeAttribute.value.toLowerCase() ===\r\n                        parserConfiguration.modularContentElementData.type.toLowerCase()\r\n                ) {\r\n                    const dataCodenameAttribute = element.attributes.getNamedItem(\r\n                        parserConfiguration.modularContentElementData.dataCodename\r\n                    );\r\n                    const dataTypeAttribute = element.attributes.getNamedItem(\r\n                        parserConfiguration.modularContentElementData.dataType\r\n                    );\r\n\r\n                    if (!dataTypeAttribute) {\r\n                        throw Error('Missing data type attribute. This is likely an error caused by invalid response.');\r\n                    }\r\n\r\n                    const relAttribute = element.attributes.getNamedItem(\r\n                        parserConfiguration.modularContentElementData.relAttribute\r\n                    );\r\n\r\n                    let itemType: ContentItemType = 'linkedItem';\r\n\r\n                    if (\r\n                        relAttribute &&\r\n                        relAttribute.value === parserConfiguration.modularContentElementData.componentRel\r\n                    ) {\r\n                        itemType = 'component';\r\n                    }\r\n\r\n                    // prepare link item object\r\n                    const linkItemContentObject: ILinkedItemContentObject = {\r\n                        dataCodename: dataCodenameAttribute ? dataCodenameAttribute.value : '',\r\n                        dataType: dataTypeAttribute ? dataTypeAttribute.value : '',\r\n                        itemType: itemType\r\n                    };\r\n\r\n                    const elementParent = element.parentElement;\r\n\r\n                    if (!elementParent) {\r\n                        console.warn(\r\n                            `Could not replace linked item '${linkItemContentObject.dataCodename}' of '${linkItemContentObject.dataType}' because parent node is undefined. Please report this error if you are seeing this.`\r\n                        );\r\n                    } else {\r\n                        if (dataTypeAttribute.value === 'item') {\r\n                            // add to result\r\n                            result.linkedItems.push(linkItemContentObject);\r\n\r\n                            // resolve linked item\r\n                            resolvers.contentItemResolver(\r\n                                parserHelper.convertToParserElement(element),\r\n                                linkItemContentObject.dataCodename,\r\n                                linkedItemIndex.index,\r\n                                parserHelper.getLinkedItem(linkedItems, linkItemContentObject.dataCodename)\r\n                            );\r\n\r\n                            // increment index\r\n                            linkedItemIndex.increment();\r\n                        } else {\r\n                            console.warn(\r\n                                `Rich text element contains object with unsupported data type '${dataTypeAttribute.value}'`\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                // process links\r\n                else if (\r\n                    element.nodeName.toLowerCase() === parserConfiguration.linkElementData.nodeName.toLowerCase()\r\n                ) {\r\n                    const dataItemIdAttribute = element.attributes.getNamedItem(\r\n                        parserConfiguration.linkElementData.dataItemId\r\n                    );\r\n\r\n                    if (dataItemIdAttribute) {\r\n                        const linkObject: ILinkObject = {\r\n                            dataItemId: dataItemIdAttribute ? dataItemIdAttribute.value : ''\r\n                        };\r\n\r\n                        // add to result\r\n                        result.links.push(linkObject);\r\n\r\n                        // get original link text (the one inside <a> tag)\r\n                        const linkText = element.innerHTML;\r\n\r\n                        resolvers.urlResolver(\r\n                            parserHelper.convertToParserElement(element),\r\n                            linkObject.dataItemId,\r\n                            linkText,\r\n                            parserHelper.tryGetLink(mainRichTextElement, linkedItems, linkObject.dataItemId)\r\n                        );\r\n                    }\r\n                }\r\n                // process images\r\n                else if (\r\n                    element.nodeName.toLowerCase() === parserConfiguration.imageElementData.nodeName.toLowerCase()\r\n                ) {\r\n                    const dataImageIdAttribute = element.attributes.getNamedItem(\r\n                        parserConfiguration.imageElementData.dataImageId\r\n                    );\r\n\r\n                    // continue only if data image id is present. There could be regular img tags included\r\n                    if (dataImageIdAttribute) {\r\n                        const imageObj: IImageObject = {\r\n                            imageId: dataImageIdAttribute.value\r\n                        };\r\n\r\n                        result.images.push(imageObj);\r\n\r\n                        // resolve image\r\n                        resolvers.imageResolver(\r\n                            parserHelper.convertToParserElement(element),\r\n                            imageObj.imageId,\r\n                            parserHelper.tryGetImage(mainRichTextElement, linkedItems, imageObj.imageId)\r\n                        );\r\n                    }\r\n                } else {\r\n                    // process generic elements\r\n                    resolvers.genericElementResolver(parserHelper.convertToParserElement(element));\r\n                }\r\n\r\n                // recursively process child nodes\r\n                if (element.children && element.children.length > 0) {\r\n                    this.processRichTextElement(\r\n                        mainRichTextElement,\r\n                        resolvers,\r\n                        element.children,\r\n                        result,\r\n                        linkedItems,\r\n                        linkedItemIndex,\r\n                        parentElement\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private createWrapperElement(html: string): HTMLElement {\r\n        const element = document.createElement(parserConfiguration.linkedItemWrapperElem);\r\n        element.innerHTML = html;\r\n\r\n        return element;\r\n    }\r\n}\r\n\r\nexport const browserParser = new BrowserParser();\r\n", "import { textHelper } from '../../utilities';\r\nimport { PropertyNameResolver } from '../../models';\r\n\r\nexport const camelCasePropertyNameResolver: PropertyNameResolver = (contentType, element) => {\r\n    return textHelper.addUnderscoreWhenStarsWithNumber(textHelper.removeZeroWidthCharacters(toCamelCase(element)));\r\n};\r\n\r\nfunction toCamelCase(str: string): string {\r\n    str = str.replace(textHelper.getPropertyNameRegex(), (_, c: string) => (c ? c.toUpperCase() : ''));\r\n    return str.substring(0, 1).toLowerCase() + str.substring(1);\r\n}\r\n", "import { textHelper } from '../../utilities';\r\nimport { PropertyNameResolver } from '../../models';\r\n\r\nexport const pascalCasePropertyNameResolver: PropertyNameResolver = (contentType, element) => {\r\n    return textHelper.addUnderscoreWhenStarsWithNumber(textHelper.removeZeroWidthCharacters(toPascalCase(element)));\r\n};\r\n\r\nfunction toPascalCase(str: string): string {\r\n    str = str.replace(textHelper.getPropertyNameRegex(), (_, c: string) => (c ? c.toUpperCase() : ''));\r\n    return str.substring(0, 1).toUpperCase() + str.substring(1);\r\n}\r\n", "import { textHelper } from '../../utilities';\r\nimport { PropertyNameResolver } from '../../models';\r\n\r\nexport const snakeCasePropertyNameResolver: PropertyNameResolver = (contentType, element) => {\r\n    return textHelper\r\n        .addUnderscoreWhenStarsWithNumber(textHelper.removeZeroWidthCharacters(toSnakeCase(element)))\r\n        .toLowerCase();\r\n};\r\n\r\nfunction toSnakeCase(str: string): string {\r\n    str = str.replace(textHelper.getPropertyNameRegex(), (_, c: string) => '_' + (c ? c.toLowerCase() : ''));\r\n    return removeEndUnderscore(removeStartUnderscore(str));\r\n}\r\n\r\nfunction removeStartUnderscore(str: string): string {\r\n    if (!str.startsWith('_')) {\r\n        return str;\r\n    }\r\n\r\n    return str.substring(1);\r\n}\r\n\r\nfunction removeEndUnderscore(str: string): string {\r\n    if (!str.endsWith('_')) {\r\n        return str;\r\n    }\r\n\r\n    return str.slice(0, -1);\r\n}\r\n", "import { IParser } from '../../../parser';\r\nimport { IRichTextResolver } from '../rich-text-resolver.models';\r\n\r\nexport abstract class BaseRichTextResolver<TInput, TOutput> implements IRichTextResolver<TInput, TOutput> {\r\n    constructor(private defaultParser: IParser<any>, private parser?: IParser<any>) {}\r\n\r\n    abstract resolveRichText(input: TInput): TOutput;\r\n\r\n    protected getParser(): IParser<any> {\r\n        if (this.parser) {\r\n            return this.parser;\r\n        }\r\n\r\n        return this.defaultParser;\r\n    }\r\n}\r\n", "import { IResolvedRichTextHtmlResult, IRichTextHtmlResolverInput } from '../rich-text-resolver.models';\r\nimport { browserParser, IParser, parserConfiguration, parserHelper } from '../../../parser';\r\nimport { BaseRichTextResolver } from '../base/base-rich-text-resolver';\r\n\r\nexport class RichTextHtmlResolver extends BaseRichTextResolver<\r\n    IRichTextHtmlResolverInput,\r\n    IResolvedRichTextHtmlResult\r\n> {\r\n    constructor(parser?: IParser<string>) {\r\n        super(browserParser, parser);\r\n    }\r\n\r\n    resolveRichText(input: IRichTextHtmlResolverInput): IResolvedRichTextHtmlResult {\r\n        return this.resolveRichTextInternal(input.element.value, input);\r\n    }\r\n\r\n    private resolveRichTextInternal(html: string, input: IRichTextHtmlResolverInput): IResolvedRichTextHtmlResult {\r\n        const parsedResult = super.getParser().parse(\r\n            html,\r\n            input.element,\r\n            {\r\n                elementResolver: (element) => {},\r\n                contentItemResolver: (element, itemCodename, linkedItemIndex, linkedItem) => {\r\n                    const parentElement = element.parentElement;\r\n\r\n                    if (parentElement) {\r\n                        const resolvedItemHtml = input.contentItemResolver\r\n                            ? input.contentItemResolver(itemCodename, linkedItem).contentItemHtml ?? ''\r\n                            : '';\r\n\r\n                        // resursively resolve HTML\r\n                        const innerHtml = this.resolveRichTextInternal(resolvedItemHtml, input).html;\r\n\r\n                        // set resolved html\r\n                        if (input.preserveResolvedObjectTags === true) {\r\n                            element.setInnerHtml(innerHtml);\r\n                        } else {\r\n                            element.setOuterHtml(innerHtml);\r\n                        }\r\n\r\n                        // set resolved attribute\r\n                        element.setAttribute(parserHelper.sdkResolvedAttributeName, '1');\r\n                    }\r\n                },\r\n                genericElementResolver: (element) => {\r\n                    // do nothing to generic elements\r\n                },\r\n                imageResolver: (element, imageId, image) => {\r\n                    // get image result\r\n                    const imageResult = input.imageResolver ? input.imageResolver(imageId, image) : undefined;\r\n\r\n                    // html has priority over url resolver\r\n                    if (imageResult?.imageHtml) {\r\n                        // replace link html\r\n                        element.setOuterHtml(imageResult.imageHtml);\r\n                    } else if (imageResult?.imageUrl) {\r\n                        // set link url only\r\n                        element.setAttribute(parserConfiguration.imageElementData.srcAttribute, imageResult.imageUrl);\r\n                    }\r\n                },\r\n                urlResolver: (element, linkId, linkText, link) => {\r\n                    if (input.urlResolver) {\r\n                        const urlResult = input.urlResolver(linkId, linkText, link);\r\n\r\n                        // html has priority over url resolver\r\n                        if (urlResult?.linkHtml) {\r\n                            // replace link html\r\n                            element.setOuterHtml(urlResult.linkHtml);\r\n                        } else if (urlResult?.linkUrl) {\r\n                            // set link url only\r\n                            element.setAttribute('href', urlResult.linkUrl);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            input.linkedItems ?? []\r\n        );\r\n\r\n        return {\r\n            componentCodenames: parsedResult.componentCodenames,\r\n            linkedItemCodenames: parsedResult.linkedItemCodenames,\r\n            html: parsedResult.result\r\n        };\r\n    }\r\n}\r\n\r\nexport const createRichTextHtmlResolver = (parser?: IParser<string>) => new RichTextHtmlResolver(parser);\r\n", "import {\r\n    IRichTextObjectResolverInput,\r\n    IRichTextObjectContentItemData,\r\n    IRichTextObjectLinkData,\r\n    IRichTextObjectImageData,\r\n    IRichTextObjectHtmlElementData,\r\n    IRichTextObjectItem,\r\n    IRichTextObjectAtribute,\r\n    IRichTextObjectResult\r\n} from '../rich-text-resolver.models';\r\nimport { browserParser, IParser, IParserElement } from '../../../parser';\r\nimport { guidHelper } from '../../../utilities';\r\nimport { BaseRichTextResolver } from '../base/base-rich-text-resolver';\r\n\r\nexport class RichTextObjectResolver extends BaseRichTextResolver<IRichTextObjectResolverInput, IRichTextObjectResult> {\r\n    private readonly sdkIdAttributeName: string = 'sdk-elem-id';\r\n    private readonly rootId: string = 'root';\r\n    private readonly defaultWrapTag: string = 'div';\r\n\r\n    constructor(parser?: IParser<string>) {\r\n        super(browserParser, parser);\r\n    }\r\n\r\n    resolveRichText(input: IRichTextObjectResolverInput): IRichTextObjectResult {\r\n        const result = this.resolveRichTextInternal(input.element.value, input, {\r\n            type: 'root',\r\n            attributes: [],\r\n            children: [],\r\n            data: {},\r\n            tag: input.wrapperTag ?? this.defaultWrapTag,\r\n            _sdkElemId: this.rootId\r\n        });\r\n\r\n        if (input.cleanSdkIds === true) {\r\n            this.cleanSdkIds(result);\r\n        }\r\n\r\n        return {\r\n            data: result\r\n        };\r\n    }\r\n\r\n    private resolveRichTextInternal(\r\n        html: string,\r\n        input: IRichTextObjectResolverInput,\r\n        result: IRichTextObjectItem\r\n    ): IRichTextObjectItem {\r\n        super.getParser().parse(\r\n            html,\r\n            input.element,\r\n            {\r\n                elementResolver: (element) => {\r\n                    // generate guid for each element\r\n                    element.setAttribute(this.sdkIdAttributeName, guidHelper.genereateGuid());\r\n                },\r\n                contentItemResolver: (element, itemCodename, linkedItemIndex, linkedItem) => {\r\n                    const data: IRichTextObjectContentItemData = {\r\n                        codename: itemCodename,\r\n                        item: linkedItem\r\n                    };\r\n\r\n                    const parentSdkId = this.getSdkIdFromElement(element.parentElement);\r\n                    const parentItem = this.findItemWithSdkId(parentSdkId, result);\r\n\r\n                    if (parentItem) {\r\n                        parentItem.children.push({\r\n                            type: 'linkedItem',\r\n                            attributes: this.getAttributes(element),\r\n                            tag: element.tag.toLowerCase(),\r\n                            data: data,\r\n                            children: [],\r\n                            _sdkElemId: this.getSdkIdFromElement(element)\r\n                        });\r\n                    }\r\n                },\r\n                genericElementResolver: (element) => {\r\n                    const data: IRichTextObjectHtmlElementData = {\r\n                        text: element.text ?? '',\r\n                        html: element.html ?? ''\r\n                    };\r\n\r\n                    const parentSdkId = this.getSdkIdFromElement(element.parentElement);\r\n                    const parentItem = this.findItemWithSdkId(parentSdkId, result);\r\n\r\n                    if (parentItem) {\r\n                        parentItem.children.push({\r\n                            type: 'htmlElement',\r\n                            attributes: this.getAttributes(element),\r\n                            tag: element.tag.toLowerCase(),\r\n                            data: data,\r\n                            children: [],\r\n                            _sdkElemId: this.getSdkIdFromElement(element)\r\n                        });\r\n                    }\r\n                },\r\n                imageResolver: (element, imageId, image) => {\r\n                    const data: IRichTextObjectImageData = {\r\n                        imageId: imageId,\r\n                        image: image\r\n                    };\r\n\r\n                    const parentSdkId = this.getSdkIdFromElement(element.parentElement);\r\n                    const parentItem = this.findItemWithSdkId(parentSdkId, result);\r\n\r\n                    if (parentItem) {\r\n                        parentItem.children.push({\r\n                            type: 'image',\r\n                            attributes: this.getAttributes(element),\r\n                            tag: element.tag.toLowerCase(),\r\n                            data: data,\r\n                            children: [],\r\n                            _sdkElemId: this.getSdkIdFromElement(element)\r\n                        });\r\n                    }\r\n                },\r\n                urlResolver: (element, linkId, linkText, link) => {\r\n                    const data: IRichTextObjectLinkData = {\r\n                        linkId: linkId,\r\n                        linkText: linkText,\r\n                        link: link\r\n                    };\r\n\r\n                    const parentSdkId = this.getSdkIdFromElement(element.parentElement);\r\n                    const parentItem = this.findItemWithSdkId(parentSdkId, result);\r\n\r\n                    if (parentItem) {\r\n                        parentItem.children.push({\r\n                            type: 'link',\r\n                            attributes: this.getAttributes(element),\r\n                            tag: element.tag.toLowerCase(),\r\n                            data: data,\r\n                            children: [],\r\n                            _sdkElemId: this.getSdkIdFromElement(element)\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            input.linkedItems ?? []\r\n        );\r\n\r\n        return result;\r\n    }\r\n\r\n    private findItemWithSdkId(sdkId: string, item: IRichTextObjectItem): IRichTextObjectItem | undefined {\r\n        if (item._sdkElemId === sdkId) {\r\n            return item;\r\n        }\r\n\r\n        for (const child of item.children) {\r\n            const foundItem = this.findItemWithSdkId(sdkId, child);\r\n            if (foundItem) {\r\n                return foundItem;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getAttributes(element: IParserElement | undefined): IRichTextObjectAtribute[] {\r\n        return element?.attributes ?? [];\r\n    }\r\n\r\n    private getSdkIdFromElement(element: IParserElement | undefined): string {\r\n        if (!element) {\r\n            return this.rootId;\r\n        }\r\n        const value = element.attributes.find((m) => m.name === this.sdkIdAttributeName)?.value ?? this.rootId;\r\n        return value;\r\n    }\r\n\r\n    private cleanSdkIds(item: IRichTextObjectItem): void {\r\n        item.attributes = item.attributes.filter((m) => m.name !== this.sdkIdAttributeName);\r\n        item._sdkElemId = '';\r\n\r\n        for (const child of item.children) {\r\n            this.cleanSdkIds(child);\r\n        }\r\n    }\r\n}\r\n\r\nexport const createRichTextObjectResolver = (parser?: IParser<any>) => new RichTextObjectResolver(parser);\r\n", "import { browserParser, IParser } from '../../../parser';\r\nimport { BaseRichTextResolver } from '../base/base-rich-text-resolver';\r\nimport { IRichTextObjectResolverInput, IRichTextJsonResult } from '../rich-text-resolver.models';\r\nimport { createRichTextObjectResolver } from './rich-text-object-resolver';\r\n\r\nexport class RichTextJsonResolver extends BaseRichTextResolver<\r\n    IRichTextObjectResolverInput,\r\n    IRichTextJsonResult\r\n> {\r\n    constructor(parser?: IParser<string>) {\r\n        super(browserParser, parser);\r\n    }\r\n\r\n    resolveRichText(input: IRichTextObjectResolverInput): IRichTextJsonResult {\r\n        const objectResult = createRichTextObjectResolver(this.getParser()).resolveRichText(input).data;\r\n\r\n        return {\r\n            json: JSON.stringify(objectResult)\r\n        };\r\n    }\r\n}\r\n\r\nexport const createRichTextJsonResolver = (parser?: IParser<any>) => new RichTextJsonResolver(parser);\r\n", "import { IAsyncParser } from '../../../parser';\r\nimport { IRichTextResolverAsync } from '../rich-text-resolver.models';\r\n\r\nexport abstract class BaseAsyncRichTextResolver<TInput, TOutput> implements IRichTextResolverAsync<TInput, TOutput> {\r\n    constructor(private defaultParser: IAsyncParser<any>, private parser?: IAsyncParser<any>) {}\r\n\r\n    abstract resolveRichTextAsync(input: TInput): Promise<TOutput>;\r\n\r\n    protected getAsyncParser(): IAsyncParser<any> {\r\n        if (this.parser) {\r\n            return this.parser;\r\n        }\r\n\r\n        return this.defaultParser;\r\n    }\r\n}\r\n", "import { IResolvedRichTextHtmlResult, IAsyncRichTextHtmlResolverInput } from '../rich-text-resolver.models';\r\nimport { asyncBrowserParser, IAsyncParser, parserConfiguration, parserHelper } from '../../../parser';\r\nimport { BaseAsyncRichTextResolver } from '../base/base-async-rich-text-resolver';\r\n\r\nexport class AsyncRichTextHtmlResolver extends BaseAsyncRichTextResolver<\r\n    IAsyncRichTextHtmlResolverInput,\r\n    IResolvedRichTextHtmlResult\r\n> {\r\n    constructor(parser?: IAsyncParser<string>) {\r\n        super(asyncBrowserParser, parser);\r\n    }\r\n\r\n    async resolveRichTextAsync(input: IAsyncRichTextHtmlResolverInput): Promise<IResolvedRichTextHtmlResult> {\r\n        return await this.resolveRichTextInternalAsync(input.element.value, input);\r\n    }\r\n\r\n    private async resolveRichTextInternalAsync(\r\n        html: string,\r\n        input: IAsyncRichTextHtmlResolverInput\r\n    ): Promise<IResolvedRichTextHtmlResult> {\r\n        const parsedResult = await super.getAsyncParser().parseAsync(\r\n            html,\r\n            input.element,\r\n            {\r\n                elementResolverAsync: async (element) => {},\r\n                contentItemResolverAsync: async (element, itemCodename, linkedItemIndex, linkedItem) => {\r\n                    const parentElement = element.parentElement;\r\n\r\n                    if (parentElement) {\r\n                        const resolvedItemHtml = input.contentItemResolverAsync\r\n                            ? (await input.contentItemResolverAsync(itemCodename, linkedItem)).contentItemHtml ?? ''\r\n                            : '';\r\n\r\n                        // resursively resolve HTML\r\n                        const innerHtml = (await this.resolveRichTextInternalAsync(resolvedItemHtml, input)).html;\r\n\r\n                        // set resolved html\r\n                        if (input.preserveResolvedObjectTags === true) {\r\n                            element.setInnerHtml(innerHtml);\r\n                        } else {\r\n                            element.setOuterHtml(innerHtml);\r\n                        }\r\n\r\n                        // set resolved attribute\r\n                        element.setAttribute(parserHelper.sdkResolvedAttributeName, '1');\r\n                    }\r\n                },\r\n                genericElementResolverAsync: async (element) => {\r\n                    // do nothing to generic elements\r\n                },\r\n                imageResolverAsync: async (element, imageId, image) => {\r\n                    // get image result\r\n                    const imageResult = input.imageResolverAsync\r\n                        ? await input.imageResolverAsync(imageId, image)\r\n                        : undefined;\r\n\r\n                    // html has priority over url resolver\r\n                    if (imageResult?.imageHtml) {\r\n                        // replace link html\r\n                        element.setOuterHtml(imageResult.imageHtml);\r\n                    } else if (imageResult?.imageUrl) {\r\n                        // set link url only\r\n                        element.setAttribute(parserConfiguration.imageElementData.srcAttribute, imageResult.imageUrl);\r\n                    }\r\n                },\r\n                urlResolverAsync: async (element, linkId, linkText, link) => {\r\n                    if (input.urlResolverAsync) {\r\n                        const urlResult = await input.urlResolverAsync(linkId, linkText, link);\r\n\r\n                        // html has priority over url resolver\r\n                        if (urlResult?.linkHtml) {\r\n                            // replace link html\r\n                            element.setOuterHtml(urlResult.linkHtml);\r\n                        } else if (urlResult?.linkUrl) {\r\n                            // set link url only\r\n                            element.setAttribute('href', urlResult.linkUrl);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            input.linkedItems ?? []\r\n        );\r\n\r\n        return {\r\n            componentCodenames: parsedResult.componentCodenames,\r\n            linkedItemCodenames: parsedResult.linkedItemCodenames,\r\n            html: parsedResult.result\r\n        };\r\n    }\r\n}\r\n\r\nexport const createAsyncRichTextHtmlResolver = (parser?: IAsyncParser<string>) => new AsyncRichTextHtmlResolver(parser);\r\n", "import { IQueryParameter } from '@kontent-ai/core-sdk';\r\n\r\nimport { Parameters } from '../models';\r\nimport { ImageCompression, ImageFitMode, ImageFormat } from './image.models';\r\n\r\nexport class ImageUrlTransformationBuilder {\r\n  private queryParams: IQueryParameter[] = [];\r\n  private readonly automaticFormatValue: string = 'format';\r\n\r\n  constructor(\r\n    /** Image url */\r\n    public imageUrl: string\r\n  ) { }\r\n\r\n  /**\r\n   * Used to add custom parameters to existing query string\r\n   * @param param Parameter (may or may not include value)\r\n   */\r\n  withCustomParam(param: string): this {\r\n    this.queryParams.push(\r\n      new Parameters.CustomParameter(param)\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The dpr transformation is used to serve correctly sized images for devices that expose a device pixel ratio.\r\n   * @param dpr A required DPR value.\r\n   */\r\n  withDpr(dpr: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('dpr', dpr.toString())\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the crop transformation that removes pixels from an image outside the specified rectangle.\r\n   * @param x Rectangle offset on the X-axis.\r\n   * @param y Rectangle offset on the Y-axis.\r\n   * @param width Rectangle width.\r\n   * @param height Rectangle height.\r\n   */\r\n  withRectangleCrop(x: number, y: number, width: number, height: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('rect', [x, y, width, height].join(','))\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the crop transformation centered on the specified point.\r\n   * @param x Focal point X coordinate.\r\n   * @param y Focal point Y coordinate.\r\n   * @param z Zoom of the transformation.\r\n   */\r\n  withFocalPointCrop(x: number, y: number, z: number): this {\r\n    this.withFitMode('crop');\r\n\r\n    this.queryParams.push(new Parameters.QueryParameter('crop', 'focalpoint'));\r\n    this.queryParams.push(new Parameters.QueryParameter('fp-x', x.toString()));\r\n    this.queryParams.push(new Parameters.QueryParameter('fp-y', y.toString()));\r\n    this.queryParams.push(new Parameters.QueryParameter('fp-z', z.toString()));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables WebP image support.\r\n   * @param compression Specifies the lossy or lossless compression.\r\n   */\r\n  withAutomaticFormat(backupFormat?: ImageFormat): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('auto', this.automaticFormatValue)\r\n    );\r\n\r\n    if (backupFormat) {\r\n      this.withFormat(backupFormat);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The fit transformation controls how the output image is fit to its target dimensions after resizing.\r\n   * @param fitMode Specifies the mode for the transformation.\r\n   */\r\n  withFitMode(fitMode: ImageFitMode): this {\r\n    this.queryParams.push(new Parameters.QueryParameter('fit', fitMode));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Specifies the compression mode for the WebP image transformations.\r\n   * @param compression Specifies the lossy or lossless compression.\r\n   */\r\n  withCompression(compression: ImageCompression): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter(\r\n        'lossless',\r\n        compression === 'lossless' ? 'true' : 'false'\r\n      )\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the quality parameter that enables control over the compression level for lossy file-formatted images.\r\n   * @param quality The required quality of the image.\r\n   */\r\n  withQuality(quality: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('q', quality.toString())\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The format transformation enables the source image to be converted (a.k.a., \"transcoded\") from\r\n   * one encoded format to another. This is very useful when the source image has been saved in a sub-optimal\r\n   * file format that hinders performance.\r\n   * @param format Target image file type.\r\n   */\r\n  withFormat(format: ImageFormat): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('fm', format)\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The height transformation enables dynamic height resizing based on pixels and percent values.\r\n   * @param height A required image height.\r\n   */\r\n  withHeight(height: number): this {\r\n    this.queryParams.push(\r\n      new Parameters.QueryParameter('h', height.toString())\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The width transformation enables dynamic width resizing based on pixels and percent values.\r\n   * @param width A required image width.\r\n   */\r\n  withWidth(width: number): this {\r\n    this.queryParams.push(new Parameters.QueryParameter('w', width.toString()));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets params applied to image\r\n   */\r\n  getParams(): IQueryParameter[] {\r\n    return this.queryParams;\r\n  }\r\n\r\n  /**\r\n   * Gets query string part of the image URL\r\n   */\r\n  getQueryString(): string {\r\n    let query: string = '';\r\n    this.queryParams.forEach(filter => {\r\n      if (query.indexOf('?') > -1) {\r\n        query = query + '&' + filter.getParam();\r\n      } else {\r\n        query = query + '?' + filter.getParam();\r\n      }\r\n    });\r\n\r\n    return query;\r\n  }\r\n\r\n  /**\r\n   * Gets full transformed url to image with parameters\r\n   */\r\n  getUrl(): string {\r\n    return this.imageUrl + this.getQueryString();\r\n  }\r\n}\r\n", "import { ImageUrlTransformationBuilder } from './image-url-transformation-builder';\r\n\r\nexport function transformImageUrl(url: string): ImageUrlTransformationBuilder {\r\n    return new ImageUrlTransformationBuilder(url);\r\n}\r\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAWA,WAAO,UAAU,SAAS,SAAS,MAAM,UAAU;AACjD,iBAAW,SAAS,MAAM,GAAG,EAAE,CAAC;AAChC,aAAO,CAAC;AAER,UAAI,CAAC;AAAM,eAAO;AAElB,cAAQ,UAAU;AAAA,QAChB,KAAK;AAAA,QACL,KAAK;AACL,iBAAO,SAAS;AAAA,QAEhB,KAAK;AAAA,QACL,KAAK;AACL,iBAAO,SAAS;AAAA,QAEhB,KAAK;AACL,iBAAO,SAAS;AAAA,QAEhB,KAAK;AACL,iBAAO,SAAS;AAAA,QAEhB,KAAK;AACL,iBAAO;AAAA,MACT;AAEA,aAAO,SAAS;AAAA,IAClB;AAAA;AAAA;;;ACrCA;AAAA;AAAA;AAEA,QAAI,MAAM,OAAO,UAAU;AAA3B,QACI;AASJ,aAAS,OAAO,OAAO;AACrB,UAAI;AACF,eAAO,mBAAmB,MAAM,QAAQ,OAAO,GAAG,CAAC;AAAA,MACrD,SAAS,GAAG;AACV,eAAO;AAAA,MACT;AAAA,IACF;AASA,aAASA,QAAO,OAAO;AACrB,UAAI;AACF,eAAO,mBAAmB,KAAK;AAAA,MACjC,SAAS,GAAG;AACV,eAAO;AAAA,MACT;AAAA,IACF;AASA,aAAS,YAAY,OAAO;AAC1B,UAAI,SAAS,wBACT,SAAS,CAAC,GACV;AAEJ,aAAO,OAAO,OAAO,KAAK,KAAK,GAAG;AAChC,YAAI,MAAM,OAAO,KAAK,CAAC,CAAC,GACpB,QAAQ,OAAO,KAAK,CAAC,CAAC;AAU1B,YAAI,QAAQ,QAAQ,UAAU,QAAQ,OAAO;AAAQ;AACrD,eAAO,GAAG,IAAI;AAAA,MAChB;AAEA,aAAO;AAAA,IACT;AAUA,aAAS,eAAe,KAAK,QAAQ;AACnC,eAAS,UAAU;AAEnB,UAAI,QAAQ,CAAC,GACT,OACA;AAKJ,UAAI,aAAa,OAAO;AAAQ,iBAAS;AAEzC,WAAK,OAAO,KAAK;AACf,YAAI,IAAI,KAAK,KAAK,GAAG,GAAG;AACtB,kBAAQ,IAAI,GAAG;AAMf,cAAI,CAAC,UAAU,UAAU,QAAQ,UAAU,SAAS,MAAM,KAAK,IAAI;AACjE,oBAAQ;AAAA,UACV;AAEA,gBAAMA,QAAO,GAAG;AAChB,kBAAQA,QAAO,KAAK;AAMpB,cAAI,QAAQ,QAAQ,UAAU;AAAM;AACpC,gBAAM,KAAK,MAAK,MAAK,KAAK;AAAA,QAC5B;AAAA,MACF;AAEA,aAAO,MAAM,SAAS,SAAS,MAAM,KAAK,GAAG,IAAI;AAAA,IACnD;AAKA,YAAQ,YAAY;AACpB,YAAQ,QAAQ;AAAA;AAAA;;;ACrHhB;AAAA;AAAA;AAEA,QAAI,WAAW;AAAf,QACI,KAAK;AADT,QAEI,sBAAsB;AAF1B,QAGI,SAAS;AAHb,QAII,UAAU;AAJd,QAKI,OAAO;AALX,QAMI,aAAa;AANjB,QAOI,qBAAqB;AAUzB,aAAS,SAAS,KAAK;AACrB,cAAQ,MAAM,MAAM,IAAI,SAAS,EAAE,QAAQ,qBAAqB,EAAE;AAAA,IACpE;AAcA,QAAI,QAAQ;AAAA,MACV,CAAC,KAAK,MAAM;AAAA;AAAA,MACZ,CAAC,KAAK,OAAO;AAAA;AAAA,MACb,SAAS,SAAS,SAAS,KAAK;AAC9B,eAAO,UAAU,IAAI,QAAQ,IAAI,QAAQ,QAAQ,OAAO,GAAG,IAAI;AAAA,MACjE;AAAA,MACA,CAAC,KAAK,UAAU;AAAA;AAAA,MAChB,CAAC,KAAK,QAAQ,CAAC;AAAA;AAAA,MACf,CAAC,KAAK,QAAQ,QAAW,GAAG,CAAC;AAAA;AAAA,MAC7B,CAAC,WAAW,QAAQ,QAAW,CAAC;AAAA;AAAA,MAChC,CAAC,KAAK,YAAY,QAAW,GAAG,CAAC;AAAA;AAAA,IACnC;AAUA,QAAI,SAAS,EAAE,MAAM,GAAG,OAAO,EAAE;AAcjC,aAAS,UAAU,KAAK;AACtB,UAAI;AAEJ,UAAI,OAAO,WAAW;AAAa,oBAAY;AAAA,eACtC,OAAO,WAAW;AAAa,oBAAY;AAAA,eAC3C,OAAO,SAAS;AAAa,oBAAY;AAAA;AAC7C,oBAAY,CAAC;AAElB,UAAI,WAAW,UAAU,YAAY,CAAC;AACtC,YAAM,OAAO;AAEb,UAAI,mBAAmB,CAAC,GACpB,OAAO,OAAO,KACd;AAEJ,UAAI,YAAY,IAAI,UAAU;AAC5B,2BAAmB,IAAI,IAAI,SAAS,IAAI,QAAQ,GAAG,CAAC,CAAC;AAAA,MACvD,WAAW,aAAa,MAAM;AAC5B,2BAAmB,IAAI,IAAI,KAAK,CAAC,CAAC;AAClC,aAAK,OAAO;AAAQ,iBAAO,iBAAiB,GAAG;AAAA,MACjD,WAAW,aAAa,MAAM;AAC5B,aAAK,OAAO,KAAK;AACf,cAAI,OAAO;AAAQ;AACnB,2BAAiB,GAAG,IAAI,IAAI,GAAG;AAAA,QACjC;AAEA,YAAI,iBAAiB,YAAY,QAAW;AAC1C,2BAAiB,UAAU,QAAQ,KAAK,IAAI,IAAI;AAAA,QAClD;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AASA,aAAS,UAAU,QAAQ;AACzB,aACE,WAAW,WACX,WAAW,UACX,WAAW,WACX,WAAW,YACX,WAAW,SACX,WAAW;AAAA,IAEf;AAkBA,aAAS,gBAAgB,SAAS,UAAU;AAC1C,gBAAU,SAAS,OAAO;AAC1B,gBAAU,QAAQ,QAAQ,QAAQ,EAAE;AACpC,iBAAW,YAAY,CAAC;AAExB,UAAI,QAAQ,WAAW,KAAK,OAAO;AACnC,UAAI,WAAW,MAAM,CAAC,IAAI,MAAM,CAAC,EAAE,YAAY,IAAI;AACnD,UAAI,iBAAiB,CAAC,CAAC,MAAM,CAAC;AAC9B,UAAI,eAAe,CAAC,CAAC,MAAM,CAAC;AAC5B,UAAI,eAAe;AACnB,UAAI;AAEJ,UAAI,gBAAgB;AAClB,YAAI,cAAc;AAChB,iBAAO,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACpC,yBAAe,MAAM,CAAC,EAAE,SAAS,MAAM,CAAC,EAAE;AAAA,QAC5C,OAAO;AACL,iBAAO,MAAM,CAAC,IAAI,MAAM,CAAC;AACzB,yBAAe,MAAM,CAAC,EAAE;AAAA,QAC1B;AAAA,MACF,OAAO;AACL,YAAI,cAAc;AAChB,iBAAO,MAAM,CAAC,IAAI,MAAM,CAAC;AACzB,yBAAe,MAAM,CAAC,EAAE;AAAA,QAC1B,OAAO;AACL,iBAAO,MAAM,CAAC;AAAA,QAChB;AAAA,MACF;AAEA,UAAI,aAAa,SAAS;AACxB,YAAI,gBAAgB,GAAG;AACrB,iBAAO,KAAK,MAAM,CAAC;AAAA,QACrB;AAAA,MACF,WAAW,UAAU,QAAQ,GAAG;AAC9B,eAAO,MAAM,CAAC;AAAA,MAChB,WAAW,UAAU;AACnB,YAAI,gBAAgB;AAClB,iBAAO,KAAK,MAAM,CAAC;AAAA,QACrB;AAAA,MACF,WAAW,gBAAgB,KAAK,UAAU,SAAS,QAAQ,GAAG;AAC5D,eAAO,MAAM,CAAC;AAAA,MAChB;AAEA,aAAO;AAAA,QACL;AAAA,QACA,SAAS,kBAAkB,UAAU,QAAQ;AAAA,QAC7C;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAUA,aAAS,QAAQ,UAAU,MAAM;AAC/B,UAAI,aAAa;AAAI,eAAO;AAE5B,UAAI,QAAQ,QAAQ,KAAK,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE,EAAE,OAAO,SAAS,MAAM,GAAG,CAAC,GACvE,IAAI,KAAK,QACT,OAAO,KAAK,IAAI,CAAC,GACjB,UAAU,OACV,KAAK;AAET,aAAO,KAAK;AACV,YAAI,KAAK,CAAC,MAAM,KAAK;AACnB,eAAK,OAAO,GAAG,CAAC;AAAA,QAClB,WAAW,KAAK,CAAC,MAAM,MAAM;AAC3B,eAAK,OAAO,GAAG,CAAC;AAChB;AAAA,QACF,WAAW,IAAI;AACb,cAAI,MAAM;AAAG,sBAAU;AACvB,eAAK,OAAO,GAAG,CAAC;AAChB;AAAA,QACF;AAAA,MACF;AAEA,UAAI;AAAS,aAAK,QAAQ,EAAE;AAC5B,UAAI,SAAS,OAAO,SAAS;AAAM,aAAK,KAAK,EAAE;AAE/C,aAAO,KAAK,KAAK,GAAG;AAAA,IACtB;AAgBA,aAAS,IAAI,SAAS,UAAU,QAAQ;AACtC,gBAAU,SAAS,OAAO;AAC1B,gBAAU,QAAQ,QAAQ,QAAQ,EAAE;AAEpC,UAAI,EAAE,gBAAgB,MAAM;AAC1B,eAAO,IAAI,IAAI,SAAS,UAAU,MAAM;AAAA,MAC1C;AAEA,UAAI,UAAU,WAAWC,QAAO,aAAa,OAAO,KAChD,eAAe,MAAM,MAAM,GAC3B,OAAO,OAAO,UACd,MAAM,MACN,IAAI;AAaR,UAAI,aAAa,QAAQ,aAAa,MAAM;AAC1C,iBAAS;AACT,mBAAW;AAAA,MACb;AAEA,UAAI,UAAU,eAAe,OAAO;AAAQ,iBAAS,GAAG;AAExD,iBAAW,UAAU,QAAQ;AAK7B,kBAAY,gBAAgB,WAAW,IAAI,QAAQ;AACnD,iBAAW,CAAC,UAAU,YAAY,CAAC,UAAU;AAC7C,UAAI,UAAU,UAAU,WAAW,YAAY,SAAS;AACxD,UAAI,WAAW,UAAU,YAAY,SAAS,YAAY;AAC1D,gBAAU,UAAU;AAMpB,UACE,UAAU,aAAa,YACrB,UAAU,iBAAiB,KAAK,mBAAmB,KAAK,OAAO,MAChE,CAAC,UAAU,YACT,UAAU,YACT,UAAU,eAAe,KACzB,CAAC,UAAU,IAAI,QAAQ,IAC3B;AACA,qBAAa,CAAC,IAAI,CAAC,QAAQ,UAAU;AAAA,MACvC;AAEA,aAAO,IAAI,aAAa,QAAQ,KAAK;AACnC,sBAAc,aAAa,CAAC;AAE5B,YAAI,OAAO,gBAAgB,YAAY;AACrC,oBAAU,YAAY,SAAS,GAAG;AAClC;AAAA,QACF;AAEA,QAAAA,SAAQ,YAAY,CAAC;AACrB,cAAM,YAAY,CAAC;AAEnB,YAAIA,WAAUA,QAAO;AACnB,cAAI,GAAG,IAAI;AAAA,QACb,WAAW,aAAa,OAAOA,QAAO;AACpC,kBAAQA,WAAU,MACd,QAAQ,YAAYA,MAAK,IACzB,QAAQ,QAAQA,MAAK;AAEzB,cAAI,CAAC,OAAO;AACV,gBAAI,aAAa,OAAO,YAAY,CAAC,GAAG;AACtC,kBAAI,GAAG,IAAI,QAAQ,MAAM,GAAG,KAAK;AACjC,wBAAU,QAAQ,MAAM,QAAQ,YAAY,CAAC,CAAC;AAAA,YAChD,OAAO;AACL,kBAAI,GAAG,IAAI,QAAQ,MAAM,KAAK;AAC9B,wBAAU,QAAQ,MAAM,GAAG,KAAK;AAAA,YAClC;AAAA,UACF;AAAA,QACF,WAAY,QAAQA,OAAM,KAAK,OAAO,GAAI;AACxC,cAAI,GAAG,IAAI,MAAM,CAAC;AAClB,oBAAU,QAAQ,MAAM,GAAG,MAAM,KAAK;AAAA,QACxC;AAEA,YAAI,GAAG,IAAI,IAAI,GAAG,MAChB,YAAY,YAAY,CAAC,IAAI,SAAS,GAAG,KAAK,KAAK;AAOrD,YAAI,YAAY,CAAC;AAAG,cAAI,GAAG,IAAI,IAAI,GAAG,EAAE,YAAY;AAAA,MACtD;AAOA,UAAI;AAAQ,YAAI,QAAQ,OAAO,IAAI,KAAK;AAKxC,UACI,YACC,SAAS,WACT,IAAI,SAAS,OAAO,CAAC,MAAM,QAC1B,IAAI,aAAa,MAAM,SAAS,aAAa,KACjD;AACA,YAAI,WAAW,QAAQ,IAAI,UAAU,SAAS,QAAQ;AAAA,MACxD;AAMA,UAAI,IAAI,SAAS,OAAO,CAAC,MAAM,OAAO,UAAU,IAAI,QAAQ,GAAG;AAC7D,YAAI,WAAW,MAAM,IAAI;AAAA,MAC3B;AAOA,UAAI,CAAC,SAAS,IAAI,MAAM,IAAI,QAAQ,GAAG;AACrC,YAAI,OAAO,IAAI;AACf,YAAI,OAAO;AAAA,MACb;AAKA,UAAI,WAAW,IAAI,WAAW;AAE9B,UAAI,IAAI,MAAM;AACZ,gBAAQ,IAAI,KAAK,QAAQ,GAAG;AAE5B,YAAI,CAAC,OAAO;AACV,cAAI,WAAW,IAAI,KAAK,MAAM,GAAG,KAAK;AACtC,cAAI,WAAW,mBAAmB,mBAAmB,IAAI,QAAQ,CAAC;AAElE,cAAI,WAAW,IAAI,KAAK,MAAM,QAAQ,CAAC;AACvC,cAAI,WAAW,mBAAmB,mBAAmB,IAAI,QAAQ,CAAC;AAAA,QACpE,OAAO;AACL,cAAI,WAAW,mBAAmB,mBAAmB,IAAI,IAAI,CAAC;AAAA,QAChE;AAEA,YAAI,OAAO,IAAI,WAAW,IAAI,WAAU,MAAK,IAAI,WAAW,IAAI;AAAA,MAClE;AAEA,UAAI,SAAS,IAAI,aAAa,WAAW,UAAU,IAAI,QAAQ,KAAK,IAAI,OACpE,IAAI,WAAU,OAAM,IAAI,OACxB;AAKJ,UAAI,OAAO,IAAI,SAAS;AAAA,IAC1B;AAeA,aAAS,IAAI,MAAM,OAAO,IAAI;AAC5B,UAAI,MAAM;AAEV,cAAQ,MAAM;AAAA,QACZ,KAAK;AACH,cAAI,aAAa,OAAO,SAAS,MAAM,QAAQ;AAC7C,qBAAS,MAAM,GAAG,OAAO,KAAK;AAAA,UAChC;AAEA,cAAI,IAAI,IAAI;AACZ;AAAA,QAEF,KAAK;AACH,cAAI,IAAI,IAAI;AAEZ,cAAI,CAAC,SAAS,OAAO,IAAI,QAAQ,GAAG;AAClC,gBAAI,OAAO,IAAI;AACf,gBAAI,IAAI,IAAI;AAAA,UACd,WAAW,OAAO;AAChB,gBAAI,OAAO,IAAI,WAAU,MAAK;AAAA,UAChC;AAEA;AAAA,QAEF,KAAK;AACH,cAAI,IAAI,IAAI;AAEZ,cAAI,IAAI;AAAM,qBAAS,MAAK,IAAI;AAChC,cAAI,OAAO;AACX;AAAA,QAEF,KAAK;AACH,cAAI,IAAI,IAAI;AAEZ,cAAI,KAAK,KAAK,KAAK,GAAG;AACpB,oBAAQ,MAAM,MAAM,GAAG;AACvB,gBAAI,OAAO,MAAM,IAAI;AACrB,gBAAI,WAAW,MAAM,KAAK,GAAG;AAAA,UAC/B,OAAO;AACL,gBAAI,WAAW;AACf,gBAAI,OAAO;AAAA,UACb;AAEA;AAAA,QAEF,KAAK;AACH,cAAI,WAAW,MAAM,YAAY;AACjC,cAAI,UAAU,CAAC;AACf;AAAA,QAEF,KAAK;AAAA,QACL,KAAK;AACH,cAAI,OAAO;AACT,gBAAI,OAAO,SAAS,aAAa,MAAM;AACvC,gBAAI,IAAI,IAAI,MAAM,OAAO,CAAC,MAAM,OAAO,OAAO,QAAQ;AAAA,UACxD,OAAO;AACL,gBAAI,IAAI,IAAI;AAAA,UACd;AACA;AAAA,QAEF,KAAK;AAAA,QACL,KAAK;AACH,cAAI,IAAI,IAAI,mBAAmB,KAAK;AACpC;AAAA,QAEF,KAAK;AACH,cAAI,QAAQ,MAAM,QAAQ,GAAG;AAE7B,cAAI,CAAC,OAAO;AACV,gBAAI,WAAW,MAAM,MAAM,GAAG,KAAK;AACnC,gBAAI,WAAW,mBAAmB,mBAAmB,IAAI,QAAQ,CAAC;AAElE,gBAAI,WAAW,MAAM,MAAM,QAAQ,CAAC;AACpC,gBAAI,WAAW,mBAAmB,mBAAmB,IAAI,QAAQ,CAAC;AAAA,UACpE,OAAO;AACL,gBAAI,WAAW,mBAAmB,mBAAmB,KAAK,CAAC;AAAA,UAC7D;AAAA,MACJ;AAEA,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAI,MAAM,MAAM,CAAC;AAEjB,YAAI,IAAI,CAAC;AAAG,cAAI,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE,YAAY;AAAA,MACpD;AAEA,UAAI,OAAO,IAAI,WAAW,IAAI,WAAU,MAAK,IAAI,WAAW,IAAI;AAEhE,UAAI,SAAS,IAAI,aAAa,WAAW,UAAU,IAAI,QAAQ,KAAK,IAAI,OACpE,IAAI,WAAU,OAAM,IAAI,OACxB;AAEJ,UAAI,OAAO,IAAI,SAAS;AAExB,aAAO;AAAA,IACT;AASA,aAASC,UAAS,WAAW;AAC3B,UAAI,CAAC,aAAa,eAAe,OAAO;AAAW,oBAAY,GAAG;AAElE,UAAI,OACA,MAAM,MACN,OAAO,IAAI,MACX,WAAW,IAAI;AAEnB,UAAI,YAAY,SAAS,OAAO,SAAS,SAAS,CAAC,MAAM;AAAK,oBAAY;AAE1E,UAAI,SACF,YACE,IAAI,YAAY,IAAI,WAAY,UAAU,IAAI,QAAQ,IAAI,OAAO;AAErE,UAAI,IAAI,UAAU;AAChB,kBAAU,IAAI;AACd,YAAI,IAAI;AAAU,oBAAU,MAAK,IAAI;AACrC,kBAAU;AAAA,MACZ,WAAW,IAAI,UAAU;AACvB,kBAAU,MAAK,IAAI;AACnB,kBAAU;AAAA,MACZ,WACE,IAAI,aAAa,WACjB,UAAU,IAAI,QAAQ,KACtB,CAAC,QACD,IAAI,aAAa,KACjB;AAKA,kBAAU;AAAA,MACZ;AAOA,UAAI,KAAK,KAAK,SAAS,CAAC,MAAM,OAAQ,KAAK,KAAK,IAAI,QAAQ,KAAK,CAAC,IAAI,MAAO;AAC3E,gBAAQ;AAAA,MACV;AAEA,gBAAU,OAAO,IAAI;AAErB,cAAQ,aAAa,OAAO,IAAI,QAAQ,UAAU,IAAI,KAAK,IAAI,IAAI;AACnE,UAAI;AAAO,kBAAU,QAAQ,MAAM,OAAO,CAAC,IAAI,MAAK,QAAQ;AAE5D,UAAI,IAAI;AAAM,kBAAU,IAAI;AAE5B,aAAO;AAAA,IACT;AAEA,QAAI,YAAY,EAAE,KAAU,UAAUA,UAAS;AAM/C,QAAI,kBAAkB;AACtB,QAAI,WAAW;AACf,QAAI,WAAW;AACf,QAAI,KAAK;AAET,WAAO,UAAU;AAAA;AAAA;;;AC1kBX,IAAO,YAAP,MAAgB;;;;;;EAOlB,gBAAgB,KAAa,SAA2B;AACpD,QAAI,SAAS;AACT,cAAQ,QAAQ,CAAAC,YAAS;AACrB,YAAI,IAAI,QAAQ,GAAG,IAAI,IAAI;AACvB,iBAAO;eACJ;AACH,iBAAO;;AAGX,eAAOA,QAAO,SAAQ;MAC1B,CAAC;;AAEL,WAAO;EACX;;AAGG,IAAM,YAAY,IAAI,UAAS;;;ACrBhC,IAAO,eAAP,MAAmB;EAAzB,cAAA;AAKqB,SAAA,mBAA2B;EAWhD;;;;EANI,eAAe,MAAc;AACzB,WAAO;MACH,QAAQ,KAAK;MACb,OAAO,GAAG,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,OAAO;;EAExD;;AAGG,IAAM,eAAe,IAAI,aAAY;;;ACnBtC,SAAU,gCAAgC,UAAuB;AACnE,QAAM,UAAqB,CAAA;AAE3B,aAAW,aAAa,OAAO,KAAK,SAAS,OAAO,GAAG;AACnD,YAAQ,KAAK;MACT,QAAQ;MACR,OAAO,SAAS,QAAQ,SAAS;KACpC;;AAGL,SAAO;AACX;;;ACTM,IAAO,cAAP,MAAkB;EAAxB,cAAA;AACoB,SAAA,gCAAwC;AACxC,SAAA,uBAA+B;AAC/B,SAAA,0BAAoC,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AACjE,SAAA,uBAAuB;MACnC,WAAW;MACX,gBAAgB;MAChB,aAAa;MACb,eAAe,CAAC,UAAe,KAAK,qBAAqB,KAAK;;EA4LtE;EAzLI,oBAAoB,MAInB;;AAKG,QAAI,KAAK,SAAS,KAAK,MAAM,SAAS;AAClC,UAAa,KAAK,MAAM,QAAS,WAAW,KAAK,6BAA6B,GAAG;AAE7E,eAAO;UACH,UAAU;UACV,WAAW;UACX,YAAY;;;;AAKxB,UAAM,gBAAyB,KAAK,cAAc,gBAC5C,KAAK,cAAc,cAAc,KAAK,KAAK,IAC3C,KAAK,qBAAqB,cAAc,KAAK,KAAK;AAExD,QAAI,CAAC,eAAe;AAEhB,aAAO;QACH,UAAU;QACV,WAAW;QACX,YAAY;;;AAIpB,UAAM,cAAsB,KAAA,KAAK,cAAc,iBAAW,QAAA,OAAA,SAAA,KAAI,KAAK,qBAAqB;AAExF,UAAM,oBACF,KAAK,gBAAgB;AAEzB,QAAI,mBAAmB;AAEnB,aAAO;QACH,UAAU;QACV,WAAW;QACX;;;AAIR,UAAM,cAAkC,KAAK,8BAA8B,KAAK,KAAK;AAErF,QAAI,aAAa;AAEb,aAAO;QACH,UAAU;QACV,WAAW;QACX;;;AAKR,UAAM,aAAa,KAAK,mBACpB,KAAA,KAAK,cAAc,eAAS,QAAA,OAAA,SAAA,KAAI,KAAK,qBAAqB,YAC1D,KAAA,KAAK,cAAc,oBAAc,QAAA,OAAA,SAAA,KAAI,KAAK,qBAAqB,gBAC/D,KAAK,YAAY;AAGrB,WAAO;MACH,UAAU;MACV,WAAW;MACX;;EAER;EAEA,oCAAoC,cAAoC;AACpE,QAAI,CAAC,cAAc;AACf,aAAO,KAAK;;AAGhB,WAAO;EACX;EAEA,eACI,WACA,yBAA+B;AAK/B,UAAM,QAAQ,UAAU,QAAO;AAC/B,UAAM,OAAM,oBAAI,KAAI,GAAG,QAAO;AAE9B,UAAM,iBAAiB,MAAM;AAE7B,WAAO;MACH,UAAU,iBAAiB;MAC3B;;EAER;EAEQ,kBAAkB,WAAoB,gBAAwB,eAAqB;AACvF,QAAI,CAAC,WAAW;AACZ,aAAO,iBAAiB,KAAK,IAAI,GAAG,aAAa;;AAGrD,UAAM,OAAe,MAAM;AAC3B,UAAM,KAAa,MAAM,iBAAiB,KAAK,IAAI,GAAG,aAAa;AAEnE,WAAO,KAAK,yBAAyB,MAAM,EAAE;EACjD;EAEQ,qBAAqB,OAAU;AACnC,UAAM,aAAa,KAAK,iBAAiB,KAAK;AAE9C,QAAI,CAAC,YAAY;AAEb,aAAO;;AAGX,UAAM,aAAqB,KAAK,uBAAuB,KAAK;AAC5D,UAAM,qBAA8B,KAAK,mBAAmB,YAAY,KAAK,uBAAuB;AAEpG,QAAI,oBAAoB;AACpB,aAAO;;AAGX,WAAO;EACX;EAEQ,8BAA8B,OAAU;AAC5C,UAAM,aAAa,KAAK,iBAAiB,KAAK;AAE9C,QAAI,CAAC,cAAc,CAAC,WAAW,UAAU;AACrC,aAAO;;AAGX,UAAM,UAAqB,gCAAgC,WAAW,QAAQ;AAE9E,UAAM,mBAAmB,QAAQ,KAC7B,CAAC,MAAM,EAAE,OAAO,YAAW,MAAO,KAAK,qBAAqB,YAAW,CAAE;AAE7E,QAAI,CAAC,kBAAkB;AACnB,aAAO;;AAGX,UAAM,iBAAiB,CAAC,iBAAiB;AAEzC,WAAO,iBAAiB;EAC5B;EAEQ,mBAAmB,YAAoB,0BAAkC;AAC7E,WAAO,yBAAyB,SAAS,UAAU;EACvD;EAEQ,uBAAuB,OAAU;AACrC,UAAM,aAAa,KAAK,iBAAiB,KAAK;AAE9C,QAAI,CAAC,cAAc,CAAC,WAAW,UAAU;AACrC,aAAO;;AAGX,WAAO,WAAW,SAAS;EAC/B;EAEQ,iBAAiB,OAAU;AAC/B,QAAI,CAAC,OAAO;AACR,aAAO;;AAGX,QAAI,MAAM,cAAc;AACpB,aAAO;;AAGX,UAAM,gBAAgB,MAAM;AAC5B,QAAI,iBAAiB,cAAc,cAAc;AAC7C,aAAO;;AAGX,WAAO;EACX;;;;EAKQ,yBAAyB,KAAa,KAAW;AACrD,WAAO,KAAK,MAAM,KAAK,OAAM,KAAM,MAAM,MAAM,KAAK,GAAG;EAC3D;;AAGG,IAAM,cAAc,IAAI,YAAW;;;ACzMpC,IAAW;CAAjB,SAAiBC,aAAU;EACvB,MAAa,gBAAe;;;;;;;IAOxB,YAAmB,MAAqB,OAAa;AAAlC,WAAA,OAAA;AAAqB,WAAA,QAAA;AACpC,UAAI,CAAC,MAAM;AACP,cAAM,MAAM,+CAA+C;;IAEnE;IAEO,WAAQ;AACX,aAAO,KAAK;IAChB;IAEO,gBAAa;AAChB,aAAO,KAAK;IAChB;;AAnBS,EAAAA,YAAA,kBAAe;AAqBhC,GAtBiB,eAAA,aAAU,CAAA,EAAA;;;ACAZ,SAAR,KAAsB,IAAI,SAAS;AACxC,SAAO,SAAS,OAAO;AACrB,WAAO,GAAG,MAAM,SAAS,SAAS;AAAA,EACpC;AACF;;;ACAA,IAAM,EAAC,SAAQ,IAAI,OAAO;AAC1B,IAAM,EAAC,eAAc,IAAI;AAEzB,IAAM,UAAU,WAAS,WAAS;AAC9B,QAAM,MAAM,SAAS,KAAK,KAAK;AAC/B,SAAO,MAAM,GAAG,MAAM,MAAM,GAAG,IAAI,IAAI,MAAM,GAAG,EAAE,EAAE,YAAY;AACpE,GAAG,uBAAO,OAAO,IAAI,CAAC;AAEtB,IAAM,aAAa,CAAC,SAAS;AAC3B,SAAO,KAAK,YAAY;AACxB,SAAO,CAAC,UAAU,OAAO,KAAK,MAAM;AACtC;AAEA,IAAM,aAAa,UAAQ,WAAS,OAAO,UAAU;AASrD,IAAM,EAAC,QAAO,IAAI;AASlB,IAAM,cAAc,WAAW,WAAW;AAS1C,SAAS,SAAS,KAAK;AACrB,SAAO,QAAQ,QAAQ,CAAC,YAAY,GAAG,KAAK,IAAI,gBAAgB,QAAQ,CAAC,YAAY,IAAI,WAAW,KAC/F,WAAW,IAAI,YAAY,QAAQ,KAAK,IAAI,YAAY,SAAS,GAAG;AAC3E;AASA,IAAM,gBAAgB,WAAW,aAAa;AAU9C,SAAS,kBAAkB,KAAK;AAC9B,MAAI;AACJ,MAAK,OAAO,gBAAgB,eAAiB,YAAY,QAAS;AAChE,aAAS,YAAY,OAAO,GAAG;AAAA,EACjC,OAAO;AACL,aAAU,OAAS,IAAI,UAAY,cAAc,IAAI,MAAM;AAAA,EAC7D;AACA,SAAO;AACT;AASA,IAAM,WAAW,WAAW,QAAQ;AAQpC,IAAM,aAAa,WAAW,UAAU;AASxC,IAAM,WAAW,WAAW,QAAQ;AASpC,IAAM,WAAW,CAAC,UAAU,UAAU,QAAQ,OAAO,UAAU;AAQ/D,IAAM,YAAY,WAAS,UAAU,QAAQ,UAAU;AASvD,IAAM,gBAAgB,CAAC,QAAQ;AAC7B,MAAI,OAAO,GAAG,MAAM,UAAU;AAC5B,WAAO;AAAA,EACT;AAEA,QAAMC,aAAY,eAAe,GAAG;AACpC,UAAQA,eAAc,QAAQA,eAAc,OAAO,aAAa,OAAO,eAAeA,UAAS,MAAM,SAAS,EAAE,OAAO,eAAe,QAAQ,EAAE,OAAO,YAAY;AACrK;AASA,IAAM,SAAS,WAAW,MAAM;AAShC,IAAM,SAAS,WAAW,MAAM;AAShC,IAAM,SAAS,WAAW,MAAM;AAShC,IAAM,aAAa,WAAW,UAAU;AASxC,IAAM,WAAW,CAAC,QAAQ,SAAS,GAAG,KAAK,WAAW,IAAI,IAAI;AAS9D,IAAM,aAAa,CAAC,UAAU;AAC5B,MAAI;AACJ,SAAO,UACJ,OAAO,aAAa,cAAc,iBAAiB,YAClD,WAAW,MAAM,MAAM,OACpB,OAAO,OAAO,KAAK,OAAO;AAAA,EAE1B,SAAS,YAAY,WAAW,MAAM,QAAQ,KAAK,MAAM,SAAS,MAAM;AAIjF;AASA,IAAM,oBAAoB,WAAW,iBAAiB;AAEtD,IAAM,CAAC,kBAAkB,WAAW,YAAY,SAAS,IAAI,CAAC,kBAAkB,WAAW,YAAY,SAAS,EAAE,IAAI,UAAU;AAShI,IAAM,OAAO,CAAC,QAAQ,IAAI,OACxB,IAAI,KAAK,IAAI,IAAI,QAAQ,sCAAsC,EAAE;AAiBnE,SAAS,QAAQ,KAAK,IAAI,EAAC,aAAa,MAAK,IAAI,CAAC,GAAG;AAEnD,MAAI,QAAQ,QAAQ,OAAO,QAAQ,aAAa;AAC9C;AAAA,EACF;AAEA,MAAI;AACJ,MAAI;AAGJ,MAAI,OAAO,QAAQ,UAAU;AAE3B,UAAM,CAAC,GAAG;AAAA,EACZ;AAEA,MAAI,QAAQ,GAAG,GAAG;AAEhB,SAAK,IAAI,GAAG,IAAI,IAAI,QAAQ,IAAI,GAAG,KAAK;AACtC,SAAG,KAAK,MAAM,IAAI,CAAC,GAAG,GAAG,GAAG;AAAA,IAC9B;AAAA,EACF,OAAO;AAEL,UAAM,OAAO,aAAa,OAAO,oBAAoB,GAAG,IAAI,OAAO,KAAK,GAAG;AAC3E,UAAM,MAAM,KAAK;AACjB,QAAI;AAEJ,SAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,YAAM,KAAK,CAAC;AACZ,SAAG,KAAK,MAAM,IAAI,GAAG,GAAG,KAAK,GAAG;AAAA,IAClC;AAAA,EACF;AACF;AAEA,SAAS,QAAQ,KAAK,KAAK;AACzB,QAAM,IAAI,YAAY;AACtB,QAAM,OAAO,OAAO,KAAK,GAAG;AAC5B,MAAI,IAAI,KAAK;AACb,MAAI;AACJ,SAAO,MAAM,GAAG;AACd,WAAO,KAAK,CAAC;AACb,QAAI,QAAQ,KAAK,YAAY,GAAG;AAC9B,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAEA,IAAM,WAAW,MAAM;AAErB,MAAI,OAAO,eAAe;AAAa,WAAO;AAC9C,SAAO,OAAO,SAAS,cAAc,OAAQ,OAAO,WAAW,cAAc,SAAS;AACxF,GAAG;AAEH,IAAM,mBAAmB,CAAC,YAAY,CAAC,YAAY,OAAO,KAAK,YAAY;AAoB3E,SAAS,QAAmC;AAC1C,QAAM,EAAC,SAAQ,IAAI,iBAAiB,IAAI,KAAK,QAAQ,CAAC;AACtD,QAAM,SAAS,CAAC;AAChB,QAAM,cAAc,CAAC,KAAK,QAAQ;AAChC,UAAM,YAAY,YAAY,QAAQ,QAAQ,GAAG,KAAK;AACtD,QAAI,cAAc,OAAO,SAAS,CAAC,KAAK,cAAc,GAAG,GAAG;AAC1D,aAAO,SAAS,IAAI,MAAM,OAAO,SAAS,GAAG,GAAG;AAAA,IAClD,WAAW,cAAc,GAAG,GAAG;AAC7B,aAAO,SAAS,IAAI,MAAM,CAAC,GAAG,GAAG;AAAA,IACnC,WAAW,QAAQ,GAAG,GAAG;AACvB,aAAO,SAAS,IAAI,IAAI,MAAM;AAAA,IAChC,OAAO;AACL,aAAO,SAAS,IAAI;AAAA,IACtB;AAAA,EACF;AAEA,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG,KAAK;AAChD,cAAU,CAAC,KAAK,QAAQ,UAAU,CAAC,GAAG,WAAW;AAAA,EACnD;AACA,SAAO;AACT;AAYA,IAAM,SAAS,CAAC,GAAG,GAAG,SAAS,EAAC,WAAU,IAAG,CAAC,MAAM;AAClD,UAAQ,GAAG,CAAC,KAAK,QAAQ;AACvB,QAAI,WAAW,WAAW,GAAG,GAAG;AAC9B,QAAE,GAAG,IAAI,KAAK,KAAK,OAAO;AAAA,IAC5B,OAAO;AACL,QAAE,GAAG,IAAI;AAAA,IACX;AAAA,EACF,GAAG,EAAC,WAAU,CAAC;AACf,SAAO;AACT;AASA,IAAM,WAAW,CAAC,YAAY;AAC5B,MAAI,QAAQ,WAAW,CAAC,MAAM,OAAQ;AACpC,cAAU,QAAQ,MAAM,CAAC;AAAA,EAC3B;AACA,SAAO;AACT;AAWA,IAAM,WAAW,CAAC,aAAa,kBAAkB,OAAOC,iBAAgB;AACtE,cAAY,YAAY,OAAO,OAAO,iBAAiB,WAAWA,YAAW;AAC7E,cAAY,UAAU,cAAc;AACpC,SAAO,eAAe,aAAa,SAAS;AAAA,IAC1C,OAAO,iBAAiB;AAAA,EAC1B,CAAC;AACD,WAAS,OAAO,OAAO,YAAY,WAAW,KAAK;AACrD;AAWA,IAAM,eAAe,CAAC,WAAW,SAASC,SAAQ,eAAe;AAC/D,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,QAAM,SAAS,CAAC;AAEhB,YAAU,WAAW,CAAC;AAEtB,MAAI,aAAa;AAAM,WAAO;AAE9B,KAAG;AACD,YAAQ,OAAO,oBAAoB,SAAS;AAC5C,QAAI,MAAM;AACV,WAAO,MAAM,GAAG;AACd,aAAO,MAAM,CAAC;AACd,WAAK,CAAC,cAAc,WAAW,MAAM,WAAW,OAAO,MAAM,CAAC,OAAO,IAAI,GAAG;AAC1E,gBAAQ,IAAI,IAAI,UAAU,IAAI;AAC9B,eAAO,IAAI,IAAI;AAAA,MACjB;AAAA,IACF;AACA,gBAAYA,YAAW,SAAS,eAAe,SAAS;AAAA,EAC1D,SAAS,cAAc,CAACA,WAAUA,QAAO,WAAW,OAAO,MAAM,cAAc,OAAO;AAEtF,SAAO;AACT;AAWA,IAAM,WAAW,CAAC,KAAK,cAAc,aAAa;AAChD,QAAM,OAAO,GAAG;AAChB,MAAI,aAAa,UAAa,WAAW,IAAI,QAAQ;AACnD,eAAW,IAAI;AAAA,EACjB;AACA,cAAY,aAAa;AACzB,QAAM,YAAY,IAAI,QAAQ,cAAc,QAAQ;AACpD,SAAO,cAAc,MAAM,cAAc;AAC3C;AAUA,IAAM,UAAU,CAAC,UAAU;AACzB,MAAI,CAAC;AAAO,WAAO;AACnB,MAAI,QAAQ,KAAK;AAAG,WAAO;AAC3B,MAAI,IAAI,MAAM;AACd,MAAI,CAAC,SAAS,CAAC;AAAG,WAAO;AACzB,QAAM,MAAM,IAAI,MAAM,CAAC;AACvB,SAAO,MAAM,GAAG;AACd,QAAI,CAAC,IAAI,MAAM,CAAC;AAAA,EAClB;AACA,SAAO;AACT;AAWA,IAAM,gBAAgB,gBAAc;AAElC,SAAO,WAAS;AACd,WAAO,cAAc,iBAAiB;AAAA,EACxC;AACF,GAAG,OAAO,eAAe,eAAe,eAAe,UAAU,CAAC;AAUlE,IAAM,eAAe,CAAC,KAAK,OAAO;AAChC,QAAM,YAAY,OAAO,IAAI,OAAO,QAAQ;AAE5C,QAAM,WAAW,UAAU,KAAK,GAAG;AAEnC,MAAI;AAEJ,UAAQ,SAAS,SAAS,KAAK,MAAM,CAAC,OAAO,MAAM;AACjD,UAAM,OAAO,OAAO;AACpB,OAAG,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,EAC/B;AACF;AAUA,IAAM,WAAW,CAAC,QAAQ,QAAQ;AAChC,MAAI;AACJ,QAAM,MAAM,CAAC;AAEb,UAAQ,UAAU,OAAO,KAAK,GAAG,OAAO,MAAM;AAC5C,QAAI,KAAK,OAAO;AAAA,EAClB;AAEA,SAAO;AACT;AAGA,IAAM,aAAa,WAAW,iBAAiB;AAE/C,IAAM,cAAc,SAAO;AACzB,SAAO,IAAI,YAAY,EAAE;AAAA,IAAQ;AAAA,IAC/B,SAAS,SAAS,GAAG,IAAI,IAAI;AAC3B,aAAO,GAAG,YAAY,IAAI;AAAA,IAC5B;AAAA,EACF;AACF;AAGA,IAAM,kBAAkB,CAAC,EAAC,gBAAAC,gBAAc,MAAM,CAAC,KAAK,SAASA,gBAAe,KAAK,KAAK,IAAI,GAAG,OAAO,SAAS;AAS7G,IAAM,WAAW,WAAW,QAAQ;AAEpC,IAAM,oBAAoB,CAAC,KAAK,YAAY;AAC1C,QAAMF,eAAc,OAAO,0BAA0B,GAAG;AACxD,QAAM,qBAAqB,CAAC;AAE5B,UAAQA,cAAa,CAAC,YAAY,SAAS;AACzC,QAAI;AACJ,SAAK,MAAM,QAAQ,YAAY,MAAM,GAAG,OAAO,OAAO;AACpD,yBAAmB,IAAI,IAAI,OAAO;AAAA,IACpC;AAAA,EACF,CAAC;AAED,SAAO,iBAAiB,KAAK,kBAAkB;AACjD;AAOA,IAAM,gBAAgB,CAAC,QAAQ;AAC7B,oBAAkB,KAAK,CAAC,YAAY,SAAS;AAE3C,QAAI,WAAW,GAAG,KAAK,CAAC,aAAa,UAAU,QAAQ,EAAE,QAAQ,IAAI,MAAM,IAAI;AAC7E,aAAO;AAAA,IACT;AAEA,UAAM,QAAQ,IAAI,IAAI;AAEtB,QAAI,CAAC,WAAW,KAAK;AAAG;AAExB,eAAW,aAAa;AAExB,QAAI,cAAc,YAAY;AAC5B,iBAAW,WAAW;AACtB;AAAA,IACF;AAEA,QAAI,CAAC,WAAW,KAAK;AACnB,iBAAW,MAAM,MAAM;AACrB,cAAM,MAAM,uCAAwC,OAAO,GAAI;AAAA,MACjE;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,IAAM,cAAc,CAAC,eAAe,cAAc;AAChD,QAAM,MAAM,CAAC;AAEb,QAAM,SAAS,CAAC,QAAQ;AACtB,QAAI,QAAQ,WAAS;AACnB,UAAI,KAAK,IAAI;AAAA,IACf,CAAC;AAAA,EACH;AAEA,UAAQ,aAAa,IAAI,OAAO,aAAa,IAAI,OAAO,OAAO,aAAa,EAAE,MAAM,SAAS,CAAC;AAE9F,SAAO;AACT;AAEA,IAAM,OAAO,MAAM;AAAC;AAEpB,IAAM,iBAAiB,CAAC,OAAO,iBAAiB;AAC9C,SAAO,SAAS,QAAQ,OAAO,SAAS,QAAQ,CAAC,KAAK,IAAI,QAAQ;AACpE;AAEA,IAAM,QAAQ;AAEd,IAAM,QAAQ;AAEd,IAAM,WAAW;AAAA,EACf;AAAA,EACA;AAAA,EACA,aAAa,QAAQ,MAAM,YAAY,IAAI;AAC7C;AAEA,IAAM,iBAAiB,CAAC,OAAO,IAAI,WAAW,SAAS,gBAAgB;AACrE,MAAI,MAAM;AACV,QAAM,EAAC,OAAM,IAAI;AACjB,SAAO,QAAQ;AACb,WAAO,SAAS,KAAK,OAAO,IAAI,SAAO,CAAC;AAAA,EAC1C;AAEA,SAAO;AACT;AASA,SAAS,oBAAoB,OAAO;AAClC,SAAO,CAAC,EAAE,SAAS,WAAW,MAAM,MAAM,KAAK,MAAM,OAAO,WAAW,MAAM,cAAc,MAAM,OAAO,QAAQ;AAClH;AAEA,IAAM,eAAe,CAAC,QAAQ;AAC5B,QAAM,QAAQ,IAAI,MAAM,EAAE;AAE1B,QAAM,QAAQ,CAAC,QAAQ,MAAM;AAE3B,QAAI,SAAS,MAAM,GAAG;AACpB,UAAI,MAAM,QAAQ,MAAM,KAAK,GAAG;AAC9B;AAAA,MACF;AAEA,UAAG,EAAE,YAAY,SAAS;AACxB,cAAM,CAAC,IAAI;AACX,cAAM,SAAS,QAAQ,MAAM,IAAI,CAAC,IAAI,CAAC;AAEvC,gBAAQ,QAAQ,CAAC,OAAO,QAAQ;AAC9B,gBAAM,eAAe,MAAM,OAAO,IAAI,CAAC;AACvC,WAAC,YAAY,YAAY,MAAM,OAAO,GAAG,IAAI;AAAA,QAC/C,CAAC;AAED,cAAM,CAAC,IAAI;AAEX,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,SAAO,MAAM,KAAK,CAAC;AACrB;AAEA,IAAM,YAAY,WAAW,eAAe;AAE5C,IAAM,aAAa,CAAC,UAClB,UAAU,SAAS,KAAK,KAAK,WAAW,KAAK,MAAM,WAAW,MAAM,IAAI,KAAK,WAAW,MAAM,KAAK;AAKrG,IAAM,iBAAiB,CAAC,uBAAuB,yBAAyB;AACtE,MAAI,uBAAuB;AACzB,WAAO;AAAA,EACT;AAEA,SAAO,wBAAwB,CAAC,OAAO,cAAc;AACnD,YAAQ,iBAAiB,WAAW,CAAC,EAAC,QAAQ,KAAI,MAAM;AACtD,UAAI,WAAW,WAAW,SAAS,OAAO;AACxC,kBAAU,UAAU,UAAU,MAAM,EAAE;AAAA,MACxC;AAAA,IACF,GAAG,KAAK;AAER,WAAO,CAAC,OAAO;AACb,gBAAU,KAAK,EAAE;AACjB,cAAQ,YAAY,OAAO,GAAG;AAAA,IAChC;AAAA,EACF,GAAG,SAAS,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,WAAW,EAAE;AAC1D;AAAA,EACE,OAAO,iBAAiB;AAAA,EACxB,WAAW,QAAQ,WAAW;AAChC;AAEA,IAAM,OAAO,OAAO,mBAAmB,cACrC,eAAe,KAAK,OAAO,IAAM,OAAO,YAAY,eAAe,QAAQ,YAAY;AAIzF,IAAO,gBAAQ;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY;AAAA;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,cAAc;AAAA,EACd;AACF;;;ACxuBA,SAAS,WAAW,SAAS,MAAM,QAAQ,SAAS,UAAU;AAC5D,QAAM,KAAK,IAAI;AAEf,MAAI,MAAM,mBAAmB;AAC3B,UAAM,kBAAkB,MAAM,KAAK,WAAW;AAAA,EAChD,OAAO;AACL,SAAK,QAAS,IAAI,MAAM,EAAG;AAAA,EAC7B;AAEA,OAAK,UAAU;AACf,OAAK,OAAO;AACZ,WAAS,KAAK,OAAO;AACrB,aAAW,KAAK,SAAS;AACzB,cAAY,KAAK,UAAU;AAC3B,eAAa,KAAK,WAAW;AAC/B;AAEA,cAAM,SAAS,YAAY,OAAO;AAAA,EAChC,QAAQ,SAAS,SAAS;AACxB,WAAO;AAAA;AAAA,MAEL,SAAS,KAAK;AAAA,MACd,MAAM,KAAK;AAAA;AAAA,MAEX,aAAa,KAAK;AAAA,MAClB,QAAQ,KAAK;AAAA;AAAA,MAEb,UAAU,KAAK;AAAA,MACf,YAAY,KAAK;AAAA,MACjB,cAAc,KAAK;AAAA,MACnB,OAAO,KAAK;AAAA;AAAA,MAEZ,QAAQ,cAAM,aAAa,KAAK,MAAM;AAAA,MACtC,MAAM,KAAK;AAAA,MACX,QAAQ,KAAK,YAAY,KAAK,SAAS,SAAS,KAAK,SAAS,SAAS;AAAA,IACzE;AAAA,EACF;AACF,CAAC;AAED,IAAM,YAAY,WAAW;AAC7B,IAAM,cAAc,CAAC;AAErB;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAEF,EAAE,QAAQ,UAAQ;AAChB,cAAY,IAAI,IAAI,EAAC,OAAO,KAAI;AAClC,CAAC;AAED,OAAO,iBAAiB,YAAY,WAAW;AAC/C,OAAO,eAAe,WAAW,gBAAgB,EAAC,OAAO,KAAI,CAAC;AAG9D,WAAW,OAAO,CAAC,OAAO,MAAM,QAAQ,SAAS,UAAU,gBAAgB;AACzE,QAAM,aAAa,OAAO,OAAO,SAAS;AAE1C,gBAAM,aAAa,OAAO,YAAY,SAASG,QAAO,KAAK;AACzD,WAAO,QAAQ,MAAM;AAAA,EACvB,GAAG,UAAQ;AACT,WAAO,SAAS;AAAA,EAClB,CAAC;AAED,aAAW,KAAK,YAAY,MAAM,SAAS,MAAM,QAAQ,SAAS,QAAQ;AAE1E,aAAW,QAAQ;AAEnB,aAAW,OAAO,MAAM;AAExB,iBAAe,OAAO,OAAO,YAAY,WAAW;AAEpD,SAAO;AACT;AAEA,IAAO,qBAAQ;;;AClGf,IAAO,eAAQ;;;ACaf,SAAS,YAAY,OAAO;AAC1B,SAAO,cAAM,cAAc,KAAK,KAAK,cAAM,QAAQ,KAAK;AAC1D;AASA,SAAS,eAAe,KAAK;AAC3B,SAAO,cAAM,SAAS,KAAK,IAAI,IAAI,IAAI,MAAM,GAAG,EAAE,IAAI;AACxD;AAWA,SAAS,UAAU,MAAM,KAAK,MAAM;AAClC,MAAI,CAAC;AAAM,WAAO;AAClB,SAAO,KAAK,OAAO,GAAG,EAAE,IAAI,SAAS,KAAK,OAAO,GAAG;AAElD,YAAQ,eAAe,KAAK;AAC5B,WAAO,CAAC,QAAQ,IAAI,MAAM,QAAQ,MAAM;AAAA,EAC1C,CAAC,EAAE,KAAK,OAAO,MAAM,EAAE;AACzB;AASA,SAAS,YAAY,KAAK;AACxB,SAAO,cAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,KAAK,WAAW;AACpD;AAEA,IAAM,aAAa,cAAM,aAAa,eAAO,CAAC,GAAG,MAAM,SAAS,OAAO,MAAM;AAC3E,SAAO,WAAW,KAAK,IAAI;AAC7B,CAAC;AAyBD,SAAS,WAAW,KAAK,UAAU,SAAS;AAC1C,MAAI,CAAC,cAAM,SAAS,GAAG,GAAG;AACxB,UAAM,IAAI,UAAU,0BAA0B;AAAA,EAChD;AAGA,aAAW,YAAY,KAAK,gBAAoB,UAAU;AAG1D,YAAU,cAAM,aAAa,SAAS;AAAA,IACpC,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,SAAS;AAAA,EACX,GAAG,OAAO,SAAS,QAAQ,QAAQ,QAAQ;AAEzC,WAAO,CAAC,cAAM,YAAY,OAAO,MAAM,CAAC;AAAA,EAC1C,CAAC;AAED,QAAM,aAAa,QAAQ;AAE3B,QAAM,UAAU,QAAQ,WAAW;AACnC,QAAM,OAAO,QAAQ;AACrB,QAAM,UAAU,QAAQ;AACxB,QAAM,QAAQ,QAAQ,QAAQ,OAAO,SAAS,eAAe;AAC7D,QAAM,UAAU,SAAS,cAAM,oBAAoB,QAAQ;AAE3D,MAAI,CAAC,cAAM,WAAW,OAAO,GAAG;AAC9B,UAAM,IAAI,UAAU,4BAA4B;AAAA,EAClD;AAEA,WAAS,aAAa,OAAO;AAC3B,QAAI,UAAU;AAAM,aAAO;AAE3B,QAAI,cAAM,OAAO,KAAK,GAAG;AACvB,aAAO,MAAM,YAAY;AAAA,IAC3B;AAEA,QAAI,CAAC,WAAW,cAAM,OAAO,KAAK,GAAG;AACnC,YAAM,IAAI,mBAAW,8CAA8C;AAAA,IACrE;AAEA,QAAI,cAAM,cAAc,KAAK,KAAK,cAAM,aAAa,KAAK,GAAG;AAC3D,aAAO,WAAW,OAAO,SAAS,aAAa,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,OAAO,KAAK,KAAK;AAAA,IACtF;AAEA,WAAO;AAAA,EACT;AAYA,WAAS,eAAe,OAAO,KAAK,MAAM;AACxC,QAAI,MAAM;AAEV,QAAI,SAAS,CAAC,QAAQ,OAAO,UAAU,UAAU;AAC/C,UAAI,cAAM,SAAS,KAAK,IAAI,GAAG;AAE7B,cAAM,aAAa,MAAM,IAAI,MAAM,GAAG,EAAE;AAExC,gBAAQ,KAAK,UAAU,KAAK;AAAA,MAC9B,WACG,cAAM,QAAQ,KAAK,KAAK,YAAY,KAAK,MACxC,cAAM,WAAW,KAAK,KAAK,cAAM,SAAS,KAAK,IAAI,OAAO,MAAM,cAAM,QAAQ,KAAK,IAClF;AAEH,cAAM,eAAe,GAAG;AAExB,YAAI,QAAQ,SAAS,KAAK,IAAI,OAAO;AACnC,YAAE,cAAM,YAAY,EAAE,KAAK,OAAO,SAAS,SAAS;AAAA;AAAA,YAElD,YAAY,OAAO,UAAU,CAAC,GAAG,GAAG,OAAO,IAAI,IAAK,YAAY,OAAO,MAAM,MAAM;AAAA,YACnF,aAAa,EAAE;AAAA,UACjB;AAAA,QACF,CAAC;AACD,eAAO;AAAA,MACT;AAAA,IACF;AAEA,QAAI,YAAY,KAAK,GAAG;AACtB,aAAO;AAAA,IACT;AAEA,aAAS,OAAO,UAAU,MAAM,KAAK,IAAI,GAAG,aAAa,KAAK,CAAC;AAE/D,WAAO;AAAA,EACT;AAEA,QAAM,QAAQ,CAAC;AAEf,QAAM,iBAAiB,OAAO,OAAO,YAAY;AAAA,IAC/C;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,WAAS,MAAM,OAAO,MAAM;AAC1B,QAAI,cAAM,YAAY,KAAK;AAAG;AAE9B,QAAI,MAAM,QAAQ,KAAK,MAAM,IAAI;AAC/B,YAAM,MAAM,oCAAoC,KAAK,KAAK,GAAG,CAAC;AAAA,IAChE;AAEA,UAAM,KAAK,KAAK;AAEhB,kBAAM,QAAQ,OAAO,SAAS,KAAK,IAAI,KAAK;AAC1C,YAAM,SAAS,EAAE,cAAM,YAAY,EAAE,KAAK,OAAO,SAAS,QAAQ;AAAA,QAChE;AAAA,QAAU;AAAA,QAAI,cAAM,SAAS,GAAG,IAAI,IAAI,KAAK,IAAI;AAAA,QAAK;AAAA,QAAM;AAAA,MAC9D;AAEA,UAAI,WAAW,MAAM;AACnB,cAAM,IAAI,OAAO,KAAK,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;AAAA,MAC3C;AAAA,IACF,CAAC;AAED,UAAM,IAAI;AAAA,EACZ;AAEA,MAAI,CAAC,cAAM,SAAS,GAAG,GAAG;AACxB,UAAM,IAAI,UAAU,wBAAwB;AAAA,EAC9C;AAEA,QAAM,GAAG;AAET,SAAO;AACT;AAEA,IAAO,qBAAQ;;;AC9Mf,SAAS,OAAO,KAAK;AACnB,QAAM,UAAU;AAAA,IACd,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,OAAO;AAAA,IACP,OAAO;AAAA,EACT;AACA,SAAO,mBAAmB,GAAG,EAAE,QAAQ,oBAAoB,SAAS,SAAS,OAAO;AAClF,WAAO,QAAQ,KAAK;AAAA,EACtB,CAAC;AACH;AAUA,SAAS,qBAAqB,QAAQ,SAAS;AAC7C,OAAK,SAAS,CAAC;AAEf,YAAU,mBAAW,QAAQ,MAAM,OAAO;AAC5C;AAEA,IAAMC,aAAY,qBAAqB;AAEvCA,WAAU,SAAS,SAAS,OAAO,MAAM,OAAO;AAC9C,OAAK,OAAO,KAAK,CAAC,MAAM,KAAK,CAAC;AAChC;AAEAA,WAAU,WAAW,SAASC,UAAS,SAAS;AAC9C,QAAM,UAAU,UAAU,SAAS,OAAO;AACxC,WAAO,QAAQ,KAAK,MAAM,OAAO,MAAM;AAAA,EACzC,IAAI;AAEJ,SAAO,KAAK,OAAO,IAAI,SAAS,KAAK,MAAM;AACzC,WAAO,QAAQ,KAAK,CAAC,CAAC,IAAI,MAAM,QAAQ,KAAK,CAAC,CAAC;AAAA,EACjD,GAAG,EAAE,EAAE,KAAK,GAAG;AACjB;AAEA,IAAO,+BAAQ;;;AC5Cf,SAASC,QAAO,KAAK;AACnB,SAAO,mBAAmB,GAAG,EAC3B,QAAQ,SAAS,GAAG,EACpB,QAAQ,QAAQ,GAAG,EACnB,QAAQ,SAAS,GAAG,EACpB,QAAQ,QAAQ,GAAG,EACnB,QAAQ,SAAS,GAAG,EACpB,QAAQ,SAAS,GAAG;AACxB;AAWe,SAAR,SAA0B,KAAK,QAAQ,SAAS;AAErD,MAAI,CAAC,QAAQ;AACX,WAAO;AAAA,EACT;AAEA,QAAM,UAAU,WAAW,QAAQ,UAAUA;AAE7C,QAAM,cAAc,WAAW,QAAQ;AAEvC,MAAI;AAEJ,MAAI,aAAa;AACf,uBAAmB,YAAY,QAAQ,OAAO;AAAA,EAChD,OAAO;AACL,uBAAmB,cAAM,kBAAkB,MAAM,IAC/C,OAAO,SAAS,IAChB,IAAI,6BAAqB,QAAQ,OAAO,EAAE,SAAS,OAAO;AAAA,EAC9D;AAEA,MAAI,kBAAkB;AACpB,UAAM,gBAAgB,IAAI,QAAQ,GAAG;AAErC,QAAI,kBAAkB,IAAI;AACxB,YAAM,IAAI,MAAM,GAAG,aAAa;AAAA,IAClC;AACA,YAAQ,IAAI,QAAQ,GAAG,MAAM,KAAK,MAAM,OAAO;AAAA,EACjD;AAEA,SAAO;AACT;;;AC1DA,IAAM,qBAAN,MAAyB;AAAA,EACvB,cAAc;AACZ,SAAK,WAAW,CAAC;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,WAAW,UAAU,SAAS;AAChC,SAAK,SAAS,KAAK;AAAA,MACjB;AAAA,MACA;AAAA,MACA,aAAa,UAAU,QAAQ,cAAc;AAAA,MAC7C,SAAS,UAAU,QAAQ,UAAU;AAAA,IACvC,CAAC;AACD,WAAO,KAAK,SAAS,SAAS;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,IAAI;AACR,QAAI,KAAK,SAAS,EAAE,GAAG;AACrB,WAAK,SAAS,EAAE,IAAI;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ;AACN,QAAI,KAAK,UAAU;AACjB,WAAK,WAAW,CAAC;AAAA,IACnB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,QAAQ,IAAI;AACV,kBAAM,QAAQ,KAAK,UAAU,SAAS,eAAe,GAAG;AACtD,UAAI,MAAM,MAAM;AACd,WAAG,CAAC;AAAA,MACN;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEA,IAAO,6BAAQ;;;ACpEf,IAAO,uBAAQ;AAAA,EACb,mBAAmB;AAAA,EACnB,mBAAmB;AAAA,EACnB,qBAAqB;AACvB;;;ACHA,IAAO,0BAAQ,OAAO,oBAAoB,cAAc,kBAAkB;;;ACD1E,IAAO,mBAAQ,OAAO,aAAa,cAAc,WAAW;;;ACA5D,IAAO,eAAQ,OAAO,SAAS,cAAc,OAAO;;;ACEpD,IAAO,kBAAQ;AAAA,EACb,WAAW;AAAA,EACX,SAAS;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,WAAW,CAAC,QAAQ,SAAS,QAAQ,QAAQ,OAAO,MAAM;AAC5D;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAM,gBAAgB,OAAO,WAAW,eAAe,OAAO,aAAa;AAmB3E,IAAM,yBACJ,CAAC,YAAY;AACX,SAAO,iBAAiB,CAAC,eAAe,gBAAgB,IAAI,EAAE,QAAQ,OAAO,IAAI;AACnF,GAAG,OAAO,cAAc,eAAe,UAAU,OAAO;AAW1D,IAAM,kCAAkC,MAAM;AAC5C,SACE,OAAO,sBAAsB;AAAA,EAE7B,gBAAgB,qBAChB,OAAO,KAAK,kBAAkB;AAElC,GAAG;AAEH,IAAM,SAAS,iBAAiB,OAAO,SAAS,QAAQ;;;ACvCxD,IAAO,mBAAQ;AAAA,EACb,GAAG;AAAA,EACH,GAAG;AACL;;;ACAe,SAAR,iBAAkC,MAAM,SAAS;AACtD,SAAO,mBAAW,MAAM,IAAI,iBAAS,QAAQ,gBAAgB,GAAG,OAAO,OAAO;AAAA,IAC5E,SAAS,SAAS,OAAO,KAAK,MAAM,SAAS;AAC3C,UAAI,iBAAS,UAAU,cAAM,SAAS,KAAK,GAAG;AAC5C,aAAK,OAAO,KAAK,MAAM,SAAS,QAAQ,CAAC;AACzC,eAAO;AAAA,MACT;AAEA,aAAO,QAAQ,eAAe,MAAM,MAAM,SAAS;AAAA,IACrD;AAAA,EACF,GAAG,OAAO,CAAC;AACb;;;ACNA,SAAS,cAAc,MAAM;AAK3B,SAAO,cAAM,SAAS,iBAAiB,IAAI,EAAE,IAAI,WAAS;AACxD,WAAO,MAAM,CAAC,MAAM,OAAO,KAAK,MAAM,CAAC,KAAK,MAAM,CAAC;AAAA,EACrD,CAAC;AACH;AASA,SAAS,cAAc,KAAK;AAC1B,QAAM,MAAM,CAAC;AACb,QAAM,OAAO,OAAO,KAAK,GAAG;AAC5B,MAAI;AACJ,QAAM,MAAM,KAAK;AACjB,MAAI;AACJ,OAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,UAAM,KAAK,CAAC;AACZ,QAAI,GAAG,IAAI,IAAI,GAAG;AAAA,EACpB;AACA,SAAO;AACT;AASA,SAAS,eAAe,UAAU;AAChC,WAAS,UAAU,MAAM,OAAO,QAAQ,OAAO;AAC7C,QAAI,OAAO,KAAK,OAAO;AAEvB,QAAI,SAAS;AAAa,aAAO;AAEjC,UAAM,eAAe,OAAO,SAAS,CAAC,IAAI;AAC1C,UAAM,SAAS,SAAS,KAAK;AAC7B,WAAO,CAAC,QAAQ,cAAM,QAAQ,MAAM,IAAI,OAAO,SAAS;AAExD,QAAI,QAAQ;AACV,UAAI,cAAM,WAAW,QAAQ,IAAI,GAAG;AAClC,eAAO,IAAI,IAAI,CAAC,OAAO,IAAI,GAAG,KAAK;AAAA,MACrC,OAAO;AACL,eAAO,IAAI,IAAI;AAAA,MACjB;AAEA,aAAO,CAAC;AAAA,IACV;AAEA,QAAI,CAAC,OAAO,IAAI,KAAK,CAAC,cAAM,SAAS,OAAO,IAAI,CAAC,GAAG;AAClD,aAAO,IAAI,IAAI,CAAC;AAAA,IAClB;AAEA,UAAM,SAAS,UAAU,MAAM,OAAO,OAAO,IAAI,GAAG,KAAK;AAEzD,QAAI,UAAU,cAAM,QAAQ,OAAO,IAAI,CAAC,GAAG;AACzC,aAAO,IAAI,IAAI,cAAc,OAAO,IAAI,CAAC;AAAA,IAC3C;AAEA,WAAO,CAAC;AAAA,EACV;AAEA,MAAI,cAAM,WAAW,QAAQ,KAAK,cAAM,WAAW,SAAS,OAAO,GAAG;AACpE,UAAM,MAAM,CAAC;AAEb,kBAAM,aAAa,UAAU,CAAC,MAAM,UAAU;AAC5C,gBAAU,cAAc,IAAI,GAAG,OAAO,KAAK,CAAC;AAAA,IAC9C,CAAC;AAED,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAEA,IAAO,yBAAQ;;;AC1Ef,SAAS,gBAAgB,UAAU,QAAQ,SAAS;AAClD,MAAI,cAAM,SAAS,QAAQ,GAAG;AAC5B,QAAI;AACF,OAAC,UAAU,KAAK,OAAO,QAAQ;AAC/B,aAAO,cAAM,KAAK,QAAQ;AAAA,IAC5B,SAAS,GAAG;AACV,UAAI,EAAE,SAAS,eAAe;AAC5B,cAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,UAAQ,WAAW,KAAK,WAAW,QAAQ;AAC7C;AAEA,IAAM,WAAW;AAAA,EAEf,cAAc;AAAA,EAEd,SAAS,CAAC,OAAO,QAAQ,OAAO;AAAA,EAEhC,kBAAkB,CAAC,SAAS,iBAAiB,MAAM,SAAS;AAC1D,UAAM,cAAc,QAAQ,eAAe,KAAK;AAChD,UAAM,qBAAqB,YAAY,QAAQ,kBAAkB,IAAI;AACrE,UAAM,kBAAkB,cAAM,SAAS,IAAI;AAE3C,QAAI,mBAAmB,cAAM,WAAW,IAAI,GAAG;AAC7C,aAAO,IAAI,SAAS,IAAI;AAAA,IAC1B;AAEA,UAAMC,cAAa,cAAM,WAAW,IAAI;AAExC,QAAIA,aAAY;AACd,aAAO,qBAAqB,KAAK,UAAU,uBAAe,IAAI,CAAC,IAAI;AAAA,IACrE;AAEA,QAAI,cAAM,cAAc,IAAI,KAC1B,cAAM,SAAS,IAAI,KACnB,cAAM,SAAS,IAAI,KACnB,cAAM,OAAO,IAAI,KACjB,cAAM,OAAO,IAAI,KACjB,cAAM,iBAAiB,IAAI,GAC3B;AACA,aAAO;AAAA,IACT;AACA,QAAI,cAAM,kBAAkB,IAAI,GAAG;AACjC,aAAO,KAAK;AAAA,IACd;AACA,QAAI,cAAM,kBAAkB,IAAI,GAAG;AACjC,cAAQ,eAAe,mDAAmD,KAAK;AAC/E,aAAO,KAAK,SAAS;AAAA,IACvB;AAEA,QAAIC;AAEJ,QAAI,iBAAiB;AACnB,UAAI,YAAY,QAAQ,mCAAmC,IAAI,IAAI;AACjE,eAAO,iBAAiB,MAAM,KAAK,cAAc,EAAE,SAAS;AAAA,MAC9D;AAEA,WAAKA,cAAa,cAAM,WAAW,IAAI,MAAM,YAAY,QAAQ,qBAAqB,IAAI,IAAI;AAC5F,cAAM,YAAY,KAAK,OAAO,KAAK,IAAI;AAEvC,eAAO;AAAA,UACLA,cAAa,EAAC,WAAW,KAAI,IAAI;AAAA,UACjC,aAAa,IAAI,UAAU;AAAA,UAC3B,KAAK;AAAA,QACP;AAAA,MACF;AAAA,IACF;AAEA,QAAI,mBAAmB,oBAAqB;AAC1C,cAAQ,eAAe,oBAAoB,KAAK;AAChD,aAAO,gBAAgB,IAAI;AAAA,IAC7B;AAEA,WAAO;AAAA,EACT,CAAC;AAAA,EAED,mBAAmB,CAAC,SAAS,kBAAkB,MAAM;AACnD,UAAMC,gBAAe,KAAK,gBAAgB,SAAS;AACnD,UAAM,oBAAoBA,iBAAgBA,cAAa;AACvD,UAAM,gBAAgB,KAAK,iBAAiB;AAE5C,QAAI,cAAM,WAAW,IAAI,KAAK,cAAM,iBAAiB,IAAI,GAAG;AAC1D,aAAO;AAAA,IACT;AAEA,QAAI,QAAQ,cAAM,SAAS,IAAI,MAAO,qBAAqB,CAAC,KAAK,gBAAiB,gBAAgB;AAChG,YAAM,oBAAoBA,iBAAgBA,cAAa;AACvD,YAAM,oBAAoB,CAAC,qBAAqB;AAEhD,UAAI;AACF,eAAO,KAAK,MAAM,IAAI;AAAA,MACxB,SAAS,GAAG;AACV,YAAI,mBAAmB;AACrB,cAAI,EAAE,SAAS,eAAe;AAC5B,kBAAM,mBAAW,KAAK,GAAG,mBAAW,kBAAkB,MAAM,MAAM,KAAK,QAAQ;AAAA,UACjF;AACA,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,SAAS;AAAA,EAET,gBAAgB;AAAA,EAChB,gBAAgB;AAAA,EAEhB,kBAAkB;AAAA,EAClB,eAAe;AAAA,EAEf,KAAK;AAAA,IACH,UAAU,iBAAS,QAAQ;AAAA,IAC3B,MAAM,iBAAS,QAAQ;AAAA,EACzB;AAAA,EAEA,gBAAgB,SAAS,eAAe,QAAQ;AAC9C,WAAO,UAAU,OAAO,SAAS;AAAA,EACnC;AAAA,EAEA,SAAS;AAAA,IACP,QAAQ;AAAA,MACN,UAAU;AAAA,MACV,gBAAgB;AAAA,IAClB;AAAA,EACF;AACF;AAEA,cAAM,QAAQ,CAAC,UAAU,OAAO,QAAQ,QAAQ,OAAO,OAAO,GAAG,CAAC,WAAW;AAC3E,WAAS,QAAQ,MAAM,IAAI,CAAC;AAC9B,CAAC;AAED,IAAO,mBAAQ;;;AC1Jf,IAAM,oBAAoB,cAAM,YAAY;AAAA,EAC1C;AAAA,EAAO;AAAA,EAAiB;AAAA,EAAkB;AAAA,EAAgB;AAAA,EAC1D;AAAA,EAAW;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAqB;AAAA,EAChD;AAAA,EAAiB;AAAA,EAAY;AAAA,EAAgB;AAAA,EAC7C;AAAA,EAAW;AAAA,EAAe;AAC5B,CAAC;AAgBD,IAAO,uBAAQ,gBAAc;AAC3B,QAAM,SAAS,CAAC;AAChB,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,gBAAc,WAAW,MAAM,IAAI,EAAE,QAAQ,SAAS,OAAO,MAAM;AACjE,QAAI,KAAK,QAAQ,GAAG;AACpB,UAAM,KAAK,UAAU,GAAG,CAAC,EAAE,KAAK,EAAE,YAAY;AAC9C,UAAM,KAAK,UAAU,IAAI,CAAC,EAAE,KAAK;AAEjC,QAAI,CAAC,OAAQ,OAAO,GAAG,KAAK,kBAAkB,GAAG,GAAI;AACnD;AAAA,IACF;AAEA,QAAI,QAAQ,cAAc;AACxB,UAAI,OAAO,GAAG,GAAG;AACf,eAAO,GAAG,EAAE,KAAK,GAAG;AAAA,MACtB,OAAO;AACL,eAAO,GAAG,IAAI,CAAC,GAAG;AAAA,MACpB;AAAA,IACF,OAAO;AACL,aAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,MAAM;AAAA,IACzD;AAAA,EACF,CAAC;AAED,SAAO;AACT;;;ACjDA,IAAM,aAAa,OAAO,WAAW;AAErC,SAAS,gBAAgB,QAAQ;AAC/B,SAAO,UAAU,OAAO,MAAM,EAAE,KAAK,EAAE,YAAY;AACrD;AAEA,SAAS,eAAe,OAAO;AAC7B,MAAI,UAAU,SAAS,SAAS,MAAM;AACpC,WAAO;AAAA,EACT;AAEA,SAAO,cAAM,QAAQ,KAAK,IAAI,MAAM,IAAI,cAAc,IAAI,OAAO,KAAK;AACxE;AAEA,SAAS,YAAY,KAAK;AACxB,QAAM,SAAS,uBAAO,OAAO,IAAI;AACjC,QAAM,WAAW;AACjB,MAAI;AAEJ,SAAQ,QAAQ,SAAS,KAAK,GAAG,GAAI;AACnC,WAAO,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC;AAAA,EAC5B;AAEA,SAAO;AACT;AAEA,IAAM,oBAAoB,CAAC,QAAQ,iCAAiC,KAAK,IAAI,KAAK,CAAC;AAEnF,SAAS,iBAAiB,SAAS,OAAO,QAAQC,SAAQ,oBAAoB;AAC5E,MAAI,cAAM,WAAWA,OAAM,GAAG;AAC5B,WAAOA,QAAO,KAAK,MAAM,OAAO,MAAM;AAAA,EACxC;AAEA,MAAI,oBAAoB;AACtB,YAAQ;AAAA,EACV;AAEA,MAAI,CAAC,cAAM,SAAS,KAAK;AAAG;AAE5B,MAAI,cAAM,SAASA,OAAM,GAAG;AAC1B,WAAO,MAAM,QAAQA,OAAM,MAAM;AAAA,EACnC;AAEA,MAAI,cAAM,SAASA,OAAM,GAAG;AAC1B,WAAOA,QAAO,KAAK,KAAK;AAAA,EAC1B;AACF;AAEA,SAAS,aAAa,QAAQ;AAC5B,SAAO,OAAO,KAAK,EAChB,YAAY,EAAE,QAAQ,mBAAmB,CAAC,GAAG,MAAM,QAAQ;AAC1D,WAAO,KAAK,YAAY,IAAI;AAAA,EAC9B,CAAC;AACL;AAEA,SAAS,eAAe,KAAK,QAAQ;AACnC,QAAM,eAAe,cAAM,YAAY,MAAM,MAAM;AAEnD,GAAC,OAAO,OAAO,KAAK,EAAE,QAAQ,gBAAc;AAC1C,WAAO,eAAe,KAAK,aAAa,cAAc;AAAA,MACpD,OAAO,SAAS,MAAM,MAAM,MAAM;AAChC,eAAO,KAAK,UAAU,EAAE,KAAK,MAAM,QAAQ,MAAM,MAAM,IAAI;AAAA,MAC7D;AAAA,MACA,cAAc;AAAA,IAChB,CAAC;AAAA,EACH,CAAC;AACH;AAEA,IAAM,eAAN,MAAmB;AAAA,EACjB,YAAY,SAAS;AACnB,eAAW,KAAK,IAAI,OAAO;AAAA,EAC7B;AAAA,EAEA,IAAI,QAAQ,gBAAgB,SAAS;AACnC,UAAMC,QAAO;AAEb,aAAS,UAAU,QAAQ,SAAS,UAAU;AAC5C,YAAM,UAAU,gBAAgB,OAAO;AAEvC,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC1D;AAEA,YAAM,MAAM,cAAM,QAAQA,OAAM,OAAO;AAEvC,UAAG,CAAC,OAAOA,MAAK,GAAG,MAAM,UAAa,aAAa,QAAS,aAAa,UAAaA,MAAK,GAAG,MAAM,OAAQ;AAC1G,QAAAA,MAAK,OAAO,OAAO,IAAI,eAAe,MAAM;AAAA,MAC9C;AAAA,IACF;AAEA,UAAM,aAAa,CAAC,SAAS,aAC3B,cAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,UAAU,QAAQ,SAAS,QAAQ,CAAC;AAElF,QAAI,cAAM,cAAc,MAAM,KAAK,kBAAkB,KAAK,aAAa;AACrE,iBAAW,QAAQ,cAAc;AAAA,IACnC,WAAU,cAAM,SAAS,MAAM,MAAM,SAAS,OAAO,KAAK,MAAM,CAAC,kBAAkB,MAAM,GAAG;AAC1F,iBAAW,qBAAa,MAAM,GAAG,cAAc;AAAA,IACjD,WAAW,cAAM,UAAU,MAAM,GAAG;AAClC,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,GAAG;AAC3C,kBAAU,OAAO,KAAK,OAAO;AAAA,MAC/B;AAAA,IACF,OAAO;AACL,gBAAU,QAAQ,UAAU,gBAAgB,QAAQ,OAAO;AAAA,IAC7D;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,IAAI,QAAQ,QAAQ;AAClB,aAAS,gBAAgB,MAAM;AAE/B,QAAI,QAAQ;AACV,YAAM,MAAM,cAAM,QAAQ,MAAM,MAAM;AAEtC,UAAI,KAAK;AACP,cAAM,QAAQ,KAAK,GAAG;AAEtB,YAAI,CAAC,QAAQ;AACX,iBAAO;AAAA,QACT;AAEA,YAAI,WAAW,MAAM;AACnB,iBAAO,YAAY,KAAK;AAAA,QAC1B;AAEA,YAAI,cAAM,WAAW,MAAM,GAAG;AAC5B,iBAAO,OAAO,KAAK,MAAM,OAAO,GAAG;AAAA,QACrC;AAEA,YAAI,cAAM,SAAS,MAAM,GAAG;AAC1B,iBAAO,OAAO,KAAK,KAAK;AAAA,QAC1B;AAEA,cAAM,IAAI,UAAU,wCAAwC;AAAA,MAC9D;AAAA,IACF;AAAA,EACF;AAAA,EAEA,IAAI,QAAQ,SAAS;AACnB,aAAS,gBAAgB,MAAM;AAE/B,QAAI,QAAQ;AACV,YAAM,MAAM,cAAM,QAAQ,MAAM,MAAM;AAEtC,aAAO,CAAC,EAAE,OAAO,KAAK,GAAG,MAAM,WAAc,CAAC,WAAW,iBAAiB,MAAM,KAAK,GAAG,GAAG,KAAK,OAAO;AAAA,IACzG;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,QAAQ,SAAS;AACtB,UAAMA,QAAO;AACb,QAAI,UAAU;AAEd,aAAS,aAAa,SAAS;AAC7B,gBAAU,gBAAgB,OAAO;AAEjC,UAAI,SAAS;AACX,cAAM,MAAM,cAAM,QAAQA,OAAM,OAAO;AAEvC,YAAI,QAAQ,CAAC,WAAW,iBAAiBA,OAAMA,MAAK,GAAG,GAAG,KAAK,OAAO,IAAI;AACxE,iBAAOA,MAAK,GAAG;AAEf,oBAAU;AAAA,QACZ;AAAA,MACF;AAAA,IACF;AAEA,QAAI,cAAM,QAAQ,MAAM,GAAG;AACzB,aAAO,QAAQ,YAAY;AAAA,IAC7B,OAAO;AACL,mBAAa,MAAM;AAAA,IACrB;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,SAAS;AACb,UAAM,OAAO,OAAO,KAAK,IAAI;AAC7B,QAAI,IAAI,KAAK;AACb,QAAI,UAAU;AAEd,WAAO,KAAK;AACV,YAAM,MAAM,KAAK,CAAC;AAClB,UAAG,CAAC,WAAW,iBAAiB,MAAM,KAAK,GAAG,GAAG,KAAK,SAAS,IAAI,GAAG;AACpE,eAAO,KAAK,GAAG;AACf,kBAAU;AAAA,MACZ;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,UAAU,QAAQ;AAChB,UAAMA,QAAO;AACb,UAAM,UAAU,CAAC;AAEjB,kBAAM,QAAQ,MAAM,CAAC,OAAO,WAAW;AACrC,YAAM,MAAM,cAAM,QAAQ,SAAS,MAAM;AAEzC,UAAI,KAAK;AACP,QAAAA,MAAK,GAAG,IAAI,eAAe,KAAK;AAChC,eAAOA,MAAK,MAAM;AAClB;AAAA,MACF;AAEA,YAAM,aAAa,SAAS,aAAa,MAAM,IAAI,OAAO,MAAM,EAAE,KAAK;AAEvE,UAAI,eAAe,QAAQ;AACzB,eAAOA,MAAK,MAAM;AAAA,MACpB;AAEA,MAAAA,MAAK,UAAU,IAAI,eAAe,KAAK;AAEvC,cAAQ,UAAU,IAAI;AAAA,IACxB,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEA,UAAU,SAAS;AACjB,WAAO,KAAK,YAAY,OAAO,MAAM,GAAG,OAAO;AAAA,EACjD;AAAA,EAEA,OAAO,WAAW;AAChB,UAAM,MAAM,uBAAO,OAAO,IAAI;AAE9B,kBAAM,QAAQ,MAAM,CAAC,OAAO,WAAW;AACrC,eAAS,QAAQ,UAAU,UAAU,IAAI,MAAM,IAAI,aAAa,cAAM,QAAQ,KAAK,IAAI,MAAM,KAAK,IAAI,IAAI;AAAA,IAC5G,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEA,CAAC,OAAO,QAAQ,IAAI;AAClB,WAAO,OAAO,QAAQ,KAAK,OAAO,CAAC,EAAE,OAAO,QAAQ,EAAE;AAAA,EACxD;AAAA,EAEA,WAAW;AACT,WAAO,OAAO,QAAQ,KAAK,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,QAAQ,KAAK,MAAM,SAAS,OAAO,KAAK,EAAE,KAAK,IAAI;AAAA,EAChG;AAAA,EAEA,KAAK,OAAO,WAAW,IAAI;AACzB,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,KAAK,OAAO;AACjB,WAAO,iBAAiB,OAAO,QAAQ,IAAI,KAAK,KAAK;AAAA,EACvD;AAAA,EAEA,OAAO,OAAO,UAAU,SAAS;AAC/B,UAAM,WAAW,IAAI,KAAK,KAAK;AAE/B,YAAQ,QAAQ,CAAC,WAAW,SAAS,IAAI,MAAM,CAAC;AAEhD,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,SAAS,QAAQ;AACtB,UAAM,YAAY,KAAK,UAAU,IAAK,KAAK,UAAU,IAAI;AAAA,MACvD,WAAW,CAAC;AAAA,IACd;AAEA,UAAM,YAAY,UAAU;AAC5B,UAAMC,aAAY,KAAK;AAEvB,aAAS,eAAe,SAAS;AAC/B,YAAM,UAAU,gBAAgB,OAAO;AAEvC,UAAI,CAAC,UAAU,OAAO,GAAG;AACvB,uBAAeA,YAAW,OAAO;AACjC,kBAAU,OAAO,IAAI;AAAA,MACvB;AAAA,IACF;AAEA,kBAAM,QAAQ,MAAM,IAAI,OAAO,QAAQ,cAAc,IAAI,eAAe,MAAM;AAE9E,WAAO;AAAA,EACT;AACF;AAEA,aAAa,SAAS,CAAC,gBAAgB,kBAAkB,UAAU,mBAAmB,cAAc,eAAe,CAAC;AAGpH,cAAM,kBAAkB,aAAa,WAAW,CAAC,EAAC,MAAK,GAAG,QAAQ;AAChE,MAAI,SAAS,IAAI,CAAC,EAAE,YAAY,IAAI,IAAI,MAAM,CAAC;AAC/C,SAAO;AAAA,IACL,KAAK,MAAM;AAAA,IACX,IAAI,aAAa;AACf,WAAK,MAAM,IAAI;AAAA,IACjB;AAAA,EACF;AACF,CAAC;AAED,cAAM,cAAc,YAAY;AAEhC,IAAO,uBAAQ;;;AC/RA,SAAR,cAA+B,KAAK,UAAU;AACnD,QAAM,SAAS,QAAQ;AACvB,QAAM,UAAU,YAAY;AAC5B,QAAM,UAAU,qBAAa,KAAK,QAAQ,OAAO;AACjD,MAAI,OAAO,QAAQ;AAEnB,gBAAM,QAAQ,KAAK,SAAS,UAAU,IAAI;AACxC,WAAO,GAAG,KAAK,QAAQ,MAAM,QAAQ,UAAU,GAAG,WAAW,SAAS,SAAS,MAAS;AAAA,EAC1F,CAAC;AAED,UAAQ,UAAU;AAElB,SAAO;AACT;;;ACzBe,SAAR,SAA0B,OAAO;AACtC,SAAO,CAAC,EAAE,SAAS,MAAM;AAC3B;;;ACUA,SAAS,cAAc,SAAS,QAAQ,SAAS;AAE/C,qBAAW,KAAK,MAAM,WAAW,OAAO,aAAa,SAAS,mBAAW,cAAc,QAAQ,OAAO;AACtG,OAAK,OAAO;AACd;AAEA,cAAM,SAAS,eAAe,oBAAY;AAAA,EACxC,YAAY;AACd,CAAC;AAED,IAAO,wBAAQ;;;ACXA,SAAR,OAAwB,SAAS,QAAQ,UAAU;AACxD,QAAMC,kBAAiB,SAAS,OAAO;AACvC,MAAI,CAAC,SAAS,UAAU,CAACA,mBAAkBA,gBAAe,SAAS,MAAM,GAAG;AAC1E,YAAQ,QAAQ;AAAA,EAClB,OAAO;AACL,WAAO,IAAI;AAAA,MACT,qCAAqC,SAAS;AAAA,MAC9C,CAAC,mBAAW,iBAAiB,mBAAW,gBAAgB,EAAE,KAAK,MAAM,SAAS,SAAS,GAAG,IAAI,CAAC;AAAA,MAC/F,SAAS;AAAA,MACT,SAAS;AAAA,MACT;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;ACxBe,SAAR,cAA+B,KAAK;AACzC,QAAM,QAAQ,4BAA4B,KAAK,GAAG;AAClD,SAAO,SAAS,MAAM,CAAC,KAAK;AAC9B;;;ACGA,SAAS,YAAY,cAAc,KAAK;AACtC,iBAAe,gBAAgB;AAC/B,QAAM,QAAQ,IAAI,MAAM,YAAY;AACpC,QAAM,aAAa,IAAI,MAAM,YAAY;AACzC,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI;AAEJ,QAAM,QAAQ,SAAY,MAAM;AAEhC,SAAO,SAAS,KAAK,aAAa;AAChC,UAAM,MAAM,KAAK,IAAI;AAErB,UAAM,YAAY,WAAW,IAAI;AAEjC,QAAI,CAAC,eAAe;AAClB,sBAAgB;AAAA,IAClB;AAEA,UAAM,IAAI,IAAI;AACd,eAAW,IAAI,IAAI;AAEnB,QAAI,IAAI;AACR,QAAI,aAAa;AAEjB,WAAO,MAAM,MAAM;AACjB,oBAAc,MAAM,GAAG;AACvB,UAAI,IAAI;AAAA,IACV;AAEA,YAAQ,OAAO,KAAK;AAEpB,QAAI,SAAS,MAAM;AACjB,cAAQ,OAAO,KAAK;AAAA,IACtB;AAEA,QAAI,MAAM,gBAAgB,KAAK;AAC7B;AAAA,IACF;AAEA,UAAM,SAAS,aAAa,MAAM;AAElC,WAAO,SAAS,KAAK,MAAM,aAAa,MAAO,MAAM,IAAI;AAAA,EAC3D;AACF;AAEA,IAAO,sBAAQ;;;AChDf,SAAS,SAAS,IAAI,MAAM;AAC1B,MAAI,YAAY;AAChB,MAAI,YAAY,MAAO;AACvB,MAAI;AACJ,MAAI;AAEJ,QAAM,SAAS,CAAC,MAAM,MAAM,KAAK,IAAI,MAAM;AACzC,gBAAY;AACZ,eAAW;AACX,QAAI,OAAO;AACT,mBAAa,KAAK;AAClB,cAAQ;AAAA,IACV;AACA,OAAG,MAAM,MAAM,IAAI;AAAA,EACrB;AAEA,QAAM,YAAY,IAAI,SAAS;AAC7B,UAAM,MAAM,KAAK,IAAI;AACrB,UAAM,SAAS,MAAM;AACrB,QAAK,UAAU,WAAW;AACxB,aAAO,MAAM,GAAG;AAAA,IAClB,OAAO;AACL,iBAAW;AACX,UAAI,CAAC,OAAO;AACV,gBAAQ,WAAW,MAAM;AACvB,kBAAQ;AACR,iBAAO,QAAQ;AAAA,QACjB,GAAG,YAAY,MAAM;AAAA,MACvB;AAAA,IACF;AAAA,EACF;AAEA,QAAM,QAAQ,MAAM,YAAY,OAAO,QAAQ;AAE/C,SAAO,CAAC,WAAW,KAAK;AAC1B;AAEA,IAAO,mBAAQ;;;ACvCR,IAAM,uBAAuB,CAAC,UAAU,kBAAkB,OAAO,MAAM;AAC5E,MAAI,gBAAgB;AACpB,QAAM,eAAe,oBAAY,IAAI,GAAG;AAExC,SAAO,iBAAS,OAAK;AACnB,UAAM,SAAS,EAAE;AACjB,UAAM,QAAQ,EAAE,mBAAmB,EAAE,QAAQ;AAC7C,UAAM,gBAAgB,SAAS;AAC/B,UAAM,OAAO,aAAa,aAAa;AACvC,UAAM,UAAU,UAAU;AAE1B,oBAAgB;AAEhB,UAAM,OAAO;AAAA,MACX;AAAA,MACA;AAAA,MACA,UAAU,QAAS,SAAS,QAAS;AAAA,MACrC,OAAO;AAAA,MACP,MAAM,OAAO,OAAO;AAAA,MACpB,WAAW,QAAQ,SAAS,WAAW,QAAQ,UAAU,OAAO;AAAA,MAChE,OAAO;AAAA,MACP,kBAAkB,SAAS;AAAA,MAC3B,CAAC,mBAAmB,aAAa,QAAQ,GAAG;AAAA,IAC9C;AAEA,aAAS,IAAI;AAAA,EACf,GAAG,IAAI;AACT;AAEO,IAAM,yBAAyB,CAAC,OAAO,cAAc;AAC1D,QAAM,mBAAmB,SAAS;AAElC,SAAO,CAAC,CAAC,WAAW,UAAU,CAAC,EAAE;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC,GAAG,UAAU,CAAC,CAAC;AAClB;AAEO,IAAM,iBAAiB,CAAC,OAAO,IAAI,SAAS,cAAM,KAAK,MAAM,GAAG,GAAG,IAAI,CAAC;;;ACtC/E,IAAO,0BAAQ,iBAAS;AAAA;AAAA;AAAA,EAIrB,SAAS,qBAAqB;AAC7B,UAAM,OAAO,kBAAkB,KAAK,UAAU,SAAS;AACvD,UAAM,iBAAiB,SAAS,cAAc,GAAG;AACjD,QAAI;AAQJ,aAAS,WAAW,KAAK;AACvB,UAAI,OAAO;AAEX,UAAI,MAAM;AAER,uBAAe,aAAa,QAAQ,IAAI;AACxC,eAAO,eAAe;AAAA,MACxB;AAEA,qBAAe,aAAa,QAAQ,IAAI;AAGxC,aAAO;AAAA,QACL,MAAM,eAAe;AAAA,QACrB,UAAU,eAAe,WAAW,eAAe,SAAS,QAAQ,MAAM,EAAE,IAAI;AAAA,QAChF,MAAM,eAAe;AAAA,QACrB,QAAQ,eAAe,SAAS,eAAe,OAAO,QAAQ,OAAO,EAAE,IAAI;AAAA,QAC3E,MAAM,eAAe,OAAO,eAAe,KAAK,QAAQ,MAAM,EAAE,IAAI;AAAA,QACpE,UAAU,eAAe;AAAA,QACzB,MAAM,eAAe;AAAA,QACrB,UAAW,eAAe,SAAS,OAAO,CAAC,MAAM,MAC/C,eAAe,WACf,MAAM,eAAe;AAAA,MACzB;AAAA,IACF;AAEA,gBAAY,WAAW,OAAO,SAAS,IAAI;AAQ3C,WAAO,SAAS,gBAAgB,YAAY;AAC1C,YAAM,SAAU,cAAM,SAAS,UAAU,IAAK,WAAW,UAAU,IAAI;AACvE,aAAQ,OAAO,aAAa,UAAU,YAClC,OAAO,SAAS,UAAU;AAAA,IAChC;AAAA,EACF,EAAG;AAAA;AAAA;AAAA,EAGF,SAAS,wBAAwB;AAChC,WAAO,SAAS,kBAAkB;AAChC,aAAO;AAAA,IACT;AAAA,EACF,EAAG;AAAA;;;AC/DL,IAAO,kBAAQ,iBAAS;AAAA;AAAA,EAGtB;AAAA,IACE,MAAM,MAAM,OAAO,SAAS,MAAM,QAAQ,QAAQ;AAChD,YAAM,SAAS,CAAC,OAAO,MAAM,mBAAmB,KAAK,CAAC;AAEtD,oBAAM,SAAS,OAAO,KAAK,OAAO,KAAK,aAAa,IAAI,KAAK,OAAO,EAAE,YAAY,CAAC;AAEnF,oBAAM,SAAS,IAAI,KAAK,OAAO,KAAK,UAAU,IAAI;AAElD,oBAAM,SAAS,MAAM,KAAK,OAAO,KAAK,YAAY,MAAM;AAExD,iBAAW,QAAQ,OAAO,KAAK,QAAQ;AAEvC,eAAS,SAAS,OAAO,KAAK,IAAI;AAAA,IACpC;AAAA,IAEA,KAAK,MAAM;AACT,YAAM,QAAQ,SAAS,OAAO,MAAM,IAAI,OAAO,eAAe,OAAO,WAAW,CAAC;AACjF,aAAQ,QAAQ,mBAAmB,MAAM,CAAC,CAAC,IAAI;AAAA,IACjD;AAAA,IAEA,OAAO,MAAM;AACX,WAAK,MAAM,MAAM,IAAI,KAAK,IAAI,IAAI,KAAQ;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA,EAKA;AAAA,IACE,QAAQ;AAAA,IAAC;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,IACA,SAAS;AAAA,IAAC;AAAA,EACZ;AAAA;;;AC/Ba,SAAR,cAA+B,KAAK;AAIzC,SAAO,8BAA8B,KAAK,GAAG;AAC/C;;;ACJe,SAAR,YAA6B,SAAS,aAAa;AACxD,SAAO,cACH,QAAQ,QAAQ,UAAU,EAAE,IAAI,MAAM,YAAY,QAAQ,QAAQ,EAAE,IACpE;AACN;;;ACCe,SAAR,cAA+B,SAAS,cAAc;AAC3D,MAAI,WAAW,CAAC,cAAc,YAAY,GAAG;AAC3C,WAAO,YAAY,SAAS,YAAY;AAAA,EAC1C;AACA,SAAO;AACT;;;ACfA,IAAM,kBAAkB,CAAC,UAAU,iBAAiB,uBAAe,EAAE,GAAG,MAAM,IAAI;AAWnE,SAAR,YAA6B,SAAS,SAAS;AAEpD,YAAU,WAAW,CAAC;AACtB,QAAM,SAAS,CAAC;AAEhB,WAAS,eAAe,QAAQ,QAAQ,UAAU;AAChD,QAAI,cAAM,cAAc,MAAM,KAAK,cAAM,cAAc,MAAM,GAAG;AAC9D,aAAO,cAAM,MAAM,KAAK,EAAC,SAAQ,GAAG,QAAQ,MAAM;AAAA,IACpD,WAAW,cAAM,cAAc,MAAM,GAAG;AACtC,aAAO,cAAM,MAAM,CAAC,GAAG,MAAM;AAAA,IAC/B,WAAW,cAAM,QAAQ,MAAM,GAAG;AAChC,aAAO,OAAO,MAAM;AAAA,IACtB;AACA,WAAO;AAAA,EACT;AAGA,WAAS,oBAAoB,GAAG,GAAG,UAAU;AAC3C,QAAI,CAAC,cAAM,YAAY,CAAC,GAAG;AACzB,aAAO,eAAe,GAAG,GAAG,QAAQ;AAAA,IACtC,WAAW,CAAC,cAAM,YAAY,CAAC,GAAG;AAChC,aAAO,eAAe,QAAW,GAAG,QAAQ;AAAA,IAC9C;AAAA,EACF;AAGA,WAAS,iBAAiB,GAAG,GAAG;AAC9B,QAAI,CAAC,cAAM,YAAY,CAAC,GAAG;AACzB,aAAO,eAAe,QAAW,CAAC;AAAA,IACpC;AAAA,EACF;AAGA,WAAS,iBAAiB,GAAG,GAAG;AAC9B,QAAI,CAAC,cAAM,YAAY,CAAC,GAAG;AACzB,aAAO,eAAe,QAAW,CAAC;AAAA,IACpC,WAAW,CAAC,cAAM,YAAY,CAAC,GAAG;AAChC,aAAO,eAAe,QAAW,CAAC;AAAA,IACpC;AAAA,EACF;AAGA,WAAS,gBAAgB,GAAG,GAAG,MAAM;AACnC,QAAI,QAAQ,SAAS;AACnB,aAAO,eAAe,GAAG,CAAC;AAAA,IAC5B,WAAW,QAAQ,SAAS;AAC1B,aAAO,eAAe,QAAW,CAAC;AAAA,IACpC;AAAA,EACF;AAEA,QAAM,WAAW;AAAA,IACf,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,mBAAmB;AAAA,IACnB,kBAAkB;AAAA,IAClB,SAAS;AAAA,IACT,gBAAgB;AAAA,IAChB,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,SAAS;AAAA,IACT,cAAc;AAAA,IACd,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,kBAAkB;AAAA,IAClB,oBAAoB;AAAA,IACpB,YAAY;AAAA,IACZ,kBAAkB;AAAA,IAClB,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,WAAW;AAAA,IACX,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,kBAAkB;AAAA,IAClB,gBAAgB;AAAA,IAChB,SAAS,CAAC,GAAG,MAAM,oBAAoB,gBAAgB,CAAC,GAAG,gBAAgB,CAAC,GAAG,IAAI;AAAA,EACrF;AAEA,gBAAM,QAAQ,OAAO,KAAK,OAAO,OAAO,CAAC,GAAG,SAAS,OAAO,CAAC,GAAG,SAAS,mBAAmB,MAAM;AAChG,UAAMC,SAAQ,SAAS,IAAI,KAAK;AAChC,UAAM,cAAcA,OAAM,QAAQ,IAAI,GAAG,QAAQ,IAAI,GAAG,IAAI;AAC5D,IAAC,cAAM,YAAY,WAAW,KAAKA,WAAU,oBAAqB,OAAO,IAAI,IAAI;AAAA,EACnF,CAAC;AAED,SAAO;AACT;;;AChGA,IAAO,wBAAQ,CAAC,WAAW;AACzB,QAAM,YAAY,YAAY,CAAC,GAAG,MAAM;AAExC,MAAI,EAAC,MAAM,eAAe,gBAAgB,gBAAgB,SAAS,KAAI,IAAI;AAE3E,YAAU,UAAU,UAAU,qBAAa,KAAK,OAAO;AAEvD,YAAU,MAAM,SAAS,cAAc,UAAU,SAAS,UAAU,GAAG,GAAG,OAAO,QAAQ,OAAO,gBAAgB;AAGhH,MAAI,MAAM;AACR,YAAQ;AAAA,MAAI;AAAA,MAAiB,WAC3B,MAAM,KAAK,YAAY,MAAM,OAAO,KAAK,WAAW,SAAS,mBAAmB,KAAK,QAAQ,CAAC,IAAI,GAAG;AAAA,IACvG;AAAA,EACF;AAEA,MAAI;AAEJ,MAAI,cAAM,WAAW,IAAI,GAAG;AAC1B,QAAI,iBAAS,yBAAyB,iBAAS,gCAAgC;AAC7E,cAAQ,eAAe,MAAS;AAAA,IAClC,YAAY,cAAc,QAAQ,eAAe,OAAO,OAAO;AAE7D,YAAM,CAAC,MAAM,GAAG,MAAM,IAAI,cAAc,YAAY,MAAM,GAAG,EAAE,IAAI,WAAS,MAAM,KAAK,CAAC,EAAE,OAAO,OAAO,IAAI,CAAC;AAC7G,cAAQ,eAAe,CAAC,QAAQ,uBAAuB,GAAG,MAAM,EAAE,KAAK,IAAI,CAAC;AAAA,IAC9E;AAAA,EACF;AAMA,MAAI,iBAAS,uBAAuB;AAClC,qBAAiB,cAAM,WAAW,aAAa,MAAM,gBAAgB,cAAc,SAAS;AAE5F,QAAI,iBAAkB,kBAAkB,SAAS,wBAAgB,UAAU,GAAG,GAAI;AAEhF,YAAM,YAAY,kBAAkB,kBAAkB,gBAAQ,KAAK,cAAc;AAEjF,UAAI,WAAW;AACb,gBAAQ,IAAI,gBAAgB,SAAS;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;;;AC5CA,IAAM,wBAAwB,OAAO,mBAAmB;AAExD,IAAO,cAAQ,yBAAyB,SAAU,QAAQ;AACxD,SAAO,IAAI,QAAQ,SAAS,mBAAmB,SAAS,QAAQ;AAC9D,UAAM,UAAU,sBAAc,MAAM;AACpC,QAAI,cAAc,QAAQ;AAC1B,UAAM,iBAAiB,qBAAa,KAAK,QAAQ,OAAO,EAAE,UAAU;AACpE,QAAI,EAAC,cAAc,kBAAkB,mBAAkB,IAAI;AAC3D,QAAI;AACJ,QAAI,iBAAiB;AACrB,QAAI,aAAa;AAEjB,aAAS,OAAO;AACd,qBAAe,YAAY;AAC3B,uBAAiB,cAAc;AAE/B,cAAQ,eAAe,QAAQ,YAAY,YAAY,UAAU;AAEjE,cAAQ,UAAU,QAAQ,OAAO,oBAAoB,SAAS,UAAU;AAAA,IAC1E;AAEA,QAAI,UAAU,IAAI,eAAe;AAEjC,YAAQ,KAAK,QAAQ,OAAO,YAAY,GAAG,QAAQ,KAAK,IAAI;AAG5D,YAAQ,UAAU,QAAQ;AAE1B,aAAS,YAAY;AACnB,UAAI,CAAC,SAAS;AACZ;AAAA,MACF;AAEA,YAAM,kBAAkB,qBAAa;AAAA,QACnC,2BAA2B,WAAW,QAAQ,sBAAsB;AAAA,MACtE;AACA,YAAM,eAAe,CAAC,gBAAgB,iBAAiB,UAAU,iBAAiB,SAChF,QAAQ,eAAe,QAAQ;AACjC,YAAM,WAAW;AAAA,QACf,MAAM;AAAA,QACN,QAAQ,QAAQ;AAAA,QAChB,YAAY,QAAQ;AAAA,QACpB,SAAS;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAEA,aAAO,SAAS,SAAS,OAAO;AAC9B,gBAAQ,KAAK;AACb,aAAK;AAAA,MACP,GAAG,SAAS,QAAQ,KAAK;AACvB,eAAO,GAAG;AACV,aAAK;AAAA,MACP,GAAG,QAAQ;AAGX,gBAAU;AAAA,IACZ;AAEA,QAAI,eAAe,SAAS;AAE1B,cAAQ,YAAY;AAAA,IACtB,OAAO;AAEL,cAAQ,qBAAqB,SAAS,aAAa;AACjD,YAAI,CAAC,WAAW,QAAQ,eAAe,GAAG;AACxC;AAAA,QACF;AAMA,YAAI,QAAQ,WAAW,KAAK,EAAE,QAAQ,eAAe,QAAQ,YAAY,QAAQ,OAAO,MAAM,IAAI;AAChG;AAAA,QACF;AAGA,mBAAW,SAAS;AAAA,MACtB;AAAA,IACF;AAGA,YAAQ,UAAU,SAAS,cAAc;AACvC,UAAI,CAAC,SAAS;AACZ;AAAA,MACF;AAEA,aAAO,IAAI,mBAAW,mBAAmB,mBAAW,cAAc,QAAQ,OAAO,CAAC;AAGlF,gBAAU;AAAA,IACZ;AAGA,YAAQ,UAAU,SAAS,cAAc;AAGvC,aAAO,IAAI,mBAAW,iBAAiB,mBAAW,aAAa,QAAQ,OAAO,CAAC;AAG/E,gBAAU;AAAA,IACZ;AAGA,YAAQ,YAAY,SAAS,gBAAgB;AAC3C,UAAI,sBAAsB,QAAQ,UAAU,gBAAgB,QAAQ,UAAU,gBAAgB;AAC9F,YAAMC,gBAAe,QAAQ,gBAAgB;AAC7C,UAAI,QAAQ,qBAAqB;AAC/B,8BAAsB,QAAQ;AAAA,MAChC;AACA,aAAO,IAAI;AAAA,QACT;AAAA,QACAA,cAAa,sBAAsB,mBAAW,YAAY,mBAAW;AAAA,QACrE;AAAA,QACA;AAAA,MAAO,CAAC;AAGV,gBAAU;AAAA,IACZ;AAGA,oBAAgB,UAAa,eAAe,eAAe,IAAI;AAG/D,QAAI,sBAAsB,SAAS;AACjC,oBAAM,QAAQ,eAAe,OAAO,GAAG,SAAS,iBAAiB,KAAK,KAAK;AACzE,gBAAQ,iBAAiB,KAAK,GAAG;AAAA,MACnC,CAAC;AAAA,IACH;AAGA,QAAI,CAAC,cAAM,YAAY,QAAQ,eAAe,GAAG;AAC/C,cAAQ,kBAAkB,CAAC,CAAC,QAAQ;AAAA,IACtC;AAGA,QAAI,gBAAgB,iBAAiB,QAAQ;AAC3C,cAAQ,eAAe,QAAQ;AAAA,IACjC;AAGA,QAAI,oBAAoB;AACtB,MAAC,CAAC,mBAAmB,aAAa,IAAI,qBAAqB,oBAAoB,IAAI;AACnF,cAAQ,iBAAiB,YAAY,iBAAiB;AAAA,IACxD;AAGA,QAAI,oBAAoB,QAAQ,QAAQ;AACtC,MAAC,CAAC,iBAAiB,WAAW,IAAI,qBAAqB,gBAAgB;AAEvE,cAAQ,OAAO,iBAAiB,YAAY,eAAe;AAE3D,cAAQ,OAAO,iBAAiB,WAAW,WAAW;AAAA,IACxD;AAEA,QAAI,QAAQ,eAAe,QAAQ,QAAQ;AAGzC,mBAAa,YAAU;AACrB,YAAI,CAAC,SAAS;AACZ;AAAA,QACF;AACA,eAAO,CAAC,UAAU,OAAO,OAAO,IAAI,sBAAc,MAAM,QAAQ,OAAO,IAAI,MAAM;AACjF,gBAAQ,MAAM;AACd,kBAAU;AAAA,MACZ;AAEA,cAAQ,eAAe,QAAQ,YAAY,UAAU,UAAU;AAC/D,UAAI,QAAQ,QAAQ;AAClB,gBAAQ,OAAO,UAAU,WAAW,IAAI,QAAQ,OAAO,iBAAiB,SAAS,UAAU;AAAA,MAC7F;AAAA,IACF;AAEA,UAAM,WAAW,cAAc,QAAQ,GAAG;AAE1C,QAAI,YAAY,iBAAS,UAAU,QAAQ,QAAQ,MAAM,IAAI;AAC3D,aAAO,IAAI,mBAAW,0BAA0B,WAAW,KAAK,mBAAW,iBAAiB,MAAM,CAAC;AACnG;AAAA,IACF;AAIA,YAAQ,KAAK,eAAe,IAAI;AAAA,EAClC,CAAC;AACH;;;ACjMA,IAAM,iBAAiB,CAAC,SAAS,YAAY;AAC3C,MAAI,aAAa,IAAI,gBAAgB;AAErC,MAAI;AAEJ,QAAM,UAAU,SAAU,QAAQ;AAChC,QAAI,CAAC,SAAS;AACZ,gBAAU;AACV,kBAAY;AACZ,YAAM,MAAM,kBAAkB,QAAQ,SAAS,KAAK;AACpD,iBAAW,MAAM,eAAe,qBAAa,MAAM,IAAI,sBAAc,eAAe,QAAQ,IAAI,UAAU,GAAG,CAAC;AAAA,IAChH;AAAA,EACF;AAEA,MAAI,QAAQ,WAAW,WAAW,MAAM;AACtC,YAAQ,IAAI,mBAAW,WAAW,OAAO,mBAAmB,mBAAW,SAAS,CAAC;AAAA,EACnF,GAAG,OAAO;AAEV,QAAM,cAAc,MAAM;AACxB,QAAI,SAAS;AACX,eAAS,aAAa,KAAK;AAC3B,cAAQ;AACR,cAAQ,QAAQ,CAAAC,YAAU;AACxB,QAAAA,YACCA,QAAO,sBAAsBA,QAAO,oBAAoB,SAAS,OAAO,IAAIA,QAAO,YAAY,OAAO;AAAA,MACzG,CAAC;AACD,gBAAU;AAAA,IACZ;AAAA,EACF;AAEA,UAAQ,QAAQ,CAACA,YAAWA,WAAUA,QAAO,oBAAoBA,QAAO,iBAAiB,SAAS,OAAO,CAAC;AAE1G,QAAM,EAAC,OAAM,IAAI;AAEjB,SAAO,cAAc;AAErB,SAAO,CAAC,QAAQ,MAAM;AACpB,aAAS,aAAa,KAAK;AAC3B,YAAQ;AAAA,EACV,CAAC;AACH;AAEA,IAAO,yBAAQ;;;AC5CR,IAAM,cAAc,WAAW,OAAO,WAAW;AACtD,MAAI,MAAM,MAAM;AAEhB,MAAI,CAAC,aAAa,MAAM,WAAW;AACjC,UAAM;AACN;AAAA,EACF;AAEA,MAAI,MAAM;AACV,MAAI;AAEJ,SAAO,MAAM,KAAK;AAChB,UAAM,MAAM;AACZ,UAAM,MAAM,MAAM,KAAK,GAAG;AAC1B,UAAM;AAAA,EACR;AACF;AAEO,IAAM,YAAY,iBAAiB,UAAU,WAAWC,SAAQ;AACrE,mBAAiB,SAAS,UAAU;AAClC,WAAO,YAAY,YAAY,OAAO,KAAK,IAAI,QAAS,MAAMA,QAAO,OAAO,KAAK,CAAC,GAAI,SAAS;AAAA,EACjG;AACF;AAEO,IAAM,cAAc,CAAC,QAAQ,WAAW,YAAY,UAAUA,YAAW;AAC9E,QAAM,WAAW,UAAU,QAAQ,WAAWA,OAAM;AAEpD,MAAI,QAAQ;AACZ,MAAI;AACJ,MAAI,YAAY,CAAC,MAAM;AACrB,QAAI,CAAC,MAAM;AACT,aAAO;AACP,kBAAY,SAAS,CAAC;AAAA,IACxB;AAAA,EACF;AAEA,SAAO,IAAI,eAAe;AAAA,IACxB,MAAM,KAAK,YAAY;AACrB,UAAI;AACF,cAAM,EAAC,MAAAC,OAAM,MAAK,IAAI,MAAM,SAAS,KAAK;AAE1C,YAAIA,OAAM;AACT,oBAAU;AACT,qBAAW,MAAM;AACjB;AAAA,QACF;AAEA,YAAI,MAAM,MAAM;AAChB,YAAI,YAAY;AACd,cAAI,cAAc,SAAS;AAC3B,qBAAW,WAAW;AAAA,QACxB;AACA,mBAAW,QAAQ,IAAI,WAAW,KAAK,CAAC;AAAA,MAC1C,SAAS,KAAK;AACZ,kBAAU,GAAG;AACb,cAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,OAAO,QAAQ;AACb,gBAAU,MAAM;AAChB,aAAO,SAAS,OAAO;AAAA,IACzB;AAAA,EACF,GAAG;AAAA,IACD,eAAe;AAAA,EACjB,CAAC;AACH;;;ACxDA,IAAM,mBAAmB,OAAO,UAAU,cAAc,OAAO,YAAY,cAAc,OAAO,aAAa;AAC7G,IAAM,4BAA4B,oBAAoB,OAAO,mBAAmB;AAGhF,IAAM,aAAa,qBAAqB,OAAO,gBAAgB,cAC1D,CAAC,YAAY,CAAC,QAAQ,QAAQ,OAAO,GAAG,GAAG,IAAI,YAAY,CAAC,IAC7D,OAAO,QAAQ,IAAI,WAAW,MAAM,IAAI,SAAS,GAAG,EAAE,YAAY,CAAC;AAGvE,IAAM,OAAO,CAAC,OAAO,SAAS;AAC5B,MAAI;AACF,WAAO,CAAC,CAAC,GAAG,GAAG,IAAI;AAAA,EACrB,SAAS,GAAG;AACV,WAAO;AAAA,EACT;AACF;AAEA,IAAM,wBAAwB,6BAA6B,KAAK,MAAM;AACpE,MAAI,iBAAiB;AAErB,QAAM,iBAAiB,IAAI,QAAQ,iBAAS,QAAQ;AAAA,IAClD,MAAM,IAAI,eAAe;AAAA,IACzB,QAAQ;AAAA,IACR,IAAI,SAAS;AACX,uBAAiB;AACjB,aAAO;AAAA,IACT;AAAA,EACF,CAAC,EAAE,QAAQ,IAAI,cAAc;AAE7B,SAAO,kBAAkB,CAAC;AAC5B,CAAC;AAED,IAAM,qBAAqB,KAAK;AAEhC,IAAM,yBAAyB,6BAC7B,KAAK,MAAM,cAAM,iBAAiB,IAAI,SAAS,EAAE,EAAE,IAAI,CAAC;AAG1D,IAAM,YAAY;AAAA,EAChB,QAAQ,2BAA2B,CAAC,QAAQ,IAAI;AAClD;AAEA,qBAAsB,CAAC,QAAQ;AAC7B,GAAC,QAAQ,eAAe,QAAQ,YAAY,QAAQ,EAAE,QAAQ,UAAQ;AACpE,KAAC,UAAU,IAAI,MAAM,UAAU,IAAI,IAAI,cAAM,WAAW,IAAI,IAAI,CAAC,IAAI,CAACC,SAAQA,KAAI,IAAI,EAAE,IACtF,CAAC,GAAG,WAAW;AACb,YAAM,IAAI,mBAAW,kBAAkB,IAAI,sBAAsB,mBAAW,iBAAiB,MAAM;AAAA,IACrG;AAAA,EACJ,CAAC;AACH,GAAG,IAAI,UAAQ;AAEf,IAAM,gBAAgB,OAAO,SAAS;AACpC,MAAI,QAAQ,MAAM;AAChB,WAAO;AAAA,EACT;AAEA,MAAG,cAAM,OAAO,IAAI,GAAG;AACrB,WAAO,KAAK;AAAA,EACd;AAEA,MAAG,cAAM,oBAAoB,IAAI,GAAG;AAClC,YAAQ,MAAM,IAAI,QAAQ,IAAI,EAAE,YAAY,GAAG;AAAA,EACjD;AAEA,MAAG,cAAM,kBAAkB,IAAI,KAAK,cAAM,cAAc,IAAI,GAAG;AAC7D,WAAO,KAAK;AAAA,EACd;AAEA,MAAG,cAAM,kBAAkB,IAAI,GAAG;AAChC,WAAO,OAAO;AAAA,EAChB;AAEA,MAAG,cAAM,SAAS,IAAI,GAAG;AACvB,YAAQ,MAAM,WAAW,IAAI,GAAG;AAAA,EAClC;AACF;AAEA,IAAM,oBAAoB,OAAO,SAAS,SAAS;AACjD,QAAM,SAAS,cAAM,eAAe,QAAQ,iBAAiB,CAAC;AAE9D,SAAO,UAAU,OAAO,cAAc,IAAI,IAAI;AAChD;AAEA,IAAO,gBAAQ,qBAAqB,OAAO,WAAW;AACpD,MAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,kBAAkB;AAAA,IAClB;AAAA,EACF,IAAI,sBAAc,MAAM;AAExB,iBAAe,gBAAgB,eAAe,IAAI,YAAY,IAAI;AAElE,MAAI,CAAC,gBAAgB,WAAW,IAAK,UAAU,eAAe,UAC5D,uBAAe,CAAC,QAAQ,WAAW,GAAG,OAAO,IAAI,CAAC;AAEpD,MAAI,UAAU;AAEd,QAAM,WAAW,MAAM;AACrB,KAAC,YAAY,WAAW,MAAM;AAC5B,wBAAkB,eAAe,YAAY;AAAA,IAC/C,CAAC;AAED,eAAW;AAAA,EACb;AAEA,MAAI;AAEJ,MAAI;AACF,QACE,oBAAoB,yBAAyB,WAAW,SAAS,WAAW,WAC3E,uBAAuB,MAAM,kBAAkB,SAAS,IAAI,OAAO,GACpE;AACA,UAAI,WAAW,IAAI,QAAQ,KAAK;AAAA,QAC9B,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,QAAQ;AAAA,MACV,CAAC;AAED,UAAI;AAEJ,UAAI,cAAM,WAAW,IAAI,MAAM,oBAAoB,SAAS,QAAQ,IAAI,cAAc,IAAI;AACxF,gBAAQ,eAAe,iBAAiB;AAAA,MAC1C;AAEA,UAAI,SAAS,MAAM;AACjB,cAAM,CAAC,YAAY,KAAK,IAAI;AAAA,UAC1B;AAAA,UACA,qBAAqB,eAAe,gBAAgB,CAAC;AAAA,QACvD;AAEA,eAAO,YAAY,SAAS,MAAM,oBAAoB,YAAY,OAAO,UAAU;AAAA,MACrF;AAAA,IACF;AAEA,QAAI,CAAC,cAAM,SAAS,eAAe,GAAG;AACpC,wBAAkB,kBAAkB,YAAY;AAAA,IAClD;AAEA,cAAU,IAAI,QAAQ,KAAK;AAAA,MACzB,GAAG;AAAA,MACH,QAAQ;AAAA,MACR,QAAQ,OAAO,YAAY;AAAA,MAC3B,SAAS,QAAQ,UAAU,EAAE,OAAO;AAAA,MACpC,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AAED,QAAI,WAAW,MAAM,MAAM,OAAO;AAElC,UAAM,mBAAmB,2BAA2B,iBAAiB,YAAY,iBAAiB;AAElG,QAAI,2BAA2B,sBAAsB,mBAAmB;AACtE,YAAM,UAAU,CAAC;AAEjB,OAAC,UAAU,cAAc,SAAS,EAAE,QAAQ,UAAQ;AAClD,gBAAQ,IAAI,IAAI,SAAS,IAAI;AAAA,MAC/B,CAAC;AAED,YAAM,wBAAwB,cAAM,eAAe,SAAS,QAAQ,IAAI,gBAAgB,CAAC;AAEzF,YAAM,CAAC,YAAY,KAAK,IAAI,sBAAsB;AAAA,QAChD;AAAA,QACA,qBAAqB,eAAe,kBAAkB,GAAG,IAAI;AAAA,MAC/D,KAAK,CAAC;AAEN,iBAAW,IAAI;AAAA,QACb,YAAY,SAAS,MAAM,oBAAoB,YAAY,MAAM;AAC/D,mBAAS,MAAM;AACf,8BAAoB,SAAS;AAAA,QAC/B,GAAG,UAAU;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAEA,mBAAe,gBAAgB;AAE/B,QAAI,eAAe,MAAM,UAAU,cAAM,QAAQ,WAAW,YAAY,KAAK,MAAM,EAAE,UAAU,MAAM;AAErG,KAAC,oBAAoB,SAAS;AAE9B,mBAAe,YAAY;AAE3B,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C,aAAO,SAAS,QAAQ;AAAA,QACtB,MAAM;AAAA,QACN,SAAS,qBAAa,KAAK,SAAS,OAAO;AAAA,QAC3C,QAAQ,SAAS;AAAA,QACjB,YAAY,SAAS;AAAA,QACrB;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH,SAAS,KAAK;AACZ,aAAS;AAET,QAAI,OAAO,IAAI,SAAS,eAAe,SAAS,KAAK,IAAI,OAAO,GAAG;AACjE,YAAM,OAAO;AAAA,QACX,IAAI,mBAAW,iBAAiB,mBAAW,aAAa,QAAQ,OAAO;AAAA,QACvE;AAAA,UACE,OAAO,IAAI,SAAS;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,UAAM,mBAAW,KAAK,KAAK,OAAO,IAAI,MAAM,QAAQ,OAAO;AAAA,EAC7D;AACF;;;AC5NA,IAAM,gBAAgB;AAAA,EACpB,MAAM;AAAA,EACN,KAAK;AAAA,EACL,OAAO;AACT;AAEA,cAAM,QAAQ,eAAe,CAAC,IAAI,UAAU;AAC1C,MAAI,IAAI;AACN,QAAI;AACF,aAAO,eAAe,IAAI,QAAQ,EAAC,MAAK,CAAC;AAAA,IAC3C,SAAS,GAAG;AAAA,IAEZ;AACA,WAAO,eAAe,IAAI,eAAe,EAAC,MAAK,CAAC;AAAA,EAClD;AACF,CAAC;AAED,IAAM,eAAe,CAAC,WAAW,KAAK,MAAM;AAE5C,IAAM,mBAAmB,CAAC,YAAY,cAAM,WAAW,OAAO,KAAK,YAAY,QAAQ,YAAY;AAEnG,IAAO,mBAAQ;AAAA,EACb,YAAY,CAAC,aAAa;AACxB,eAAW,cAAM,QAAQ,QAAQ,IAAI,WAAW,CAAC,QAAQ;AAEzD,UAAM,EAAC,OAAM,IAAI;AACjB,QAAI;AACJ,QAAI;AAEJ,UAAM,kBAAkB,CAAC;AAEzB,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,sBAAgB,SAAS,CAAC;AAC1B,UAAI;AAEJ,gBAAU;AAEV,UAAI,CAAC,iBAAiB,aAAa,GAAG;AACpC,kBAAU,eAAe,KAAK,OAAO,aAAa,GAAG,YAAY,CAAC;AAElE,YAAI,YAAY,QAAW;AACzB,gBAAM,IAAI,mBAAW,oBAAoB,EAAE,GAAG;AAAA,QAChD;AAAA,MACF;AAEA,UAAI,SAAS;AACX;AAAA,MACF;AAEA,sBAAgB,MAAM,MAAM,CAAC,IAAI;AAAA,IACnC;AAEA,QAAI,CAAC,SAAS;AAEZ,YAAM,UAAU,OAAO,QAAQ,eAAe,EAC3C;AAAA,QAAI,CAAC,CAAC,IAAI,KAAK,MAAM,WAAW,EAAE,OAChC,UAAU,QAAQ,wCAAwC;AAAA,MAC7D;AAEF,UAAI,IAAI,SACL,QAAQ,SAAS,IAAI,cAAc,QAAQ,IAAI,YAAY,EAAE,KAAK,IAAI,IAAI,MAAM,aAAa,QAAQ,CAAC,CAAC,IACxG;AAEF,YAAM,IAAI;AAAA,QACR,0DAA0D;AAAA,QAC1D;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EACA,UAAU;AACZ;;;AC9DA,SAAS,6BAA6B,QAAQ;AAC5C,MAAI,OAAO,aAAa;AACtB,WAAO,YAAY,iBAAiB;AAAA,EACtC;AAEA,MAAI,OAAO,UAAU,OAAO,OAAO,SAAS;AAC1C,UAAM,IAAI,sBAAc,MAAM,MAAM;AAAA,EACtC;AACF;AASe,SAAR,gBAAiC,QAAQ;AAC9C,+BAA6B,MAAM;AAEnC,SAAO,UAAU,qBAAa,KAAK,OAAO,OAAO;AAGjD,SAAO,OAAO,cAAc;AAAA,IAC1B;AAAA,IACA,OAAO;AAAA,EACT;AAEA,MAAI,CAAC,QAAQ,OAAO,OAAO,EAAE,QAAQ,OAAO,MAAM,MAAM,IAAI;AAC1D,WAAO,QAAQ,eAAe,qCAAqC,KAAK;AAAA,EAC1E;AAEA,QAAM,UAAU,iBAAS,WAAW,OAAO,WAAW,iBAAS,OAAO;AAEtE,SAAO,QAAQ,MAAM,EAAE,KAAK,SAAS,oBAAoB,UAAU;AACjE,iCAA6B,MAAM;AAGnC,aAAS,OAAO,cAAc;AAAA,MAC5B;AAAA,MACA,OAAO;AAAA,MACP;AAAA,IACF;AAEA,aAAS,UAAU,qBAAa,KAAK,SAAS,OAAO;AAErD,WAAO;AAAA,EACT,GAAG,SAAS,mBAAmB,QAAQ;AACrC,QAAI,CAAC,SAAS,MAAM,GAAG;AACrB,mCAA6B,MAAM;AAGnC,UAAI,UAAU,OAAO,UAAU;AAC7B,eAAO,SAAS,OAAO,cAAc;AAAA,UACnC;AAAA,UACA,OAAO;AAAA,UACP,OAAO;AAAA,QACT;AACA,eAAO,SAAS,UAAU,qBAAa,KAAK,OAAO,SAAS,OAAO;AAAA,MACrE;AAAA,IACF;AAEA,WAAO,QAAQ,OAAO,MAAM;AAAA,EAC9B,CAAC;AACH;;;AChFO,IAAM,UAAU;;;ACKvB,IAAM,aAAa,CAAC;AAGpB,CAAC,UAAU,WAAW,UAAU,YAAY,UAAU,QAAQ,EAAE,QAAQ,CAAC,MAAM,MAAM;AACnF,aAAW,IAAI,IAAI,SAAS,UAAU,OAAO;AAC3C,WAAO,OAAO,UAAU,QAAQ,OAAO,IAAI,IAAI,OAAO,OAAO;AAAA,EAC/D;AACF,CAAC;AAED,IAAM,qBAAqB,CAAC;AAW5B,WAAW,eAAe,SAAS,aAAa,WAAW,SAAS,SAAS;AAC3E,WAAS,cAAc,KAAK,MAAM;AAChC,WAAO,aAAa,UAAU,4BAA6B,MAAM,MAAO,QAAQ,UAAU,OAAO,UAAU;AAAA,EAC7G;AAGA,SAAO,CAAC,OAAO,KAAK,SAAS;AAC3B,QAAI,cAAc,OAAO;AACvB,YAAM,IAAI;AAAA,QACR,cAAc,KAAK,uBAAuB,UAAU,SAAS,UAAU,GAAG;AAAA,QAC1E,mBAAW;AAAA,MACb;AAAA,IACF;AAEA,QAAI,WAAW,CAAC,mBAAmB,GAAG,GAAG;AACvC,yBAAmB,GAAG,IAAI;AAE1B,cAAQ;AAAA,QACN;AAAA,UACE;AAAA,UACA,iCAAiC,UAAU;AAAA,QAC7C;AAAA,MACF;AAAA,IACF;AAEA,WAAO,YAAY,UAAU,OAAO,KAAK,IAAI,IAAI;AAAA,EACnD;AACF;AAYA,SAAS,cAAc,SAAS,QAAQ,cAAc;AACpD,MAAI,OAAO,YAAY,UAAU;AAC/B,UAAM,IAAI,mBAAW,6BAA6B,mBAAW,oBAAoB;AAAA,EACnF;AACA,QAAM,OAAO,OAAO,KAAK,OAAO;AAChC,MAAI,IAAI,KAAK;AACb,SAAO,MAAM,GAAG;AACd,UAAM,MAAM,KAAK,CAAC;AAClB,UAAM,YAAY,OAAO,GAAG;AAC5B,QAAI,WAAW;AACb,YAAM,QAAQ,QAAQ,GAAG;AACzB,YAAM,SAAS,UAAU,UAAa,UAAU,OAAO,KAAK,OAAO;AACnE,UAAI,WAAW,MAAM;AACnB,cAAM,IAAI,mBAAW,YAAY,MAAM,cAAc,QAAQ,mBAAW,oBAAoB;AAAA,MAC9F;AACA;AAAA,IACF;AACA,QAAI,iBAAiB,MAAM;AACzB,YAAM,IAAI,mBAAW,oBAAoB,KAAK,mBAAW,cAAc;AAAA,IACzE;AAAA,EACF;AACF;AAEA,IAAO,oBAAQ;AAAA,EACb;AAAA,EACA;AACF;;;AC/EA,IAAMC,cAAa,kBAAU;AAS7B,IAAM,QAAN,MAAY;AAAA,EACV,YAAY,gBAAgB;AAC1B,SAAK,WAAW;AAChB,SAAK,eAAe;AAAA,MAClB,SAAS,IAAI,2BAAmB;AAAA,MAChC,UAAU,IAAI,2BAAmB;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,QAAQ,aAAa,QAAQ;AACjC,QAAI;AACF,aAAO,MAAM,KAAK,SAAS,aAAa,MAAM;AAAA,IAChD,SAAS,KAAK;AACZ,UAAI,eAAe,OAAO;AACxB,YAAI;AAEJ,cAAM,oBAAoB,MAAM,kBAAkB,QAAQ,CAAC,CAAC,IAAK,QAAQ,IAAI,MAAM;AAGnF,cAAM,QAAQ,MAAM,QAAQ,MAAM,MAAM,QAAQ,SAAS,EAAE,IAAI;AAC/D,YAAI;AACF,cAAI,CAAC,IAAI,OAAO;AACd,gBAAI,QAAQ;AAAA,UAEd,WAAW,SAAS,CAAC,OAAO,IAAI,KAAK,EAAE,SAAS,MAAM,QAAQ,aAAa,EAAE,CAAC,GAAG;AAC/E,gBAAI,SAAS,OAAO;AAAA,UACtB;AAAA,QACF,SAAS,GAAG;AAAA,QAEZ;AAAA,MACF;AAEA,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,SAAS,aAAa,QAAQ;AAG5B,QAAI,OAAO,gBAAgB,UAAU;AACnC,eAAS,UAAU,CAAC;AACpB,aAAO,MAAM;AAAA,IACf,OAAO;AACL,eAAS,eAAe,CAAC;AAAA,IAC3B;AAEA,aAAS,YAAY,KAAK,UAAU,MAAM;AAE1C,UAAM,EAAC,cAAAC,eAAc,kBAAkB,QAAO,IAAI;AAElD,QAAIA,kBAAiB,QAAW;AAC9B,wBAAU,cAAcA,eAAc;AAAA,QACpC,mBAAmBD,YAAW,aAAaA,YAAW,OAAO;AAAA,QAC7D,mBAAmBA,YAAW,aAAaA,YAAW,OAAO;AAAA,QAC7D,qBAAqBA,YAAW,aAAaA,YAAW,OAAO;AAAA,MACjE,GAAG,KAAK;AAAA,IACV;AAEA,QAAI,oBAAoB,MAAM;AAC5B,UAAI,cAAM,WAAW,gBAAgB,GAAG;AACtC,eAAO,mBAAmB;AAAA,UACxB,WAAW;AAAA,QACb;AAAA,MACF,OAAO;AACL,0BAAU,cAAc,kBAAkB;AAAA,UACxC,QAAQA,YAAW;AAAA,UACnB,WAAWA,YAAW;AAAA,QACxB,GAAG,IAAI;AAAA,MACT;AAAA,IACF;AAGA,WAAO,UAAU,OAAO,UAAU,KAAK,SAAS,UAAU,OAAO,YAAY;AAG7E,QAAI,iBAAiB,WAAW,cAAM;AAAA,MACpC,QAAQ;AAAA,MACR,QAAQ,OAAO,MAAM;AAAA,IACvB;AAEA,eAAW,cAAM;AAAA,MACf,CAAC,UAAU,OAAO,QAAQ,QAAQ,OAAO,SAAS,QAAQ;AAAA,MAC1D,CAAC,WAAW;AACV,eAAO,QAAQ,MAAM;AAAA,MACvB;AAAA,IACF;AAEA,WAAO,UAAU,qBAAa,OAAO,gBAAgB,OAAO;AAG5D,UAAM,0BAA0B,CAAC;AACjC,QAAI,iCAAiC;AACrC,SAAK,aAAa,QAAQ,QAAQ,SAAS,2BAA2B,aAAa;AACjF,UAAI,OAAO,YAAY,YAAY,cAAc,YAAY,QAAQ,MAAM,MAAM,OAAO;AACtF;AAAA,MACF;AAEA,uCAAiC,kCAAkC,YAAY;AAE/E,8BAAwB,QAAQ,YAAY,WAAW,YAAY,QAAQ;AAAA,IAC7E,CAAC;AAED,UAAM,2BAA2B,CAAC;AAClC,SAAK,aAAa,SAAS,QAAQ,SAAS,yBAAyB,aAAa;AAChF,+BAAyB,KAAK,YAAY,WAAW,YAAY,QAAQ;AAAA,IAC3E,CAAC;AAED,QAAI;AACJ,QAAI,IAAI;AACR,QAAI;AAEJ,QAAI,CAAC,gCAAgC;AACnC,YAAM,QAAQ,CAAC,gBAAgB,KAAK,IAAI,GAAG,MAAS;AACpD,YAAM,QAAQ,MAAM,OAAO,uBAAuB;AAClD,YAAM,KAAK,MAAM,OAAO,wBAAwB;AAChD,YAAM,MAAM;AAEZ,gBAAU,QAAQ,QAAQ,MAAM;AAEhC,aAAO,IAAI,KAAK;AACd,kBAAU,QAAQ,KAAK,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC;AAAA,MAC/C;AAEA,aAAO;AAAA,IACT;AAEA,UAAM,wBAAwB;AAE9B,QAAI,YAAY;AAEhB,QAAI;AAEJ,WAAO,IAAI,KAAK;AACd,YAAM,cAAc,wBAAwB,GAAG;AAC/C,YAAM,aAAa,wBAAwB,GAAG;AAC9C,UAAI;AACF,oBAAY,YAAY,SAAS;AAAA,MACnC,SAAS,OAAO;AACd,mBAAW,KAAK,MAAM,KAAK;AAC3B;AAAA,MACF;AAAA,IACF;AAEA,QAAI;AACF,gBAAU,gBAAgB,KAAK,MAAM,SAAS;AAAA,IAChD,SAAS,OAAO;AACd,aAAO,QAAQ,OAAO,KAAK;AAAA,IAC7B;AAEA,QAAI;AACJ,UAAM,yBAAyB;AAE/B,WAAO,IAAI,KAAK;AACd,gBAAU,QAAQ,KAAK,yBAAyB,GAAG,GAAG,yBAAyB,GAAG,CAAC;AAAA,IACrF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,QAAQ;AACb,aAAS,YAAY,KAAK,UAAU,MAAM;AAC1C,UAAM,WAAW,cAAc,OAAO,SAAS,OAAO,GAAG;AACzD,WAAO,SAAS,UAAU,OAAO,QAAQ,OAAO,gBAAgB;AAAA,EAClE;AACF;AAGA,cAAM,QAAQ,CAAC,UAAU,OAAO,QAAQ,SAAS,GAAG,SAAS,oBAAoB,QAAQ;AAEvF,QAAM,UAAU,MAAM,IAAI,SAAS,KAAK,QAAQ;AAC9C,WAAO,KAAK,QAAQ,YAAY,UAAU,CAAC,GAAG;AAAA,MAC5C;AAAA,MACA;AAAA,MACA,OAAO,UAAU,CAAC,GAAG;AAAA,IACvB,CAAC,CAAC;AAAA,EACJ;AACF,CAAC;AAED,cAAM,QAAQ,CAAC,QAAQ,OAAO,OAAO,GAAG,SAAS,sBAAsB,QAAQ;AAG7E,WAAS,mBAAmB,QAAQ;AAClC,WAAO,SAAS,WAAW,KAAK,MAAM,QAAQ;AAC5C,aAAO,KAAK,QAAQ,YAAY,UAAU,CAAC,GAAG;AAAA,QAC5C;AAAA,QACA,SAAS,SAAS;AAAA,UAChB,gBAAgB;AAAA,QAClB,IAAI,CAAC;AAAA,QACL;AAAA,QACA;AAAA,MACF,CAAC,CAAC;AAAA,IACJ;AAAA,EACF;AAEA,QAAM,UAAU,MAAM,IAAI,mBAAmB;AAE7C,QAAM,UAAU,SAAS,MAAM,IAAI,mBAAmB,IAAI;AAC5D,CAAC;AAED,IAAO,gBAAQ;;;ACxNf,IAAM,cAAN,MAAM,aAAY;AAAA,EAChB,YAAY,UAAU;AACpB,QAAI,OAAO,aAAa,YAAY;AAClC,YAAM,IAAI,UAAU,8BAA8B;AAAA,IACpD;AAEA,QAAI;AAEJ,SAAK,UAAU,IAAI,QAAQ,SAAS,gBAAgB,SAAS;AAC3D,uBAAiB;AAAA,IACnB,CAAC;AAED,UAAM,QAAQ;AAGd,SAAK,QAAQ,KAAK,YAAU;AAC1B,UAAI,CAAC,MAAM;AAAY;AAEvB,UAAI,IAAI,MAAM,WAAW;AAEzB,aAAO,MAAM,GAAG;AACd,cAAM,WAAW,CAAC,EAAE,MAAM;AAAA,MAC5B;AACA,YAAM,aAAa;AAAA,IACrB,CAAC;AAGD,SAAK,QAAQ,OAAO,iBAAe;AACjC,UAAI;AAEJ,YAAM,UAAU,IAAI,QAAQ,aAAW;AACrC,cAAM,UAAU,OAAO;AACvB,mBAAW;AAAA,MACb,CAAC,EAAE,KAAK,WAAW;AAEnB,cAAQ,SAAS,SAAS,SAAS;AACjC,cAAM,YAAY,QAAQ;AAAA,MAC5B;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,SAAS,OAAO,SAAS,QAAQ,SAAS;AACjD,UAAI,MAAM,QAAQ;AAEhB;AAAA,MACF;AAEA,YAAM,SAAS,IAAI,sBAAc,SAAS,QAAQ,OAAO;AACzD,qBAAe,MAAM,MAAM;AAAA,IAC7B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB;AACjB,QAAI,KAAK,QAAQ;AACf,YAAM,KAAK;AAAA,IACb;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,UAAU;AAClB,QAAI,KAAK,QAAQ;AACf,eAAS,KAAK,MAAM;AACpB;AAAA,IACF;AAEA,QAAI,KAAK,YAAY;AACnB,WAAK,WAAW,KAAK,QAAQ;AAAA,IAC/B,OAAO;AACL,WAAK,aAAa,CAAC,QAAQ;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,UAAU;AACpB,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AACA,UAAM,QAAQ,KAAK,WAAW,QAAQ,QAAQ;AAC9C,QAAI,UAAU,IAAI;AAChB,WAAK,WAAW,OAAO,OAAO,CAAC;AAAA,IACjC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,SAAS;AACd,QAAI;AACJ,UAAM,QAAQ,IAAI,aAAY,SAAS,SAAS,GAAG;AACjD,eAAS;AAAA,IACX,CAAC;AACD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAO,sBAAQ;;;ACjGA,SAAR,OAAwB,UAAU;AACvC,SAAO,SAAS,KAAK,KAAK;AACxB,WAAO,SAAS,MAAM,MAAM,GAAG;AAAA,EACjC;AACF;;;AChBe,SAAR,aAA8B,SAAS;AAC5C,SAAO,cAAM,SAAS,OAAO,KAAM,QAAQ,iBAAiB;AAC9D;;;ACbA,IAAM,iBAAiB;AAAA,EACrB,UAAU;AAAA,EACV,oBAAoB;AAAA,EACpB,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,IAAI;AAAA,EACJ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,6BAA6B;AAAA,EAC7B,WAAW;AAAA,EACX,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,QAAQ;AAAA,EACR,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAClB,OAAO;AAAA,EACP,UAAU;AAAA,EACV,aAAa;AAAA,EACb,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,mBAAmB;AAAA,EACnB,mBAAmB;AAAA,EACnB,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,UAAU;AAAA,EACV,kBAAkB;AAAA,EAClB,eAAe;AAAA,EACf,6BAA6B;AAAA,EAC7B,gBAAgB;AAAA,EAChB,UAAU;AAAA,EACV,MAAM;AAAA,EACN,gBAAgB;AAAA,EAChB,oBAAoB;AAAA,EACpB,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,sBAAsB;AAAA,EACtB,qBAAqB;AAAA,EACrB,mBAAmB;AAAA,EACnB,WAAW;AAAA,EACX,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,QAAQ;AAAA,EACR,kBAAkB;AAAA,EAClB,UAAU;AAAA,EACV,iBAAiB;AAAA,EACjB,sBAAsB;AAAA,EACtB,iBAAiB;AAAA,EACjB,6BAA6B;AAAA,EAC7B,4BAA4B;AAAA,EAC5B,qBAAqB;AAAA,EACrB,gBAAgB;AAAA,EAChB,YAAY;AAAA,EACZ,oBAAoB;AAAA,EACpB,gBAAgB;AAAA,EAChB,yBAAyB;AAAA,EACzB,uBAAuB;AAAA,EACvB,qBAAqB;AAAA,EACrB,cAAc;AAAA,EACd,aAAa;AAAA,EACb,+BAA+B;AACjC;AAEA,OAAO,QAAQ,cAAc,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACvD,iBAAe,KAAK,IAAI;AAC1B,CAAC;AAED,IAAO,yBAAQ;;;AC3Cf,SAAS,eAAe,eAAe;AACrC,QAAM,UAAU,IAAI,cAAM,aAAa;AACvC,QAAM,WAAW,KAAK,cAAM,UAAU,SAAS,OAAO;AAGtD,gBAAM,OAAO,UAAU,cAAM,WAAW,SAAS,EAAC,YAAY,KAAI,CAAC;AAGnE,gBAAM,OAAO,UAAU,SAAS,MAAM,EAAC,YAAY,KAAI,CAAC;AAGxD,WAAS,SAAS,SAAS,OAAO,gBAAgB;AAChD,WAAO,eAAe,YAAY,eAAe,cAAc,CAAC;AAAA,EAClE;AAEA,SAAO;AACT;AAGA,IAAM,QAAQ,eAAe,gBAAQ;AAGrC,MAAM,QAAQ;AAGd,MAAM,gBAAgB;AACtB,MAAM,cAAc;AACpB,MAAM,WAAW;AACjB,MAAM,UAAU;AAChB,MAAM,aAAa;AAGnB,MAAM,aAAa;AAGnB,MAAM,SAAS,MAAM;AAGrB,MAAM,MAAM,SAAS,IAAI,UAAU;AACjC,SAAO,QAAQ,IAAI,QAAQ;AAC7B;AAEA,MAAM,SAAS;AAGf,MAAM,eAAe;AAGrB,MAAM,cAAc;AAEpB,MAAM,eAAe;AAErB,MAAM,aAAa,WAAS,uBAAe,cAAM,WAAW,KAAK,IAAI,IAAI,SAAS,KAAK,IAAI,KAAK;AAEhG,MAAM,aAAa,iBAAS;AAE5B,MAAM,iBAAiB;AAEvB,MAAM,UAAU;AAGhB,IAAO,gBAAQ;;;ACnFf,IAAM;AAAA,EACJ,OAAAE;AAAA,EACA,YAAAC;AAAA,EACA,eAAAC;AAAA,EACA,UAAAC;AAAA,EACA,aAAAC;AAAA,EACA,SAAAC;AAAA,EACA,KAAAC;AAAA,EACA;AAAA,EACA,cAAAC;AAAA,EACA,QAAAC;AAAA,EACA,YAAAC;AAAA,EACA,cAAAC;AAAA,EACA,gBAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAAC;AACF,IAAI;;;ACtBE,IAAO,eAAP,MAAmB;;;;EAIrB,wBAAqB;EACrB;;;;EAKA,0BAAuB;EACvB;;;;EAKA,wBAAqB;EACrB;;AAGG,IAAM,eAAe,IAAI,aAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEtC,SAAgB,kBAClB,UACA,MACA,iBACA,SAAwC;;;AAExC,UAAM,wBAAuB,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,mBAAa,QAAA,OAAA,SAAA,KAAI,YAAY;AAEnE,WAAO,MAAM,kBAA4B;MACrC,cAAc;MACd,KAAK,KAAK;MACV,eAAe;MACf;MACA,MAAM,CAAO,iBAAgB,UAAA,MAAA,QAAA,QAAA,aAAA;;AACzB,qBAAa,sBAAqB;AAElC,cAAM,gBAAgB,MAAM,SAAS,IAAc,KAAK,KAAK;UACzD,SAAS,gBAAe,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI,KAAK;UACrD,cAAc,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;UACvB,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE;SACtC;AAED,cAAM,WAAgC;UAClC,MAAM,cAAc;UACpB,aAAa;UACb,SAAS,gCAAgC,aAAa;UACtD,QAAQ,cAAc;UACtB,eAAe;YACX,SAAS;YACT,eAAe;;;AAIvB,qBAAa,wBAAuB;AACpC,eAAO;MACX,CAAC;KACJ;;;AAGC,SAAgB,mBAClB,UACA,MACA,iBACA,SAAwC;;;AAExC,UAAM,wBAAuB,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,mBAAa,QAAA,OAAA,SAAA,KAAI,YAAY;AAEnE,WAAO,MAAM,kBAA4B;MACrC,cAAc;MACd,KAAK,KAAK;MACV,eAAe;MACf;MACA,MAAM,CAAO,iBAAgB,UAAA,MAAA,QAAA,QAAA,aAAA;;AACzB,qBAAa,sBAAqB;AAElC,cAAM,gBAAgB,MAAM,SAAS,KAAe,KAAK,KAAK,KAAK,MAAM;UACrE,SAAS,gBAAe,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI,KAAK;UACrD,cAAc,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;;;UAGvB,kBAAkB;UAClB,eAAe;UACf,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE;SACtC;AAED,cAAM,WAAgC;UAClC,MAAM,cAAc;UACpB,aAAa;UACb,SAAS,gCAAgC,aAAa;UACtD,QAAQ,cAAc;UACtB,eAAe;YACX,SAAS;YACT,eAAe;;;AAIvB,qBAAa,wBAAuB;AACpC,eAAO;MACX,CAAC;KACJ;;;AAGC,SAAgB,kBAClB,UACA,MACA,iBACA,SAAwC;;;AAExC,UAAM,wBAAuB,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,mBAAa,QAAA,OAAA,SAAA,KAAI,YAAY;AAEnE,WAAO,MAAM,kBAA4B;MACrC,cAAc;MACd,KAAK,KAAK;MACV,eAAe;MACf;MACA,MAAM,CAAO,iBAAgB,UAAA,MAAA,QAAA,QAAA,aAAA;;AACzB,qBAAa,sBAAqB;AAElC,cAAM,gBAAgB,MAAM,SAAS,IAAc,KAAK,KAAK,KAAK,MAAM;UACpE,SAAS,gBAAe,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI,KAAK;UACrD,cAAc,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;;;UAGvB,kBAAkB;UAClB,eAAe;UACf,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE;SACtC;AAED,cAAM,WAAgC;UAClC,MAAM,cAAc;UACpB,aAAa;UACb,SAAS,gCAAgC,aAAa;UACtD,QAAQ,cAAc;UACtB,eAAe;YACX,SAAS;YACT,eAAe;;;AAIvB,qBAAa,wBAAuB;AACpC,eAAO;MACX,CAAC;KACJ;;;AAGC,SAAgB,oBAClB,UACA,MACA,iBACA,SAAwC;;;AAExC,UAAM,wBAAuB,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,mBAAa,QAAA,OAAA,SAAA,KAAI,YAAY;AAEnE,WAAO,MAAM,kBAA4B;MACrC,cAAc;MACd,KAAK,KAAK;MACV,eAAe;MACf;MACA,MAAM,CAAO,iBAAgB,UAAA,MAAA,QAAA,QAAA,aAAA;;AACzB,qBAAa,sBAAqB;AAElC,cAAM,gBAAgB,MAAM,SAAS,MAAgB,KAAK,KAAK,KAAK,MAAM;UACtE,SAAS,gBAAe,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI,KAAK;UACrD,cAAc,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;;;UAGvB,kBAAkB;UAClB,eAAe;UACf,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE;SACtC;AAED,cAAM,WAAgC;UAClC,MAAM,cAAc;UACpB,aAAa;UACb,SAAS,gCAAgC,aAAa;UACtD,QAAQ,cAAc;UACtB,eAAe;YACX,SAAS;YACT,eAAe;;;AAIvB,qBAAa,wBAAuB;AACpC,eAAO;MACX,CAAC;KACJ;;;AAGC,SAAgB,qBAClB,UACA,MACA,iBACA,SAAwC;;;AAExC,UAAM,wBAAuB,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,mBAAa,QAAA,OAAA,SAAA,KAAI,YAAY;AAEnE,WAAO,MAAM,kBAA4B;MACrC,cAAc;MACd,KAAK,KAAK;MACV,eAAe;MACf;MACA,MAAM,CAAO,iBAAgB,UAAA,MAAA,QAAA,QAAA,aAAA;;AACzB,qBAAa,sBAAqB;AAElC,cAAM,gBAAgB,MAAM,SAAS,OAAiB,KAAK,KAAK;UAC5D,SAAS,gBAAe,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI,KAAK;UACrD,cAAc,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;;;UAGvB,kBAAkB;UAClB,eAAe;UACf,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE;SACtC;AAED,cAAM,WAAgC;UAClC,MAAM,cAAc;UACpB,aAAa;UACb,SAAS,gCAAgC,aAAa;UACtD,QAAQ,cAAc;UACtB,eAAe;YACX,SAAS;YACT,eAAe;;;AAIvB,qBAAa,wBAAuB;AACpC,eAAO;MACX,CAAC;KACJ;;;AAGC,SAAU,oBAAiB;AAC7B,MAAI;AAEJ,QAAM,QAAQ,IAAI,cAAM,YAAY,CAAC,MAAK;AAEtC,eAAW;EACf,CAAC;AAED,SAAO;IACH,QAAQ,CAAC,kBACL,SAAS,GAAG,YAAY,6BAA6B,KAAK,kBAAa,QAAb,kBAAa,SAAb,gBAAiB,aAAa,EAAE;IAC9F;;AAER;AAEA,SAAe,kBAA4B,MAM1C;;AACG,QAAI;AACA,aAAO,MAAM,KAAK,KAAK,KAAK,YAAY;aACnC,OAAO;AACZ,YAAM,cAAc,YAAY,oBAAoB;QAChD;QACA,cAAc,KAAK;QACnB,eAAe,KAAK;OACvB;AAED,UAAI,YAAY,UAAU;AACtB,qBAAa,sBAAqB;AAGlC,cAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,YAAY,SAAS,CAAC;AAEzE,YAAI,KAAK,gBAAgB,oBAAoB;AACzC,kBAAQ,KACJ,kBAAkB,KAAK,eAAe,CAAC,wBACnC,YAAY,UAChB,4BAA4B,KAAK,GAAG,GAAG;;AAK/C,eAAO,MAAM,kBAAkB;UAC3B,MAAM,KAAK;UACX,eAAe,KAAK;UACpB,cAAc,KAAK,eAAe;UAClC,KAAK,KAAK;UACV,iBAAiB,KAAK;SACzB;;AAGL,UAAI,KAAK,gBAAgB,oBAAoB;AACzC,gBAAQ,MAAM,cAAc,KAAK,GAAG,kCAAkC,KAAK,YAAY,aAAa,KAAK;;AAG7G,YAAM;;EAEd,CAAC;;AAED,SAAS,eAAe,SAAoB,sBAA6B;AACrE,QAAM,aAA2C,CAAA;AAEjD,UAAQ,QAAQ,CAAC,WAAU;AACvB,eAAW,OAAO,MAAM,IAAI,OAAO;EACvC,CAAC;AAED,MAAI,sBAAsB;AAEtB,UAAM,oBAAoB,QAAQ,KAAK,CAAC,MAAM,EAAE,OAAO,YAAW,MAAO,eAAe,YAAW,CAAE;AAErG,QAAI,CAAC,mBAAmB;AACpB,iBAAW,cAAc,IAAI;;;AAIrC,SAAO;AACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzSM,IAAO,cAAP,MAAkB;EAKpB,YACY,MAGP;AAHO,SAAA,OAAA;AAKR,SAAK,gBAAgB,cAAM,OAAO,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,kBAAkB;AAC1D,SAAK,kBAAkB,KAAK,mBAAkB;EAClD;EAEM,SACF,MACA,SAAwC;;AAExC,aAAO,MAAoB,kBAA4B,KAAK,eAAe,MAAM,KAAK,iBAAiB,OAAO;IAClH,CAAC;;EAEK,UACF,MACA,SAAwC;;AAExC,aAAO,MAAoB,mBACvB,KAAK,eACL,MACA,KAAK,iBACL,OAAO;IAEf,CAAC;;EAEK,SACF,MACA,SAAwC;;AAExC,aAAO,MAAoB,kBAA4B,KAAK,eAAe,MAAM,KAAK,iBAAiB,OAAO;IAClH,CAAC;;EAEK,WACF,MACA,SAAwC;;AAExC,aAAO,MAAoB,oBACvB,KAAK,eACL,MACA,KAAK,iBACL,OAAO;IAEf,CAAC;;EAEK,YACF,MACA,SAAwC;;AAExC,aAAO,MAAoB,qBACvB,KAAK,eACL,MACA,KAAK,iBACL,OAAO;IAEf,CAAC;;EAED,oBAAiB;AACb,WAAqB,kBAAiB;EAC1C;EAEQ,qBAAkB;;AACtB,WAAO;MACH,qBAAoB,MAAA,KAAA,KAAK,UAAI,QAAA,OAAA,SAAA,SAAA,GAAE,wBAAkB,QAAA,OAAA,SAAA,KAAI;;EAE7D;;;;ACvFE,IAAW;CAAjB,SAAiBC,UAAO;AACpB,QAAM,iBAAyB;AAC/B,QAAM,eAAuB;AAE7B,QAAM,+BAA+B,CAAC,UAAgD;AAClF,QAAI,CAAC,OAAO;AACR,aAAO;;AAGX,QAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,UAAI,QAAQ;AAEZ,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,gBAAQ,QAAQ,MAAM,CAAC,EAAE,SAAQ;AAEjC,YAAI,MAAM,MAAM,SAAS,GAAG;AAExB,kBAAQ,QAAQ;;;AAIxB,aAAO;;AAIX,WAAO,MAAM,SAAQ;EACzB;EAEA,MAAa,WAAU;IACnB,YAAmB,MAAuB;AAAvB,WAAA,OAAA;IAA0B;IAE7C,WAAQ;AACJ,UAAI,MAAM,QAAQ,KAAK,IAAI,GAAG;AAE1B,eAAO,mBAAmB,6BAA6B,KAAK,IAAI,CAAC;;AAIrE,aAAO,eAAe,6BAA6B,KAAK,IAAI,CAAC;IACjE;;AAXS,EAAAA,SAAA,aAAU;EAcvB,MAAa,iBAAgB;IACzB,YAAmB,YAA6B;AAA7B,WAAA,aAAA;IAAgC;IAEnD,WAAQ;AACJ,UAAI,MAAM,QAAQ,KAAK,UAAU,GAAG;AAEhC,eAAO,yBAAyB,6BAA6B,KAAK,UAAU,CAAC;;AAIjF,aAAO,qBAAqB,6BAA6B,KAAK,UAAU,CAAC;IAC7E;;AAXS,EAAAA,SAAA,mBAAgB;EAc7B,MAAa,YAAW;IACpB,YAAmB,SAAe;AAAf,WAAA,UAAA;IAAkB;IAErC,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE;IACjC;;AALS,EAAAA,SAAA,cAAW;EAQxB,MAAa,eAAc;IACvB,YAAmB,SAAe;AAAf,WAAA,UAAA;IAAkB;IAErC,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE;IACjC;;AALS,EAAAA,SAAA,iBAAc;EAQ3B,MAAa,aAAY;IACrB,YAAmB,SAAwB,OAAa;AAArC,WAAA,UAAA;AAAwB,WAAA,QAAA;IAAgB;IAE3D,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,QAAQ,KAAK,cAAa,CAAE;IAC7D;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,OAAO;AACb,eAAO;;AAGX,aAAO,KAAK;IAChB;;AAbS,EAAAA,SAAA,eAAY;EAgBzB,MAAa,gBAAe;IACxB,YAAmB,SAAwB,OAAa;AAArC,WAAA,UAAA;AAAwB,WAAA,QAAA;IAAgB;IAE3D,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,SAAS,KAAK,cAAa,CAAE;IAC9D;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,OAAO;AACb,eAAO;;AAGX,aAAO,KAAK;IAChB;;AAbS,EAAAA,SAAA,kBAAe;EAgB5B,MAAa,UAAS;IAClB,YAAmB,SAAwB,QAAgB;AAAxC,WAAA,UAAA;AAAwB,WAAA,SAAA;IAAmB;IAE9D,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,SAAS,KAAK,cAAa,CAAE;IAC9D;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,UAAU,CAAC,MAAM,QAAQ,KAAK,MAAM,GAAG;AAC7C,eAAO;;AAGX,aAAO,KAAK,OAAO,IAAI,CAAC,MAAM,EAAE,KAAI,CAAE,EAAE,KAAK,GAAG;IACpD;;AAbS,EAAAA,SAAA,YAAS;EAgBtB,MAAa,UAAS;IAClB,YAAmB,SAAwB,QAAgB;AAAxC,WAAA,UAAA;AAAwB,WAAA,SAAA;IAAmB;IAE9D,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,SAAS,KAAK,cAAa,CAAE;IAC9D;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,UAAU,CAAC,MAAM,QAAQ,KAAK,MAAM,GAAG;AAC7C,eAAO;;AAGX,aAAO,KAAK,OAAO,IAAI,CAAC,MAAM,EAAE,KAAI,CAAE,EAAE,KAAK,GAAG;IACpD;;AAbS,EAAAA,SAAA,YAAS;EAgBtB,MAAa,eAAc;IACvB,YAAmB,SAAwB,QAAgB;AAAxC,WAAA,UAAA;AAAwB,WAAA,SAAA;IAAmB;IAE9D,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,cAAc,KAAK,cAAa,CAAE;IACnE;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,UAAU,CAAC,MAAM,QAAQ,KAAK,MAAM,GAAG;AAC7C,eAAO;;AAGX,aAAO,KAAK,OAAO,IAAI,CAAC,MAAM,EAAE,KAAI,CAAE,EAAE,KAAK,GAAG;IACpD;;AAbS,EAAAA,SAAA,iBAAc;EAgB3B,MAAa,kBAAiB;IAC1B,YAAmB,SAAwB,OAAsB;AAA9C,WAAA,UAAA;AAAwB,WAAA,QAAA;IAAyB;IAEpE,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,QAAQ,KAAK,cAAa,CAAE;IAC7D;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,OAAO;AACb,eAAO;;AAGX,aAAO,KAAK;IAChB;;AAbS,EAAAA,SAAA,oBAAiB;EAgB9B,MAAa,yBAAwB;IACjC,YAAmB,SAAwB,OAAsB;AAA9C,WAAA,UAAA;AAAwB,WAAA,QAAA;IAAyB;IAEpE,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,SAAS,KAAK,cAAa,CAAE;IAC9D;IAEA,gBAAa;AACT,UAAI,CAAC,KAAK,OAAO;AACb,eAAO;;AAGX,aAAO,KAAK;IAChB;;AAbS,EAAAA,SAAA,2BAAwB;EAgBrC,MAAa,SAAQ;IACjB,YAAmB,SAAwB,QAAgB;AAAxC,WAAA,UAAA;AAAwB,WAAA,SAAA;IAAmB;IAE9D,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,QAAQ,KAAK,cAAa,CAAE;IAC7D;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,UAAU,CAAC,MAAM,QAAQ,KAAK,MAAM,GAAG;AAC7C,eAAO;;AAGX,aAAO,KAAK,OACP,IAAI,CAAC,MAAK;AACP,eAAO,EAAE,KAAI;MACjB,CAAC,EACA,KAAK,GAAG;IACjB;;AAjBS,EAAAA,SAAA,WAAQ;EAoBrB,MAAa,YAAW;IACpB,YAAmB,SAAwB,QAAgB;AAAxC,WAAA,UAAA;AAAwB,WAAA,SAAA;IAAmB;IAE9D,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,SAAS,KAAK,cAAa,CAAE;IAC9D;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,UAAU,CAAC,MAAM,QAAQ,KAAK,MAAM,GAAG;AAC7C,eAAO;;AAGX,aAAO,KAAK,OACP,IAAI,CAAC,MAAK;AACP,eAAO,EAAE,KAAI;MACjB,CAAC,EACA,KAAK,GAAG;IACjB;;AAjBS,EAAAA,SAAA,cAAW;EAoBxB,MAAa,eAAc;IACvB,YAAmB,SAAwB,OAAsB;AAA9C,WAAA,UAAA;AAAwB,WAAA,QAAA;IAAyB;IAEpE,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,QAAQ,KAAK,cAAa,CAAE;IAC7D;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,OAAO;AACb,eAAO;;AAEX,aAAO,KAAK;IAChB;;AAZS,EAAAA,SAAA,iBAAc;EAe3B,MAAa,sBAAqB;IAC9B,YAAmB,SAAwB,OAAsB;AAA9C,WAAA,UAAA;AAAwB,WAAA,QAAA;IAAyB;IAEpE,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,SAAS,KAAK,cAAa,CAAE;IAC9D;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,OAAO;AACb,eAAO;;AAGX,aAAO,KAAK;IAChB;;AAbS,EAAAA,SAAA,wBAAqB;EAgBlC,MAAa,YAAW;IACpB,YAAmB,SAAwB,YAAoC,aAA4B;AAAxF,WAAA,UAAA;AAAwB,WAAA,aAAA;AAAoC,WAAA,cAAA;IAA+B;IAE9G,WAAQ;AACJ,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,WAAW,KAAK,cAAa,CAAE;IAChE;IAEQ,gBAAa;AACjB,UAAI,WAAW;AACf,UAAI,YAAY;AAEhB,UAAI,KAAK,YAAY;AACjB,mBAAW,KAAK,WAAW,SAAQ;;AAGvC,UAAI,KAAK,aAAa;AAClB,oBAAY,KAAK,YAAY,SAAQ;;AAGzC,aAAO,GAAG,QAAQ,IAAI,SAAS;IACnC;;AApBS,EAAAA,SAAA,cAAW;AAsB5B,GArRiB,YAAA,UAAO,CAAA,EAAA;;;ACElB,IAAWC;CAAjB,SAAiBA,aAAU;AACvB,QAAM,eAAuB;EAE7B,MAAa,eAAc;;;;;;;IAOvB,YAAmB,MAAqB,OAAa;AAAlC,WAAA,OAAA;AAAqB,WAAA,QAAA;AACpC,UAAI,CAAC,MAAM;AACP,cAAM,MAAM,wCAAwC;;IAE5D;IAEA,WAAQ;AACJ,aAAO,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK;IACrC;;AAfS,EAAAA,YAAA,iBAAc;EAkB3B,MAAa,kBAAiB;;;;;;IAM1B,YAAmB,kBAA0B;AAA1B,WAAA,mBAAA;IAA6B;IAEhD,WAAQ;AACJ,aAAO,YAAY,KAAK,cAAa,CAAE;IAC3C;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,kBAAkB;AACxB,eAAO;;AAGX,aAAO,KAAK,iBACP,IAAI,CAAC,MAAK;AACP,YAAI,CAAC,GAAG;AACJ,gBAAM,MAAM,yDAAyD;;AAEzE,eAAO,EAAE,KAAI;MACjB,CAAC,EACA,KAAK,GAAG;IACjB;;AAzBS,EAAAA,YAAA,oBAAiB;EA4B9B,MAAa,yBAAwB;;;;;;IAMjC,YAAmB,kBAA0B;AAA1B,WAAA,mBAAA;IAA6B;IAEhD,WAAQ;AACJ,aAAO,mBAAmB,KAAK,cAAa,CAAE;IAClD;IAEQ,gBAAa;AACjB,UAAI,CAAC,KAAK,kBAAkB;AACxB,eAAO;;AAGX,aAAO,KAAK,iBACP,IAAI,CAAC,MAAK;AACP,YAAI,CAAC,GAAG;AACJ,gBAAM,MAAM,gEAAgE;;AAEhF,eAAO,EAAE,KAAI;MACjB,CAAC,EACA,KAAK,GAAG;IACjB;;AAzBS,EAAAA,YAAA,2BAAwB;EA4BrC,MAAa,eAAc;;;;;;IAMvB,YAAmB,OAAa;AAAb,WAAA,QAAA;AACf,UAAI,SAAS,GAAG;AACZ,cAAM,MAAM,kDAAkD;;IAEtE;IAEA,WAAQ;AACJ,aAAO,SAAS,KAAK,KAAK;IAC9B;;AAdS,EAAAA,YAAA,iBAAc;EAiB3B,MAAa,2BAA0B;;;;;IAKnC,cAAA;IAAe;IAEf,WAAQ;AACJ,aAAO;IACX;;AATS,EAAAA,YAAA,6BAA0B;EAYvC,MAAa,cAAa;;;;;;IAMtB,YAAmB,MAAY;AAAZ,WAAA,OAAA;AACf,UAAI,OAAO,GAAG;AACV,cAAM,MAAM,kEAAkE;;IAEtF;IAEA,WAAQ;AACJ,aAAO,QAAQ,KAAK,IAAI;IAC5B;;AAdS,EAAAA,YAAA,gBAAa;EAiB1B,MAAa,eAAc;;;;;;;IAOvB,YAAmB,SAAwB,WAAoB;AAA5C,WAAA,UAAA;AAAwB,WAAA,YAAA;AACvC,UAAI,CAAC,SAAS;AACV,cAAM,MAAM,wDAAwD;;IAE5E;IAEA,WAAQ;AACJ,aAAO,SAAS,KAAK,cAAa,CAAE;IACxC;IAEQ,gBAAa;AACjB,aAAO,GAAG,KAAK,QAAQ,KAAI,CAAE,IAAI,KAAK,SAAS;IACnD;;AAnBS,EAAAA,YAAA,iBAAc;EAsB3B,MAAa,gBAAe;IACxB,YAAmB,OAAa;AAAb,WAAA,QAAA;IAAgB;IAEnC,WAAQ;AACJ,aAAO,KAAK;IAChB;;AALS,EAAAA,YAAA,kBAAe;EAQ5B,MAAa,eAAc;;;;;;;;IAQvB,YAAmB,OAAa;AAAb,WAAA,QAAA;AACf,UAAI,QAAQ,GAAG;AACX,cAAM,MAAM,0DAA0D;;IAE9E;IAEA,WAAQ;AACJ,aAAO,SAAS,KAAK,KAAK;IAC9B;;AAhBS,EAAAA,YAAA,iBAAc;EAmB3B,MAAa,kBAAiB;;;;;;IAM1B,YAAmB,kBAAwB;AAAxB,WAAA,mBAAA;IAA2B;IAE9C,WAAQ;AACJ,aAAO,YAAY,KAAK,gBAAgB;IAC5C;;AAVS,EAAAA,YAAA,oBAAiB;AAYlC,GAxLiBA,gBAAAA,cAAU,CAAA,EAAA;;;ACqGrB,IAAO,gBAAP,MAAoB;EAMtB,YAAY,MAA4F;AACpG,SAAK,UAAU,KAAK;AACpB,SAAK,YAAY,KAAK;AACtB,SAAK,YAAY,KAAK;AACtB,SAAK,eAAe,KAAK;EAC7B;;;;ACpHG,IAAM,8BAAsC;AAC5C,IAAM,iCAAyC;AAC/C,IAAM,mBAA2B;AACjC,IAAM,yBAAiC;;;ACGxC,IAAgB,YAAhB,MAAyB;EAI3B,YAAsB,QAAyC,cAA0B;AAAnE,SAAA,SAAA;AAAyC,SAAA,eAAA;AAHrD,SAAA,aAAgC,CAAA;EAGkD;;;;;;EAsB5F,oBAAoB,MAAc,OAAa;AAC3C,SAAK,WAAW,KAAK,IAAIC,YAAW,eAAe,MAAM,KAAK,CAAC;AAC/D,WAAO;EACX;;;;;;EAOA,cAAc,WAA0B;AACpC,SAAK,WAAW,KAAK,SAAS;AAC9B,WAAO;EACX;;;;;EAMA,eAAe,YAA6B;AACxC,SAAK,WAAW,KAAK,GAAG,UAAU;AAClC,WAAO;EACX;;;;EAKA,aAAU;AACN,WAAO,KAAK,aAAa,WAAW,KAAK,cAAc,CAAA,CAAE;EAC7D;;;;EAKA,YAAY,SAAkB;;AAC1B,UAAM,gBAAe,KAAA,KAAK,aAAa,mBAAa,QAAA,OAAA,SAAA,KAAI,CAAA;AACxD,iBAAa,KAAK,GAAG,OAAO;AAC5B,SAAK,aAAa,gBAAgB;AAClC,WAAO;EACX;;;;EAKA,WAAW,QAAe;;AACtB,UAAM,gBAAe,KAAA,KAAK,aAAa,mBAAa,QAAA,OAAA,SAAA,KAAI,CAAA;AACxD,iBAAa,KAAK,MAAM;AACxB,SAAK,aAAa,gBAAgB;AAClC,WAAO;EACX;;;;EAKA,cAAc,KAAW;AACrB,SAAK,YAAY;AACjB,WAAO;EACX;;;;EAKA,gBAAa;AACT,WAAO,KAAK;EAChB;;;;;EAMA,YAAY,aAAyB;AACjC,SAAK,eAAe;AACpB,WAAO;EACX;EAEU,mBAAmB,QAAc;;AAEvC,QAAI,KAAK,WAAW;AAChB,aAAO,KAAK;;AAIhB,WAAO,KAAK,aAAa,OAAO,SAAQ,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI,KAAK,cAAa,CAAE;EACzF;EAEU,kCAA+B;AAErC,QAAI,KAAK,OAAO,iBAAiB;AAC7B,YAAM,oBAAoB,KAAK,cAAa,EAAG,KAAK,CAAC,MAAK;AAAA,YAAA;AACtD,gBAAA,KAAA,EAAE,SAAQ,OAAE,QAAA,OAAA,SAAA,SAAA,GAAE,YAAW,EAAG,SAAS,YAAY,YAAW,CAAE;MAAC,CAAA;AAEnE,UAAI,CAAC,mBAAmB;AAEpB,aAAK,WAAW,KAAK,IAAIA,YAAW,kBAAkB,KAAK,OAAO,eAAe,CAAC;;;EAG9F;EAEU,uCAAoC;AAC1C,QAAI,KAAK,OAAO,sBAAsB;AAClC,WAAK,WAAW,KAAK,IAAI,QAAQ,gBAAgB,wBAAwB,UAAU,CAAC;;EAE5F;;;;AChIE,IAAO,eAAP,cAA4B,UAIjC;EAIG,YACc,QACA,cACF,cACA,iBAAuB;AAE/B,UAAM,QAAQ,YAAY;AALhB,SAAA,SAAA;AACA,SAAA,eAAA;AACF,SAAA,eAAA;AACA,SAAA,kBAAA;AANF,SAAA,eAAoC,CAAA;AAU1C,QAAI,CAAC,cAAc;AACf,YAAM,MAAM,yCAAyC;;AAGzD,QAAI,CAAC,iBAAiB;AAClB,YAAM,MAAM,4CAA4C;;EAEhE;EAEA,YAAS;;AAML,WAAO,KAAK,aAAa,gBAAgB,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EACnF;EAEA,SAAM;AACF,WAAO,MAAM,mBAAmB,UAAU,KAAK,YAAY,aAAa,KAAK,eAAe,EAAE;EAClG;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,+BAA+B,IAAI;EAC/E;;;;AC3CJ,IAAY;CAAZ,SAAYC,cAAW;AACnB,EAAAA,aAAA,MAAA,IAAA;AACA,EAAAA,aAAA,QAAA,IAAA;AACA,EAAAA,aAAA,gBAAA,IAAA;AACA,EAAAA,aAAA,OAAA,IAAA;AACA,EAAAA,aAAA,UAAA,IAAA;AACA,EAAAA,aAAA,UAAA,IAAA;AACA,EAAAA,aAAA,gBAAA,IAAA;AACA,EAAAA,aAAA,SAAA,IAAA;AACA,EAAAA,aAAA,UAAA,IAAA;AACA,EAAAA,aAAA,QAAA,IAAA;AACA,EAAAA,aAAA,SAAA,IAAA;AACJ,GAZY,gBAAA,cAAW,CAAA,EAAA;;;ACYjB,IAAgB,mBAAhB,cAKI,UAA6C;EACnD,YAAsB,QAAyC,cAA0B;AACrF,UAAM,QAAQ,YAAY;AADR,SAAA,SAAA;AAAyC,SAAA,eAAA;EAE/D;;;;EAKA,sBAAsB,OAAa;;AAE/B,QAAI,gBAAe,KAAA,KAAK,aAAa,mBAAa,QAAA,OAAA,SAAA,KAAI,CAAA;AACtD,mBAAe,aAAa,OAAO,CAAC,MAAM,EAAE,WAAW,2BAA2B;AAElF,SAAK,aAAa,gBAAgB;AAElC,SAAK,YAAY;MACb;QACI,QAAQ;QACR,OAAO;;KAEd;AAED,WAAO;EACX;;;;EAKA,aACI,gBAA0D;AAE1D,WAAO,KAAK,aAAa,mBAAuD;MAC5E,MAAM;MACN,iBAAiB;MACjB,oBAAoB,CAAC,OAAO,cAAa;AACrC,cAAM,WAAW,KAAK,mBAAmB,OAAO,SAAS;AAEzD,eAAO;UACH,MAAM;UACN;;MAER;MACA,aAAa,CAAC,aAAa,sBAAqB;AAC5C,YAAI,aAAa;AACb,eAAK,cAAc,WAAW;;AAElC,YAAI,mBAAmB;AACnB,eAAK,sBAAsB,iBAAiB;;AAGhD,eAAO,KAAK,UAAS;MACzB;KACH;EACL;EAOU,eAAe,iBAA+B;AACpD,eAAW,QAAQ,iBAAiB;AAChC,iBAAW,cAAc,OAAO,KAAK,KAAK,QAAQ,GAAG;AACjD,cAAM,UAAU,KAAK,SAAS,UAAU;AAExC,YAAI,QAAQ,SAAS,YAAY,gBAAgB;AAC7C,gBAAM,oBAAoB;AAI1B,gBAAM,qBAAqC,CAAA;AAE3C,qBAAW,sBAAsB,kBAAkB,OAAO;AACtD,gBAAI;AAEJ,kBAAM,sBAAsB,kBAAkB,YAAY,KACtD,CAAC,MAAM,EAAE,OAAO,SAAS,YAAW,MAAO,mBAAmB,YAAW,CAAE;AAE/E,gBAAI,qBAAqB;AACrB,2BAAa;mBACV;AACH,2BAAa,gBAAgB,KACzB,CAAC,MAAM,EAAE,OAAO,SAAS,YAAW,MAAO,mBAAmB,YAAW,CAAE;;AAInF,gBAAI,YAAY;AACZ,iCAAmB,KAAK,UAAU;;;AAK1C,4BAAkB,cAAc;;AAGpC,YAAI,QAAQ,SAAS,YAAY,UAAU;AACvC,gBAAM,qBAAqC,CAAA;AAE3C,gBAAM,kBAAkB;AAExB,qBAAW,sBAAsB,gBAAgB,qBAAqB;AAClE,gBAAI;AAEJ,kBAAM,sBAAsB,gBAAgB,YAAY,KACpD,CAAC,MAAM,EAAE,OAAO,SAAS,YAAW,MAAO,mBAAmB,YAAW,CAAE;AAE/E,gBAAI,qBAAqB;AACrB,2BAAa;mBACV;AACH,2BAAa,gBAAgB,KACzB,CAAC,MAAM,EAAE,OAAO,SAAS,YAAW,MAAO,mBAAmB,YAAW,CAAE;;AAInF,gBAAI,YAAY;AACZ,iCAAmB,KAAK,UAAU;;;AAI1C,0BAAgB,cAAc;;;;EAI9C;;;;ACnIE,IAAgB,uBAAhB,cAKI,iBAAkE;EACxE,YAAsB,QAAyC,cAA0B;AACrF,UAAM,QAAQ,YAAY;AADR,SAAA,SAAA;AAAyC,SAAA,eAAA;EAE/D;;;;;EAMA,YAAY,SAAe;AACvB,SAAK,WAAW,KAAK,IAAI,QAAQ,YAAY,OAAO,CAAC;AACrD,WAAO;EACX;;;;;EAMA,eAAe,SAAe;AAC1B,SAAK,WAAW,KAAK,IAAI,QAAQ,eAAe,OAAO,CAAC;AACxD,WAAO;EACX;;;;;;EAOA,aAAa,SAAiB,OAAa;AACvC,SAAK,WAAW,KAAK,IAAI,QAAQ,aAAa,SAAS,KAAK,CAAC;AAC7D,WAAO;EACX;;;;;;EAOA,gBAAgB,SAAiB,OAAa;AAC1C,SAAK,WAAW,KAAK,IAAI,QAAQ,gBAAgB,SAAS,KAAK,CAAC;AAChE,WAAO;EACX;;;;;;EAOA,UAAU,SAAiB,QAAgB;AACvC,SAAK,WAAW,KAAK,IAAI,QAAQ,UAAU,SAAS,MAAM,CAAC;AAC3D,WAAO;EACX;;;;;;EAOA,UAAU,SAAiB,QAAgB;AACvC,SAAK,WAAW,KAAK,IAAI,QAAQ,UAAU,SAAS,MAAM,CAAC;AAC3D,WAAO;EACX;;;;;;EAOA,eAAe,SAAiB,QAAgB;AAC5C,SAAK,WAAW,KAAK,IAAI,QAAQ,eAAe,SAAS,MAAM,CAAC;AAChE,WAAO;EACX;;;;;;EAOA,kBAAkB,SAAiB,OAAsB;AACrD,SAAK,WAAW,KAAK,IAAI,QAAQ,kBAAkB,SAAS,KAAK,CAAC;AAClE,WAAO;EACX;;;;;;EAOA,yBAAyB,SAAiB,OAAsB;AAC5D,SAAK,WAAW,KAAK,IAAI,QAAQ,yBAAyB,SAAS,KAAK,CAAC;AACzE,WAAO;EACX;;;;;;EAOA,SAAS,SAAiB,QAAgB;AACtC,SAAK,WAAW,KAAK,IAAI,QAAQ,SAAS,SAAS,MAAM,CAAC;AAC1D,WAAO;EACX;;;;;;EAOA,YAAY,SAAiB,QAAgB;AACzC,SAAK,WAAW,KAAK,IAAI,QAAQ,YAAY,SAAS,MAAM,CAAC;AAC7D,WAAO;EACX;;;;;;EAOA,eAAe,SAAiB,OAAsB;AAClD,SAAK,WAAW,KAAK,IAAI,QAAQ,eAAe,SAAS,KAAK,CAAC;AAC/D,WAAO;EACX;;;;;EAMA,sBAAsB,SAAiB,OAAsB;AACzD,SAAK,WAAW,KAAK,IAAI,QAAQ,sBAAsB,SAAS,KAAK,CAAC;AACtE,WAAO;EACX;;;;;;EAOA,YAAY,SAAiB,YAA6B,aAA4B;AAClF,SAAK,WAAW,KAAK,IAAI,QAAQ,YAAY,SAAS,YAAY,WAAW,CAAC;AAC9E,WAAO;EACX;;;;;EAMA,eAAe,OAAa;AACxB,SAAK,WAAW,KAAK,IAAIC,YAAW,eAAe,KAAK,CAAC;AACzD,WAAO;EACX;;;;;;EAOA,eAAe,SAAiB,WAAoB;AAChD,SAAK,WAAW,KAAK,IAAIA,YAAW,eAAe,SAAS,SAAS,CAAC;AACtE,WAAO;EACX;;;;;EAMA,kBAAkB,SAAe;AAC7B,SAAK,WAAW,KAAK,IAAIA,YAAW,eAAe,SAAS,MAAM,CAAC;AACnE,WAAO;EACX;;;;;EAMA,iBAAiB,SAAe;AAC5B,SAAK,WAAW,KAAK,IAAIA,YAAW,eAAe,SAAS,KAAK,CAAC;AAClE,WAAO;EACX;;;;;EAMA,cAAc,MAAY;AACtB,SAAK,WAAW,KAAK,IAAIA,YAAW,cAAc,IAAI,CAAC;AACvD,WAAO;EACX;;;;ACrME,IAAO,qBAAP,cAAoF,qBAKzF;EAGG,YAAsB,QAAyC,cAA0B;AACrF,UAAM,QAAQ,YAAY;AADR,SAAA,SAAA;AAAyC,SAAA,eAAA;AAFrD,SAAA,eAAiC,CAAA;EAI3C;;;;;;EAOA,6BAA0B;AACtB,SAAK,WAAW,KAAK,IAAIC,YAAW,2BAA0B,CAAE;AAChE,WAAO;EACX;;;;;EAMA,KAAK,MAAY;AACb,SAAK,WAAW,KAAK,IAAI,QAAQ,WAAW,IAAI,CAAC;AACjD,WAAO;EACX;;;;;;EAOA,MAAM,OAAe;AACjB,SAAK,WAAW,KAAK,IAAI,QAAQ,WAAW,KAAK,CAAC;AAClD,WAAO;EACX;;;;;EAMA,WAAW,YAAkB;AACzB,SAAK,WAAW,KAAK,IAAI,QAAQ,iBAAiB,UAAU,CAAC;AAC7D,WAAO;EACX;;;;;;EAOA,YAAY,aAAqB;AAC7B,SAAK,WAAW,KAAK,IAAI,QAAQ,iBAAiB,WAAW,CAAC;AAC9D,WAAO;EACX;;;;;EAMA,eAAe,OAAa;AACxB,SAAK,WAAW,KAAK,IAAIA,YAAW,eAAe,KAAK,CAAC;AACzD,WAAO;EACX;;;;;EAMA,kBAAkB,kBAAwB;AACtC,SAAK,WAAW,KAAK,IAAIA,YAAW,kBAAkB,gBAAgB,CAAC;AACvE,WAAO;EACX;;;;;EAMA,kBAAkB,kBAA0B;AACxC,SAAK,WAAW,KAAK,IAAIA,YAAW,kBAAkB,gBAAgB,CAAC;AACvE,WAAO;EACX;;;;;EAMA,yBAAyB,kBAA0B;AAC/C,SAAK,WAAW,KAAK,IAAIA,YAAW,yBAAyB,gBAAgB,CAAC;AAC9E,WAAO;EACX;EAEA,YAAS;;AAGL,WAAO,KAAK,aAAa,iBAAiB,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EACpF;EAEA,SAAM;AACF,UAAM,SAAS;AAGf,SAAK,gCAA+B;AAGpC,SAAK,qCAAoC;AAEzC,WAAO,MAAM,mBAAmB,MAAM;EAC1C;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,yBAAyB,IAAI;EACzE;EAEU,mBACN,OACA,WAGG;AAEH,SAAK,UAAU,OAAO,SAAS;AAE/B,WAAO;MACH;MACA;;EAER;EAEQ,UACJ,OACA,WAGG;AAGH,UAAM,kBAAkC,CAAA;AAGxC,eAAW,YAAY,WAAW;AAC9B,sBAAgB,KAAK,GAAG,OAAO,OAAO,SAAS,KAAK,WAAW,CAAC;;AAIpE,eAAW,QAAQ,OAAO;AACtB,UAAI,CAAC,gBAAgB,KAAK,CAAC,MAAM,EAAE,OAAO,SAAS,YAAW,MAAO,KAAK,OAAO,SAAS,YAAW,CAAE,GAAG;AACtG,wBAAgB,KAAK,IAAI;;;AAIjC,SAAK,eAAe,eAAe;EACvC;;;;AC5JE,IAAO,kBAAP,cAAiF,UAItF;EAGG,YACc,QACA,cACF,UAAgB;AAExB,UAAM,QAAQ,YAAY;AAJhB,SAAA,SAAA;AACA,SAAA,eAAA;AACF,SAAA,WAAA;AALF,SAAA,eAAiC,CAAA;AASvC,QAAI,CAAC,UAAU;AACX,YAAM,MAAM,6DAA6D;;EAEjF;;;;;EAMA,eAAe,OAAa;AACxB,SAAK,WAAW,KAAK,IAAIC,YAAW,eAAe,KAAK,CAAC;AACzD,WAAO;EACX;;;;;EAMA,YAAY,aAA6B;AACrC,SAAK,eAAe;AACpB,WAAO;EACX;;;;;EAMA,kBAAkB,kBAAwB;AACtC,SAAK,WAAW,KAAK,IAAIA,YAAW,kBAAkB,gBAAgB,CAAC;AACvE,WAAO;EACX;;;;;EAMA,kBAAkB,kBAA0B;AACxC,SAAK,WAAW,KAAK,IAAIA,YAAW,kBAAkB,gBAAgB,CAAC;AACvE,WAAO;EACX;;;;;EAMA,yBAAyB,kBAA0B;AAC/C,SAAK,WAAW,KAAK,IAAIA,YAAW,yBAAyB,gBAAgB,CAAC;AAC9E,WAAO;EACX;EAEA,YAAS;;AAGL,WAAO,KAAK,aAAa,mBAAmB,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EACtF;EAEA,SAAM;AACF,UAAM,SAAS,YAAY,KAAK;AAGhC,SAAK,gCAA+B;AAGpC,SAAK,qCAAoC;AAEzC,WAAO,MAAM,mBAAmB,MAAM;EAC1C;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,wBAAwB,IAAI;EACxE;;;;AC/EE,IAAO,kBAAP,cAA+B,iBAKpC;EAQG,YAAsB,QAAyC,cAA0B;AACrF,UAAM,QAAQ,YAAY;AADR,SAAA,SAAA;AAAyC,SAAA,eAAA;AAJ5C,SAAA,qBAA6B;AAEtC,SAAA,eAAqC,CAAA;EAI/C;;;;;EAMA,eAAe,OAAa;AACxB,SAAK,WAAW,KAAK,IAAIC,YAAW,eAAe,KAAK,CAAC;AACzD,WAAO;EACX;;;;;EAMA,cAAc,MAAY;AACtB,SAAK,WAAW,KAAK,IAAIA,YAAW,cAAc,IAAI,CAAC;AACvD,WAAO;EACX;EAEA,YAAS;;AAML,WAAO,KAAK,aAAa,cAAc,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EACjF;EAEA,SAAM;AACF,UAAM,SAAS,MAAM,KAAK;AAE1B,WAAO,MAAM,mBAAmB,MAAM;EAC1C;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,uBAAuB,IAAI;EACvE;EAEU,mBACN,OACA,WAGG;AAEH,WAAO;MACH;MACA;;EAER;;;;ACtEE,IAAO,gBAAP,cAA6B,UAIlC;EAQG,YACc,QACA,cACF,kBAAwB;AAEhC,UAAM,QAAQ,YAAY;AAJhB,SAAA,SAAA;AACA,SAAA,eAAA;AACF,SAAA,mBAAA;AAPO,SAAA,qBAA6B;AAEtC,SAAA,eAAqC,CAAA;AAS3C,QAAI,CAAC,kBAAkB;AACnB,YAAM,MAAM,+DAA+D;;EAEnF;EAEA,YAAS;;AAGL,WAAO,KAAK,aAAa,YAAY,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EAC/E;EAEA,SAAM;AACF,UAAM,SAAS,MAAM,KAAK,qBAAqB,MAAM,KAAK;AAE1D,WAAO,MAAM,mBAAmB,MAAM;EAC1C;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,qBAAqB,IAAI;EACrE;;;;ACtCE,IAAO,oBAAP,cAAiC,iBAKtC;EAGG,YAAsB,QAAyC,cAA0B;AACrF,UAAM,QAAQ,YAAY;AADR,SAAA,SAAA;AAAyC,SAAA,eAAA;AAFrD,SAAA,eAAwC,CAAA;EAIlD;;;;;EAMA,kBAAkB,kBAA0B;AACxC,SAAK,WAAW,KAAK,IAAIC,YAAW,kBAAkB,gBAAgB,CAAC;AACvE,WAAO;EACX;;;;;EAMA,yBAAyB,kBAA0B;AAC/C,SAAK,WAAW,KAAK,IAAIA,YAAW,yBAAyB,gBAAgB,CAAC;AAC9E,WAAO;EACX;;;;;EAMA,eAAe,OAAa;AACxB,SAAK,WAAW,KAAK,IAAIA,YAAW,eAAe,KAAK,CAAC;AACzD,WAAO;EACX;;;;;EAMA,cAAc,MAAY;AACtB,SAAK,WAAW,KAAK,IAAIA,YAAW,cAAc,IAAI,CAAC;AACvD,WAAO;EACX;EAEA,YAAS;;AAGL,WAAO,KAAK,aAAa,iBAAiB,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EACpF;EAEA,SAAM;AACF,UAAM,SAAS;AAEf,WAAO,MAAM,mBAAmB,MAAM;EAC1C;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,yBAAyB,IAAI;EACzE;EAEU,mBACN,OACA,WAA8G;AAE9G,WAAO;MACH;MACA;;EAER;;;;ACxEE,IAAO,kBAAP,cAA+B,UAIpC;EAGG,YACc,QACA,cACF,cAAoB;AAE5B,UAAM,QAAQ,YAAY;AAJhB,SAAA,SAAA;AACA,SAAA,eAAA;AACF,SAAA,eAAA;AALF,SAAA,eAAwC,CAAA;AAS9C,QAAI,CAAC,cAAc;AACf,YAAM,MAAM,2DAA2D;;EAE/E;EAEA,YAAS;;AAGL,WAAO,KAAK,aAAa,cAAc,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EACjF;EAEA,SAAM;AACF,UAAM,SAAS,YAAY,KAAK;AAEhC,WAAO,MAAM,mBAAmB,MAAM;EAC1C;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,wBAAwB,IAAI;EACxE;;;;AC1BE,IAAO,iBAAP,cAAgF,qBAKrF;EAGG,YAAsB,QAAyC,cAA0B;AACrF,UAAM,QAAQ,YAAY;AADR,SAAA,SAAA;AAAyC,SAAA,eAAA;AAFrD,SAAA,eAAqC,CAAA;EAI/C;;;;;EAMA,KAAK,MAAY;AACb,SAAK,WAAW,KAAK,IAAI,QAAQ,WAAW,IAAI,CAAC;AACjD,WAAO;EACX;;;;;;EAOA,MAAM,OAAe;AACjB,SAAK,WAAW,KAAK,IAAI,QAAQ,WAAW,KAAK,CAAC;AAClD,WAAO;EACX;;;;;EAMA,WAAW,YAAkB;AACzB,SAAK,WAAW,KAAK,IAAI,QAAQ,iBAAiB,UAAU,CAAC;AAC7D,WAAO;EACX;;;;;;EAOA,YAAY,aAAqB;AAC7B,SAAK,WAAW,KAAK,IAAI,QAAQ,iBAAiB,WAAW,CAAC;AAC9D,WAAO;EACX;;;;;EAMA,kBAAkB,kBAAwB;AACtC,SAAK,WAAW,KAAK,IAAIC,YAAW,kBAAkB,gBAAgB,CAAC;AACvE,WAAO;EACX;;;;;EAMA,kBAAkB,kBAA0B;AACxC,SAAK,WAAW,KAAK,IAAIA,YAAW,kBAAkB,gBAAgB,CAAC;AACvE,WAAO;EACX;;;;;EAMA,yBAAyB,kBAA0B;AAC/C,SAAK,WAAW,KAAK,IAAIA,YAAW,yBAAyB,gBAAgB,CAAC;AAC9E,WAAO;EACX;EAEA,YAAS;;AAGL,WAAO,KAAK,aAAa,aAAa,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EAChF;EAEA,SAAM;AACF,UAAM,SAAS;AAGf,SAAK,gCAA+B;AAGpC,SAAK,qCAAoC;AAEzC,WAAO,MAAM,mBAAmB,MAAM;EAC1C;;;;;EAMA,YAAY,aAAiC;AACzC,SAAK,eAAe;AACpB,WAAO;EACX;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,kBAAkB,IAAI;EAClE;EAEU,mBACN,OACA,WAGG;AAEH,QAAI,KAAK,aAAY,GAAI;AACrB,WAAK,cAAc,OAAO,SAAS;;AAGvC,WAAO;MACH;MACA;;EAER;EAEQ,cACJ,OACA,WAGG;AAGH,UAAM,2BAA2C,CAAA;AAGjD,eAAW,YAAY,WAAW;AAC9B,+BAAyB,KAAK,GAAG,OAAO,OAAO,SAAS,KAAK,WAAW,CAAC;;AAI7E,eAAW,QAAQ,OAAO;AACtB,UACI,CAAC,yBAAyB,KACtB,CAAC,MAAM,EAAE,OAAO,SAAS,YAAW,MAAO,KAAK,OAAO,SAAS,YAAW,CAAE,GAEnF;AACE,iCAAyB,KAAK,IAAI;;;AAI1C,SAAK,eAAe,wBAAwB;EAChD;EAEQ,eAAY;AAChB,QAAI,KAAK,OAAO,gCAAgC,UAAU;AACtD,aAAO;;AAGX,QAAI,KAAK,aAAa,uBAAuB,MAAM;AAC/C,aAAO;;AAGX,WAAO;EACX;;;;ACtKE,IAAO,iBAAP,cAA8B,iBAKnC;EAQG,YAAsB,QAAyC,cAA0B;AACrF,UAAM,QAAQ,YAAY;AADR,SAAA,SAAA;AAAyC,SAAA,eAAA;AAJ5C,SAAA,WAAmB;AAE5B,SAAA,eAAsC,CAAA;EAIhD;;;;;EAMA,eAAe,OAAa;AACxB,SAAK,WAAW,KAAK,IAAIC,YAAW,eAAe,KAAK,CAAC;AACzD,WAAO;EACX;;;;;EAMA,cAAc,MAAY;AACtB,SAAK,WAAW,KAAK,IAAIA,YAAW,cAAc,IAAI,CAAC;AACvD,WAAO;EACX;EAEA,YAAS;;AAGL,WAAO,KAAK,aAAa,aAAa,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EAChF;EAEA,SAAM;AACF,UAAM,SAAS,MAAM,KAAK;AAE1B,WAAO,MAAM,mBAAmB,MAAM;EAC1C;;;;;EAMA,YAAY,aAAkC;AAC1C,SAAK,eAAe;AACpB,WAAO;EACX;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,sBAAsB,IAAI;EACtE;EAEU,mBACN,OACA,WAAyG;AAEzG,WAAO;MACH;MACA;;EAER;;;;AClEE,IAAO,sBAAP,cAAmC,UAIxC;EAKG,YAAsB,QAAyC,cAA0B;AACrF,UAAM,QAAQ,YAAY;AADR,SAAA,SAAA;AAAyC,SAAA,eAAA;AAJ5C,SAAA,WAAmB;AAE5B,SAAA,eAAsC,CAAA;EAIhD;;;;;EAMA,KAAK,MAAY;AACb,SAAK,WAAW,KAAK,IAAI,QAAQ,WAAW,IAAI,CAAC;AACjD,WAAO;EACX;;;;;EAMA,WAAW,YAAkB;AACzB,SAAK,WAAW,KAAK,IAAI,QAAQ,iBAAiB,UAAU,CAAC;AAC7D,WAAO;EACX;;;;;EAMA,kBAAkB,kBAAwB;AACtC,SAAK,WAAW,KAAK,IAAIC,YAAW,kBAAkB,gBAAgB,CAAC;AACvE,WAAO;EACX;EAEA,YAAS;;AAGL,WAAO,KAAK,aAAa,eAAe,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EAClF;EAEA,SAAM;AACF,UAAM,SAAS,MAAM,KAAK;AAE1B,WAAO,MAAM,mBAAmB,MAAM;EAC1C;;;;;EAMA,YAAY,aAAiC;AACzC,SAAK,eAAe;AACpB,WAAO;EACX;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,sBAAsB,IAAI;EACtE;;;;ACtEE,IAAO,mBAAP,cAAgC,iBAKrC;EAKG,YAAsB,QAAyC,cAA0B;AACrF,UAAM,QAAQ,YAAY;AADR,SAAA,SAAA;AAAyC,SAAA,eAAA;AAJrD,SAAA,eAAiC,CAAA;AAE1B,SAAA,SAAiB;EAIlC;EAEA,YAAS;;AACL,WAAO,KAAK,aAAa,YAAY,KAAK,OAAM,IAAI,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;EAC/E;EAEA,SAAM;AACF,WAAO,MAAM,mBAAmB,KAAK,MAAM;EAC/C;;;;;EAMA,YAAY,aAA6B;AACrC,SAAK,eAAe;AACpB,WAAO;EACX;EAEA,IAAI,MAAS;AACT,WAAO,KAAK,aAAa,eAAe,YAAY,IAAI;EAC5D;EAEU,mBACN,OACA,WAAqG;AAErG,WAAO;MACH;MACA;;EAER;;;;AC/CG,IAAM,UAAoB;EAC7B,MAAM;EACN,SAAS;EACT,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYJ,IAAgB,2BAAhB,MAAwC;EAW1C,YAIoB,QAIA,aAIAC,UAIA,gBAA+B;AAZ/B,SAAA,SAAA;AAIA,SAAA,cAAA;AAIA,SAAA,UAAAA;AAIA,SAAA,iBAAA;AAvBH,SAAA,4BAAoC;AAKpC,SAAA,+BAAuC;EAmBrD;;;;;;;EAQH,OAAO,QAAgB,aAA2B,SAA2B;AACzE,QAAI,CAAC,KAAK,OAAO,SAAS,CAAC,KAAK,OAAO,MAAM,0BAA0B;AACnE,aAAO,UAAU,gBAAgB,KAAK,WAAW,WAAW,IAAI,QAAQ,OAAO;;AAEnF,WAAO,KAAK,OAAO,MAAM,yBAAyB;MAC9C,iBAAiB,UAAU,UAAU,CAAA;MACrC,aAAa,UAAU,gBAAgB,IAAI,OAAO;MAClD;MACA,QAAQ,KAAK,UAAU,WAAW;MAClC;MACA,eAAe,KAAK,OAAO;KAC9B;EACL;;;;;;EAOA,WAAW,aAA2B,mBAA6B;AAC/D,UAAM,UAAqB,CAAA;AAE3B,QAAI,mBAAmB;AACnB,cAAQ,KAAK,GAAG,iBAAiB;;AAIrC,YAAQ,KAAK,KAAK,eAAc,CAAE;AAGlC,QAAI,KAAK,OAAO,eAAe;AAC3B,cAAQ,KAAK,GAAG,KAAK,OAAO,cAAc,WAAW,CAAC;;AAI1D,YAAQ,KAAK,GAAG,KAAK,gBAAgB,WAAW,CAAC;AAEjD,QAAI,KAAK,qBAAqB,WAAW,KAAK,KAAK,qBAAqB,WAAW,GAAG;AAClF,YAAM,MAAM,0DAA0D;;AAI1E,QAAI,KAAK,qBAAqB,WAAW,KAAK,KAAK,OAAO,eAAe;AACrE,cAAQ,KAAK,KAAK,uBAAuB,KAAK,OAAO,aAAa,CAAC;;AAIvE,QAAI,KAAK,qBAAqB,WAAW,KAAK,KAAK,OAAO,cAAc;AACpE,cAAQ,KAAK,KAAK,uBAAuB,KAAK,OAAO,YAAY,CAAC;;AAItE,QAAI,KAAK,wCAAwC,WAAW,GAAG;AAC3D,cAAQ,KAAK;QACT,QAAQ;QACR,OAAO;OACV;;AAGL,WAAO;EACX;;;;;;EAOgB,kBACZ,KACA,MACA,aACA,eAEC;;AAED,UAAI,CAAC,aAAa;AACd,sBAAc,CAAA;;AAGlB,UAAI,CAAC,eAAe;AAChB,wBAAgB,CAAA;;AAGpB,UAAI;AACA,eAAO,MAAM,KAAK,YAAY,UAC1B;UACI;UACA;WAEJ;UACI,aAAa,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa;UAC1B,cAAc;UACd,eAAe,KAAK,OAAO;UAC3B,SAAS,KAAK,WAAW,aAAa,cAAc,UAAU,cAAc,UAAU,CAAA,CAAE;SAC3F;eAEA,OAAO;AACZ,cAAM,KAAK,iBAAiB,KAAK;;IAEzC,CAAC;;;;;;;EAOe,iBACZ,KACA,aACA,eAEC;;AAED,UAAI,CAAC,aAAa;AACd,sBAAc,CAAA;;AAGlB,UAAI,CAAC,eAAe;AAChB,wBAAgB,CAAA;;AAGpB,UAAI;AACA,eAAO,MAAM,KAAK,YAAY,SAC1B;UACI;WAEJ;UACI,aAAa,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa;UAC1B,cAAc;UACd,eAAe,KAAK,OAAO;UAC3B,SAAS,KAAK,WAAW,aAAa,cAAc,UAAU,cAAc,UAAU,CAAA,CAAE;SAC3F;eAEA,OAAO;AACZ,cAAM,KAAK,iBAAiB,KAAK;;IAEzC,CAAC;;;;;;EAMS,WAAW,aAAyB;AAC1C,WAAO,KAAK,UAAU,WAAW,IAAI,MAAM,KAAK,OAAO;EAC3D;EAEU,mBACN,MACA,UAAwB;AAExB,WAAO;MACH;MACA;MACA,iBAAiB,KAAK,mBAAmB,SAAS,OAAO;MACzD,oBAAoB,KAAK,qBAAqB,SAAS,OAAO;;EAEtE;;;;;EAMQ,qBAAqB,aAAyB;AAClD,QAAI,YAAY,mBAAmB,QAAW;AAC1C,aAAO,YAAY;;AAGvB,QAAI,CAAC,KAAK,OAAO,oBAAoB;AACjC,aAAO;;AAGX,QAAI,KAAK,OAAO,mBAAmB,mBAAmB,MAAM;AACxD,aAAO;;AAGX,WAAO;EACX;EAEQ,gBAAgB,aAAyB;;AAC7C,QAAI,YAAY,eAAe;AAC3B,aAAO,YAAY;;AAGvB,SAAI,KAAA,KAAK,OAAO,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,eAAe;AAC/C,aAAO,KAAK,OAAO,mBAAmB;;AAG1C,WAAO,CAAA;EACX;EAEQ,wCAAwC,aAAyB;AACrE,QAAI,YAAY,6BAA6B,QAAW;AACpD,aAAO,YAAY;;AAGvB,QAAI,CAAC,KAAK,OAAO,oBAAoB;AACjC,aAAO;;AAGX,QAAI,KAAK,OAAO,mBAAmB,6BAA6B,MAAM;AAClE,aAAO;;AAGX,WAAO;EACX;;;;;EAMQ,qBAAqB,aAAyB;AAClD,QAAI,YAAY,mBAAmB,QAAW;AAC1C,aAAO,YAAY;;AAGvB,QAAI,CAAC,KAAK,OAAO,oBAAoB;AACjC,aAAO;;AAGX,QAAI,KAAK,OAAO,mBAAmB,mBAAmB,MAAM;AACxD,aAAO;;AAGX,WAAO;EACX;;;;;EAMQ,UAAU,aAAyB;AACvC,QAAI,KAAK,qBAAqB,WAAW,GAAG;AACxC,UAAI,CAAC,KAAK,OAAO,eAAe;AAC5B,cAAM,MAAM,oCAAoC;;AAIpD,UAAI,KAAK,OAAO,SAAS,KAAK,OAAO,MAAM,gBAAgB;AACvD,eAAO,KAAK,OAAO,MAAM;;AAI7B,aAAO,KAAK;;AAIhB,QAAI,KAAK,OAAO,SAAS,KAAK,OAAO,MAAM,SAAS;AAChD,aAAO,KAAK,OAAO,MAAM;;AAE7B,WAAO,KAAK;EAChB;;;;EAKQ,uBAAuB,KAAY;AACvC,QAAI,CAAC,KAAK;AACN,YAAM,MAAM,wDAAwD;;AAGxE,WAAO;MACH,QAAQ;MACR,OAAO,UAAU,GAAG;;EAE5B;;;;EAKQ,iBAAc;AAClB,WAAO;MACH,QAAQ;MACR,OAAO,GAAG,KAAK,QAAQ,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,QAAQ,OAAO;;EAEhF;EAEQ,iBAAiB,OAAU;;AAC/B,QAAI;AAEJ,QAAI,MAAM,OAAO;AACb,mBAAa,MAAM;WAChB;AACH,mBAAa;;AAGjB,QAAI,CAAC,cAAc,CAAC,WAAW,cAAc;AACzC,aAAO;;AAGX,UAAM,qBAAoB,KAAA,WAAW,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE;AAE/C,QAAI,CAAC,qBAAqB,CAAC,kBAAkB,YAAY;AACrD,aAAO;;AAGX,WAAO,IAAI,cAAc;MACrB,WAAW,kBAAkB;MAC7B,SAAS,kBAAkB;MAC3B,cAAc,kBAAkB;MAChC,WAAW,kBAAkB;KAChC;EACL;EAEQ,mBAAmB,SAAkB;AACzC,UAAM,wBAAwB,QAAQ,KAClC,CAAC,MAAM,EAAE,OAAO,YAAW,MAAO,uBAAuB,YAAW,CAAE;AAG1E,QAAI,uBAAuB;AACvB,UAAI,sBAAsB,MAAM,SAAQ,MAAO,KAAK;AAChD,eAAO;;;AAGf,WAAO;EACX;EAEQ,qBAAqB,SAAkB;AAC3C,UAAM,SAAS,QAAQ,KAAK,CAAC,MAAM,EAAE,OAAO,YAAW,MAAO,4BAA4B,YAAW,CAAE;AACvG,WAAO,SAAS,OAAO,QAAQ;EACnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5VE,IAAO,eAAP,cAA4B,yBAAwB;EACtD,YACI,QACA,aACAC,UACA,gBAA+B;AAE/B,UAAM,QAAQ,aAAaA,UAAS,cAAc;EACtD;;;;;;EAOM,mBACF,KACA,aAA6B;;AAI7B,YAAM,WAAW,MAAM,KAAK,iBAAqD,KAAK,WAAW;AAEjG,aAAO,KAAK,mBAGV,KAAK,eAAe,wBAAsC,SAAS,IAAI,GAAG,QAAQ;IACxF,CAAC;;;;;;;EAOK,aACF,KACA,aAA6B;;AAE7B,YAAM,WAAW,MAAM,KAAK,iBAA+C,KAAK,WAAW;AAE3F,aAAO,KAAK,mBAAmB,KAAK,eAAe,kBAAgC,SAAS,IAAI,GAAG,QAAQ;IAC/G,CAAC;;;;;;;EAOK,iBACF,KACA,aAA6B;;AAI7B,YAAM,WAAW,MAAM,KAAK,iBAAsD,KAAK,WAAW;AAElG,aAAO,KAAK,mBAAmB,KAAK,eAAe,yBAAyB,SAAS,IAAI,GAAG,QAAQ;IACxG,CAAC;;;;;;;EAOK,cACF,KACA,aAAoC;;AAEpC,YAAM,WAAW,MAAM,KAAK,iBAAqD,KAAK,WAAW;AAEjG,aAAO,KAAK,mBAAmB,KAAK,eAAe,wBAAwB,SAAS,IAAI,GAAG,QAAQ;IACvG,CAAC;;;;;;;EAOK,iBACF,KACA,aAAoC;;AAEpC,YAAM,WAAW,MAAM,KAAK,iBAAqD,KAAK,WAAW;AAEjG,aAAO,KAAK,mBAAmB,KAAK,eAAe,yBAAyB,SAAS,IAAI,GAAG,QAAQ;IACxG,CAAC;;;;;;;;;EASK,eACF,KACA,aAAiC;;AAEjC,YAAM,WAAW,MAAM,KAAK,kBAAqD,KAAK,CAAA,GAAI,WAAW;AAErG,aAAO,KAAK,mBAAmB,KAAK,eAAe,sBAAsB,SAAS,IAAI,GAAG,QAAQ;IACrG,CAAC;;;;;;;;EAQK,YACF,KACA,aAAoC;;AAEpC,YAAM,WAAW,MAAM,KAAK,iBAAiD,KAAK,WAAW;AAE7F,aAAO,KAAK,mBAAmB,KAAK,eAAe,YAAY,SAAS,IAAI,GAAG,QAAQ;IAC3F,CAAC;;;;;;;EAOK,aACF,KACA,aAAkC;;AAElC,YAAM,WAAW,MAAM,KAAK,iBAAmD,KAAK,WAAW;AAE/F,aAAO,KAAK,mBAAmB,KAAK,eAAe,sBAAsB,SAAS,IAAI,GAAG,QAAQ;IACrG,CAAC;;;;;;;EAOK,YACF,KACA,aAAiC;;AAEjC,YAAM,WAAW,MAAM,KAAK,iBAAuD,KAAK,WAAW;AAEnG,aAAO,KAAK,mBAAmB,KAAK,eAAe,qBAAqB,SAAS,IAAI,GAAG,QAAQ;IACpG,CAAC;;;;;;;EAOK,cACF,KACA,aAAiC;;AAEjC,YAAM,WAAW,MAAM,KAAK,iBAAwD,KAAK,WAAW;AAEpG,aAAO,KAAK,mBAAmB,KAAK,eAAe,uBAAuB,SAAS,IAAI,GAAG,QAAQ;IACtG,CAAC;;;;;;;EAOK,gBACF,KACA,aAAiC;;AAIjC,YAAM,WAAW,MAAM,KAAK,iBAA4D,KAAK,WAAW;AAExG,aAAO,KAAK,mBAAmB,KAAK,eAAe,+BAA+B,SAAS,IAAI,GAAG,QAAQ;IAC9G,CAAC;;EAEK,mBAIJ,MAWD;;AACG,YAAM,YAAY,MAAM,KAAK,gCAAgC;QACzD,MAAM,KAAK;QACX,mBAAmB,CAAA;QACnB,aAAa,KAAK;QAClB,aAAa;QACb,mBAAmB;QACnB,iBAAiB,KAAK;OACzB;AAED,aAAO,KAAK,mBACR,UAAU,OAAO,CAAC,MAAa,YAAW;AACtC,aAAK,KAAK,GAAG,QAAQ,KAAK,KAAK;AAC/B,eAAO;MACX,GAAG,CAAA,CAAE,GACL,SAAS;IAEjB,CAAC;;EAEa,gCAAmF,MAUhG;;;AACG,WAAI,KAAA,KAAK,qBAAe,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO;AAC7B,YAAI,KAAK,OAAO,KAAK,gBAAgB,OAAO;AAExC,iBAAO,KAAK;;;AAIpB,YAAM,WAAW,MAAM,KAAK,YAAY,KAAK,aAAa,KAAK,iBAAiB;AAEhF,WAAI,KAAA,KAAK,qBAAe,QAAA,OAAA,SAAA,SAAA,GAAE,sBAAsB;AAC5C,cAAM,KAAK,MAAM,KAAK,gBAAgB,oBAAoB;;AAG9D,WAAK,kBAAkB,KAAK,QAAQ;AAEpC,WAAI,KAAA,KAAK,qBAAe,QAAA,OAAA,SAAA,SAAA,GAAE,iBAAiB;AACvC,aAAK,gBAAgB,gBAAgB,UAAU,KAAK,aAAa,KAAK,iBAAiB;;AAG3F,YAAM,YAAW,KAAA,SAAS,KAAK,gBAAU,QAAA,OAAA,SAAA,SAAA,GAAE;AAC3C,YAAM,oBAAoB,SAAS;AAEnC,UAAI,YAAY,mBAAmB;AAE/B,eAAO,MAAM,KAAK,gCAAgC;UAC9C,MAAM,KAAK,OAAO;UAClB,aAAa;UACb;UACA,iBAAiB,KAAK;UACtB,aAAa,KAAK;UAClB,mBAAmB,KAAK;SAC3B;;AAGL,aAAO,KAAK;;;EAGR,MAAM,IAAU;AACpB,WAAO,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,EAAE,CAAC;EAC3D;;;;AC1RE,IAAO,oBAAP,MAAwB;EAE1B,0BAA0B,aAAmC;AACzD,UAAM,mBAAmC,CAAA;AAEzC,eAAW,iBAAiB,OAAO,KAAK,WAAW,GAAG;AAClD,uBAAiB,KAAK,YAAY,aAAa,CAAC;;AAGpD,WAAO;EACX;;AAGG,IAAM,oBAAoB,IAAI,kBAAiB;;;ACftD,IAAO,gBAAQ;;;ACCf,SAAS,SAAS,MAAM;AACtB,SAAO,OAAO,SAAS,YAAY,cAAM,KAAK,IAAI;AACpD;AACA,IAAO,mBAAQ;;;ACHf,SAAS,MAAM,MAAM;AACnB,MAAI,CAAC,iBAAS,IAAI,GAAG;AACnB,UAAM,UAAU,cAAc;AAAA,EAChC;AACA,MAAI;AACJ,MAAI,MAAM,IAAI,WAAW,EAAE;AAG3B,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,GAAG,CAAC,GAAG,EAAE,OAAO;AAClD,MAAI,CAAC,IAAI,MAAM,KAAK;AACpB,MAAI,CAAC,IAAI,MAAM,IAAI;AACnB,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,GAAG,EAAE,GAAG,EAAE,OAAO;AACnD,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO;AACpD,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO;AACpD,MAAI,CAAC,IAAI,IAAI;AAIb,MAAI,EAAE,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,KAAK,gBAAgB;AACnE,MAAI,EAAE,IAAI,IAAI,aAAc;AAC5B,MAAI,EAAE,IAAI,MAAM,KAAK;AACrB,MAAI,EAAE,IAAI,MAAM,KAAK;AACrB,MAAI,EAAE,IAAI,MAAM,IAAI;AACpB,MAAI,EAAE,IAAI,IAAI;AACd,SAAO;AACT;AACA,IAAO,gBAAQ;;;AC9Bf,IAAI,YAAY,CAAC;AACjB,KAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,YAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AAClD;AAFS;AAGF,SAAS,gBAAgB,KAAK,SAAS,GAAG;AAM/C,UAAQ,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,GAAG,YAAY;AACngB;;;ACbA,IAAI;AACJ,IAAI,QAAQ,IAAI,WAAW,EAAE;AACd,SAAR,MAAuB;AAE5B,MAAI,CAAC,iBAAiB;AAEpB,sBAAkB,OAAO,WAAW,eAAe,OAAO,mBAAmB,OAAO,gBAAgB,KAAK,MAAM;AAC/G,QAAI,CAAC,iBAAiB;AACpB,YAAM,IAAI,MAAM,0GAA0G;AAAA,IAC5H;AAAA,EACF;AACA,SAAO,gBAAgB,KAAK;AAC9B;;;ACdA,SAAS,cAAc,KAAK;AAC1B,QAAM,SAAS,mBAAmB,GAAG,CAAC;AAEtC,MAAI,QAAQ,CAAC;AACb,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,UAAM,KAAK,IAAI,WAAW,CAAC,CAAC;AAAA,EAC9B;AACA,SAAO;AACT;AACO,IAAI,MAAM;AACV,IAAI,MAAM;AACF,SAAR,IAAqB,MAAM,SAAS,UAAU;AACnD,WAAS,aAAa,OAAO,WAAW,KAAK,QAAQ;AACnD,QAAI;AACJ,QAAI,OAAO,UAAU,UAAU;AAC7B,cAAQ,cAAc,KAAK;AAAA,IAC7B;AACA,QAAI,OAAO,cAAc,UAAU;AACjC,kBAAY,cAAM,SAAS;AAAA,IAC7B;AACA,UAAM,aAAa,eAAe,QAAQ,eAAe,SAAS,SAAS,WAAW,YAAY,IAAI;AACpG,YAAM,UAAU,kEAAkE;AAAA,IACpF;AAKA,QAAI,QAAQ,IAAI,WAAW,KAAK,MAAM,MAAM;AAC5C,UAAM,IAAI,SAAS;AACnB,UAAM,IAAI,OAAO,UAAU,MAAM;AACjC,YAAQ,SAAS,KAAK;AACtB,UAAM,CAAC,IAAI,MAAM,CAAC,IAAI,KAAO;AAC7B,UAAM,CAAC,IAAI,MAAM,CAAC,IAAI,KAAO;AAC7B,QAAI,KAAK;AACP,eAAS,UAAU;AACnB,eAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,YAAI,SAAS,CAAC,IAAI,MAAM,CAAC;AAAA,MAC3B;AACA,aAAO;AAAA,IACT;AACA,WAAO,gBAAgB,KAAK;AAAA,EAC9B;AAGA,MAAI;AACF,iBAAa,OAAO;AAAA,EACtB,SAAS,KAAK;AAAA,EAAC;AAGf,eAAa,MAAM;AACnB,eAAa,MAAM;AACnB,SAAO;AACT;;;AClCA,SAAS,IAAI,OAAO;AAClB,MAAI,OAAO,UAAU,UAAU;AAC7B,QAAI,MAAM,SAAS,mBAAmB,KAAK,CAAC;AAE5C,YAAQ,IAAI,WAAW,IAAI,MAAM;AACjC,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,YAAM,CAAC,IAAI,IAAI,WAAW,CAAC;AAAA,IAC7B;AAAA,EACF;AACA,SAAO,qBAAqB,WAAW,aAAa,KAAK,GAAG,MAAM,SAAS,CAAC,CAAC;AAC/E;AAKA,SAAS,qBAAqB,OAAO;AACnC,MAAI,SAAS,CAAC;AACd,MAAI,WAAW,MAAM,SAAS;AAC9B,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,UAAU,KAAK,GAAG;AACpC,QAAI,IAAI,MAAM,KAAK,CAAC,MAAM,IAAI,KAAK;AACnC,QAAI,MAAM,SAAS,OAAO,OAAO,MAAM,IAAI,EAAI,IAAI,OAAO,OAAO,IAAI,EAAI,GAAG,EAAE;AAC9E,WAAO,KAAK,GAAG;AAAA,EACjB;AACA,SAAO;AACT;AAKA,SAAS,gBAAgB,cAAc;AACrC,UAAQ,eAAe,OAAO,KAAK,KAAK,KAAK;AAC/C;AAKA,SAAS,WAAW,GAAG,KAAK;AAE1B,IAAE,OAAO,CAAC,KAAK,OAAQ,MAAM;AAC7B,IAAE,gBAAgB,GAAG,IAAI,CAAC,IAAI;AAC9B,MAAI,IAAI;AACR,MAAI,IAAI;AACR,MAAI,IAAI;AACR,MAAI,IAAI;AACR,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,IAAI;AACrC,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,UAAU;AACzC,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,MAAM;AAC3C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,WAAW;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,UAAU;AAC1C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,QAAQ;AAC5C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,SAAS;AAC5C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,SAAS;AAC5C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,OAAO;AAC1C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,WAAW;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,SAAS;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,UAAU;AAC1C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,QAAQ;AAC5C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,UAAU;AACzC,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,QAAQ;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,QAAQ,GAAG,IAAI;AACnB,QAAI,QAAQ,GAAG,IAAI;AACnB,QAAI,QAAQ,GAAG,IAAI;AACnB,QAAI,QAAQ,GAAG,IAAI;AAAA,EACrB;AACA,SAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AACpB;AAMA,SAAS,aAAa,OAAO;AAC3B,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,CAAC;AAAA,EACV;AACA,MAAI,UAAU,MAAM,SAAS;AAC7B,MAAI,SAAS,IAAI,YAAY,gBAAgB,OAAO,CAAC;AACrD,WAAS,IAAI,GAAG,IAAI,SAAS,KAAK,GAAG;AACnC,WAAO,KAAK,CAAC,MAAM,MAAM,IAAI,CAAC,IAAI,QAAS,IAAI;AAAA,EACjD;AACA,SAAO;AACT;AAMA,SAAS,QAAQ,GAAG,GAAG;AACrB,MAAI,OAAO,IAAI,UAAW,IAAI;AAC9B,MAAI,OAAO,KAAK,OAAO,KAAK,OAAO,OAAO;AAC1C,SAAO,OAAO,KAAK,MAAM;AAC3B;AAKA,SAAS,cAAc,KAAK,KAAK;AAC/B,SAAO,OAAO,MAAM,QAAQ,KAAK;AACnC;AAKA,SAAS,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAChC,SAAO,QAAQ,cAAc,QAAQ,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;AAC3E;AACA,SAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,SAAO,OAAO,IAAI,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C;AACA,SAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,SAAO,OAAO,IAAI,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C;AACA,SAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,SAAO,OAAO,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACxC;AACA,SAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,SAAO,OAAO,KAAK,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3C;AACA,IAAO,cAAQ;;;AC/Lf,IAAI,KAAK,IAAI,MAAM,IAAM,WAAG;;;ACF5B,IAAI,aAAa,OAAO,WAAW,eAAe,OAAO,cAAc,OAAO,WAAW,KAAK,MAAM;AACpG,IAAO,iBAAQ;AAAA,EACb;AACF;;;ACAA,SAAS,GAAG,SAAS,KAAK,QAAQ;AAChC,MAAI,eAAO,cAAc,CAAC,OAAO,CAAC,SAAS;AACzC,WAAO,eAAO,WAAW;AAAA,EAC3B;AACA,YAAU,WAAW,CAAC;AACtB,MAAI,OAAO,QAAQ,WAAW,QAAQ,OAAO,KAAK;AAGlD,OAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAO;AAC3B,OAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAO;AAG3B,MAAI,KAAK;AACP,aAAS,UAAU;AACnB,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,UAAI,SAAS,CAAC,IAAI,KAAK,CAAC;AAAA,IAC1B;AACA,WAAO;AAAA,EACT;AACA,SAAO,gBAAgB,IAAI;AAC7B;AACA,IAAO,aAAQ;;;ACtBf,SAAS,EAAE,GAAG,GAAG,GAAG,GAAG;AACrB,UAAQ,GAAG;AAAA,IACT,KAAK;AACH,aAAO,IAAI,IAAI,CAAC,IAAI;AAAA,IACtB,KAAK;AACH,aAAO,IAAI,IAAI;AAAA,IACjB,KAAK;AACH,aAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA,IAC7B,KAAK;AACH,aAAO,IAAI,IAAI;AAAA,EACnB;AACF;AACA,SAAS,KAAK,GAAG,GAAG;AAClB,SAAO,KAAK,IAAI,MAAM,KAAK;AAC7B;AACA,SAAS,KAAK,OAAO;AACnB,MAAI,IAAI,CAAC,YAAY,YAAY,YAAY,UAAU;AACvD,MAAI,IAAI,CAAC,YAAY,YAAY,YAAY,WAAY,UAAU;AACnE,MAAI,OAAO,UAAU,UAAU;AAC7B,QAAI,MAAM,SAAS,mBAAmB,KAAK,CAAC;AAE5C,YAAQ,CAAC;AACT,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,YAAM,KAAK,IAAI,WAAW,CAAC,CAAC;AAAA,IAC9B;AAAA,EACF,WAAW,CAAC,MAAM,QAAQ,KAAK,GAAG;AAEhC,YAAQ,MAAM,UAAU,MAAM,KAAK,KAAK;AAAA,EAC1C;AACA,QAAM,KAAK,GAAI;AACf,MAAI,IAAI,MAAM,SAAS,IAAI;AAC3B,MAAI,IAAI,KAAK,KAAK,IAAI,EAAE;AACxB,MAAI,IAAI,IAAI,MAAM,CAAC;AACnB,WAAS,KAAK,GAAG,KAAK,GAAG,EAAE,IAAI;AAC7B,QAAI,MAAM,IAAI,YAAY,EAAE;AAC5B,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,UAAI,CAAC,IAAI,MAAM,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC;AAAA,IACxI;AACA,MAAE,EAAE,IAAI;AAAA,EACV;AACA,IAAE,IAAI,CAAC,EAAE,EAAE,KAAK,MAAM,SAAS,KAAK,IAAI,KAAK,IAAI,GAAG,EAAE;AACtD,IAAE,IAAI,CAAC,EAAE,EAAE,IAAI,KAAK,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;AACtC,IAAE,IAAI,CAAC,EAAE,EAAE,KAAK,MAAM,SAAS,KAAK,IAAI;AACxC,WAAS,MAAM,GAAG,MAAM,GAAG,EAAE,KAAK;AAChC,QAAI,IAAI,IAAI,YAAY,EAAE;AAC1B,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,QAAE,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;AAAA,IACjB;AACA,aAAS,KAAK,IAAI,KAAK,IAAI,EAAE,IAAI;AAC/B,QAAE,EAAE,IAAI,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;AAAA,IACjE;AACA,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,aAAS,MAAM,GAAG,MAAM,IAAI,EAAE,KAAK;AACjC,UAAI,IAAI,KAAK,MAAM,MAAM,EAAE;AAC3B,UAAI,IAAI,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,EAAE,GAAG,MAAM;AAC3D,UAAI;AACJ,UAAI;AACJ,UAAI,KAAK,GAAG,EAAE,MAAM;AACpB,UAAI;AACJ,UAAI;AAAA,IACN;AACA,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AAAA,EACtB;AACA,SAAO,CAAC,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,GAAI;AACjW;AACA,IAAO,eAAQ;;;ACzEf,IAAI,KAAK,IAAI,MAAM,IAAM,YAAI;;;ACAvB,IAAO,aAAP,MAAiB;EACnB,gBAAa;AACT,WAAO,WAAM;EACjB;;AAGG,IAAM,aAAa,IAAI,WAAU;;;ACRxC,eAA0B;AAEpB,IAAO,oBAAP,MAAwB;EAC1B,mBAAmB,kBAA0B,cAAoB;AAC7D,UAAM,UAAU,KAAK,eAAe,gBAAgB;AAEpD,WAAO,GAAG,YAAY,GAAG,OAAO;EACpC;EAEA,eAAe,KAAW;AACtB,UAAM,YAAY,SAAS,GAAG;AAE9B,WAAO,UAAU;EACrB;;AAGG,IAAM,oBAAoB,IAAI,kBAAiB;;;AChBhD,IAAO,aAAP,MAAiB;EACnB,uBAAoB;AAChB,WAAO;EACX;EAEA,0BAA0B,KAAW;AACjC,WAAO,IAAI,QAAQ,0BAA0B,EAAE;EACnD;EAEA,iCAAiC,KAAW;AACxC,QAAI,KAAK,iBAAiB,GAAG,GAAG;AAC5B,aAAO,IAAI,GAAG;;AAElB,WAAO;EACX;EAEA,iBAAiB,KAAW;AACxB,QAAI,IAAI,MAAM,KAAK,GAAG;AAClB,aAAO;;AAEX,WAAO;EACX;;AAGG,IAAM,aAAa,IAAI,WAAU;;;ACxBlC,IAAO,aAAP,MAAiB;EACnB,aAAa,GAAM;AACf,UAAM,gBAA0B,OAAO,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;AAClE,WAAO;EACX;EAEA,iBAAoB,GAAQ,OAAsB;AAC9C,QAAI;AACA,UAAI,CAAC,OAAO;AACR,eAAO;;AAIX,UAAI,KAAK,UAAU,KAAK,GAAG;AACvB,eAAU,EAAE,KAAK;;AAIrB,YAAM,gBAAgB,KAAK,aAAa,CAAC;AAEzC,YAAM,SAAS,cAAc,KAAK,CAAC,MAAM,EAAE,YAAW,MAAO,MAAM,SAAQ,EAAG,YAAW,CAAE;AAE3F,UAAI,CAAC,QAAQ;AACT,eAAO;;AAGX,aAAO;aACF,KAAK;AACV,aAAO;;EAEf;EAEQ,UAAU,OAAU;AACxB,WAAO,CAAC,MAAM,WAAW,KAAK,CAAC,KAAK,SAAS,KAAK;EACtD;;AAGG,IAAM,aAAa,IAAI,WAAU;;;ACrClC,IAAO,iBAAP,MAAqB;;;;EAIvB,gCAAgC,UAAgB;AAC5C,WAAO,IAAI,QAAQ;EACvB;;AAGG,IAAM,iBAAiB,IAAI,eAAc;;;ACW1C,IAAO,gBAAP,MAAoB;EACtB,YAA6B,QAA6B;AAA7B,SAAA,SAAA;EAAgC;EAE7D,YAA8D,MAK7D;AAEG,UAAM,gBAAgB,KAAK,eACvB,eAAe,gCAAgC,KAAK,UAAU,KAAK,OAAO,QAAQ,CAAC;AAEvF,QAAI,eAAe;AAEf,aAAO;QACH,MAAM;QACN,gBAAgB,KAAK;QACrB,eAAe,KAAK;QACpB,+BAA+B,KAAK;;;AAI5C,UAAM,eAAe,KAAK,cAAc,eAAe,gCAAgC,KAAK,UAAU,KAAK,OAAO,QAAQ,CAAC;AAC3H,UAAM,eAAe,iBAAY,QAAZ,iBAAY,SAAA,SAAZ,aAAc;AAEnC,QAAI,CAAC,cAAc;AAEf,aAAO;;AAIX,UAAM,mBAAmB,OAAO,oBAAoB,KAAK,UAAU,QAAQ,QAAQ;AAEnF,eAAW,mBAAmB,kBAAkB;AAC5C,YAAM,aAAa,KAAK,kBAAkB,cAAc,eAAe;AACvE,YAAM,iBAAgD;QAClD,QAAQ,KAAK,UAAU,KAAK;QAC5B,YAAY,KAAK,UAAU,QAAQ,SAAS,eAAe;QAC3D,SAAS,WAAW;;AAExB,UAAI,WAAW,kBAAkB;AAC7B,cAAM,gBAAgB,KAAK,WAAW;UAClC;UACA,MAAM;UACN,eAAe,KAAK;UACpB,+BAA+B,KAAK;UACpC,gBAAgB,KAAK;SACxB;AAGD,qBAAa,SAAS,WAAW,YAAY,IAAI;;;AAIzD,WAAO;MACH,MAAM;MACN,gBAAgB,KAAK;MACrB,eAAe,KAAK;MACpB,+BAA+B,KAAK;;EAE5C;EAEQ,WAAW,MAMlB;AACG,UAAM,cAAc,WAAW,iBAA8B,aAAa,KAAK,eAAe,WAAW,IAAI;AAC7G,QAAI,aAAa;AACb,UAAI,gBAAgB,YAAY,gBAAgB;AAC5C,eAAO,KAAK,sBAAsB;UAC9B,gBAAgB,KAAK;UACrB,eAAe,KAAK;UACpB,+BAA+B,KAAK;UACpC,gBAAgB,KAAK;SACxB;;AAGL,UAAI,gBAAgB,YAAY,MAAM;AAClC,eAAO,KAAK,eAAe,KAAK,cAAc;;AAElD,UAAI,gBAAgB,YAAY,OAAO;AACnC,eAAO,KAAK,iBAAiB,KAAK,cAAc;;AAGpD,UAAI,gBAAgB,YAAY,QAAQ;AACpC,eAAO,KAAK,iBAAiB,KAAK,cAAc;;AAEpD,UAAI,gBAAgB,YAAY,gBAAgB;AAC5C,eAAO,KAAK,yBAAyB,KAAK,cAAc;;AAG5D,UAAI,gBAAgB,YAAY,UAAU;AACtC,eAAO,KAAK,mBAAmB,KAAK,cAAc;;AAGtD,UAAI,gBAAgB,YAAY,UAAU;AAEtC,eAAO,KAAK,mBACR,KAAK,gBACL,KAAK,gBACL,KAAK,+BACL,KAAK,aAAa;;AAI1B,UAAI,gBAAgB,YAAY,SAAS;AACrC,eAAO,KAAK,kBAAkB,KAAK,cAAc;;AAGrD,UAAI,gBAAgB,YAAY,UAAU;AACtC,eAAO,KAAK,mBAAmB,KAAK,cAAc;;AAGtD,UAAI,gBAAgB,YAAY,QAAQ;AACpC,eAAO,KAAK,iBAAiB,KAAK,cAAc;;;AAGxD,YAAQ,KACJ,0BAA0B,KAAK,eAAe,WAAW,IAAI,cAAc,KAAK,eAAe,WAAW,IAAI,uCAAuC;AAEzJ,WAAO,KAAK,iBAAiB,KAAK,cAAc;EACpD;EAEQ,mBACJ,gBACA,gBACA,+BACA,eAA+C;AAE/C,UAAM,aAAa,eAAe;AAGlC,UAAM,sBAAsC,CAAA;AAC5C,UAAM,+BAAyC,CAAA;AAI/C,UAAM,oCAAqC,WAAW,MAAiB,SACnE,0DAA0D;AAE9D,UAAM,mCAAmC,MAAM,KAAK,iCAAiC,EAAE,OACnF,CAAC,KAAK,UAAS;AACX,UAAI,MAAM,UAAU,MAAM,OAAO,UAAU;AACvC,YAAI,KAAK,MAAM,OAAO,QAAQ;;AAElC,aAAO;IACX,GACA,CAAA,CAAc;AAElB,UAAM,6BAA6B,CAAC,GAAG,WAAW,eAAe,EAAE,KAAK,SAAU,GAAG,GAAC;AAClF,aAAO,iCAAiC,QAAQ,CAAC,IAAI,iCAAiC,QAAQ,CAAC;IACnG,CAAC;AAED,eAAW,YAAY,4BAA4B;AAC/C,mCAA6B,KAAK,QAAQ;AAE1C,YAAM,eAAe,cAAc,QAAQ;AAG3C,UAAI,KAAK,kBAAiB,GAAI;AAC1B,cAAM,qBAAqB,KAAK,8BAC5B,UACA,YACA,gBACA,+BACA,aAAa;AAGjB,YAAI,oBAAoB;AAEpB,8BAAoB,KAAK,kBAAkB;eACxC;AAEH,cAAI,cAAc;AACd,kBAAM,yBAAyB,KAAK,YAAY;cAC5C,WAAW;cACX;cACA;cACA;aACH;AAGD,gBAAI,wBAAwB;AACxB,kCAAoB,KAAK,uBAAuB,IAAI;;;;;;AAQxE,UAAM,uBAAuB,KAAK,kBAAkB,WAAW,MAAM;AAGrE,UAAM,QAAiB,KAAK,iBAAiB,WAAW,KAAK;AAC7D,UAAM,SAA2B,qBAAqB;AAGtD,UAAM,eAAuB,KAAK,gBAAgB,WAAW,OAAO,qBAAqB,eAAe;AAExG,WAAO;MACH;MACA,qBAAqB;MACrB,aAAa;MACb;MACA,MAAM,WAAW;MACjB,MAAM,YAAY;MAClB,OAAO;;EAEf;EAEQ,mBAAmB,gBAA6C;;AACpE,UAAM,aAAa,eAAe;AAClC,WAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,KAAK,aAAa,gBAAgB,YAAY,UAAU,MAAM,WAAW,KAAK,CAAC,GAAA,EAClF,kBAAiB,KAAA,WAAW,sBAAgB,QAAA,OAAA,SAAA,KAAI,KAAI,CAAA;EAE5D;EAEQ,yBAAyB,gBAA6C;AAC1E,WAAO,KAAK,aAAa,gBAAgB,YAAY,gBAAgB,MAAM,eAAe,WAAW,KAAK;EAC9G;EAEQ,iBAAiB,gBAA6C;AAClE,WAAO,KAAK,aAAa,gBAAgB,YAAY,QAAQ,MAAK;AAC9D,UAAI,eAAe,WAAW,UAAU,GAAG;AACvC,eAAO;iBACA,eAAe,WAAW,OAAO;AACxC,eAAO,CAAC,eAAe,WAAW;;AAEtC,aAAO;IACX,CAAC;EACL;EAEQ,eAAe,gBAA6C;AAChE,WAAO,KAAK,aAAa,gBAAgB,YAAY,MAAM,MAAM,eAAe,WAAW,KAAK;EACpG;EAEQ,iBAAiB,gBAA6C;AAClE,WAAO,KAAK,aAAa,gBAAgB,YAAY,OAAO,MAAK;;AAC7D,YAAM,iBAAiB,eAAe,WAAW;AAEjD,YAAM,SAAqC,CAAA;AAE3C,iBAAW,iBAAiB,gBAAgB;AACxC,YAAI,aAAoF;AAGxF,cAAM,WAAmB,KAAK,OAAO,eAC/B,kBAAkB,mBAAmB,cAAc,KAAK,KAAK,OAAO,YAAY,IAChF,cAAc;AAEpB,YAAI,cAAc,YAAY;AAC1B,uBAAa,CAAA;AAEb,qBAAW,sBAAsB,OAAO,KAAK,cAAc,UAAU,GAAG;AACpE,kBAAM,YAAY,cAAc,WAAW,kBAAkB;AAE7D,uBAAW,kBAAkB,IAAC,OAAA,OAAA,OAAA,OAAA,CAAA,GACvB,SAAS,GAAA;cACZ,KAAK,GAAG,QAAQ,IAAI,UAAU,KAAK;;;;;AAK/C,cAAM,uBACD,KAAK,OAAO,2BAA0B,eAAU,QAAV,eAAU,SAAA,SAAV,WAAa,KAAK,OAAO,sBAAsB,MAAM;AAEhG,cAAM,YAAW,KAAA,yBAAoB,QAApB,yBAAoB,SAAA,SAApB,qBAAsB,SAAG,QAAA,OAAA,SAAA,KAAI;AAE9C,cAAM,QAAK,OAAA,OAAA,OAAA,OAAA,CAAA,GACJ,aAAa,GAAA;UAChB,KAAK;;UACL;QAAU,CAAA;AAGd,eAAO,KAAK,KAAK;;AAGrB,aAAO;IACX,CAAC;EACL;EAEQ,mBAAmB,gBAA6C;;AACpE,WAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,KAAK,aAAa,gBAAgB,YAAY,UAAU,MAAM,eAAe,WAAW,KAAK,CAAC,GAAA,EACjG,gBAAe,KAAA,eAAe,WAAW,oBAAc,QAAA,OAAA,SAAA,KAAI,KAAI,CAAA;EAEvE;EAEQ,iBAAiB,gBAA6C;AAClE,WAAO,KAAK,aAAa,gBAAgB,YAAY,SAAS,MAAM,eAAe,WAAW,KAAK;EACvG;EAEQ,iBACJ,gBAA6C;AAG7C,QAAI,KAAK,OAAO,iBAAiB;AAC7B,YAAM,uBAAuB,KAAK,OAAO,gBAAgB,cAAc;AAEvE,UAAI,sBAAsB;AACtB,eAAO,KAAK,aAAa,gBAAgB,YAAY,QAAQ,MAAM,oBAAoB;;;AAI/F,WAAO,KAAK,aAAa,gBAAgB,YAAY,QAAQ,MAAM,eAAe,WAAW,KAAK;EACtG;EAEQ,kBAAkB,gBAA6C;AACnE,WAAO,KAAK,aAAa,gBAAgB,YAAY,SAAS,MAAM,eAAe,WAAW,KAAK;EACvG;EAEQ,sBAAsB,MAK7B;AAEG,UAAM,cAA8B,CAAA;AAGpC,UAAM,sBAAsB,KAAK,eAAe,WAAW;AAE3D,eAAW,YAAY,qBAAqB;AACxC,UAAI,KAAK,kBAAiB,GAAI;AAC1B,cAAM,aAAa,KAAK,8BACpB,UACA,KAAK,eAAe,YACpB,KAAK,gBACL,KAAK,+BACL,KAAK,aAAa;AAEtB,YAAI,YAAY;AAEZ,sBAAY,KAAK,UAAU;;;;AAKvC,WAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,KAAK,aAAa,KAAK,gBAAgB,YAAY,gBAAgB,MAAM,mBAAmB,CAAC,GAAA,EAChG,YAAwB,CAAA;EAEhC;EAEQ,8BACJ,UACA,SACA,gBACA,4BACA,eAA+C;AAE/C,UAAM,kBAAkB,eAAe,gCAAgC,QAAQ;AAG/E,UAAM,gBAAgB,eAAe,eAAe;AAEpD,QAAI,eAAe;AAEf,aAAO;;AAGX,UAAM,eAAe,cAAc,eAAe;AAElD,QAAI,2BAA2B,SAAS,QAAQ,GAAG;AAC/C,aAAO,iBAAY,QAAZ,iBAAY,SAAA,SAAZ,aAAc;;AAGzB,+BAA2B,KAAK,QAAQ;AAGxC,QAAI,CAAC,cAAc;AACf,aAAO;;AAGX,QAAI;AAGJ,UAAM,yBAAyB,KAAK,YAAY;MAC5C,WAAW;MACX;MACA,+BAA+B;MAC/B;KACH;AAED,QAAI,wBAAwB;AACxB,yBAAmB,uBAAuB;AAG1C,qBAAe,eAAe,IAAI;;AAGtC,WAAO;EACX;EAEQ,iBAAiB,WAAwD;AAC7E,UAAM,QAAiB,CAAA;AAEvB,eAAW,UAAU,OAAO,KAAK,SAAS,GAAG;AACzC,YAAM,UAAU,UAAU,MAAM;AAChC,YAAM,KAAK;QACP,UAAU,QAAQ;QAClB;QACA,SAAS,QAAQ;QACjB,MAAM,QAAQ;OACjB;;AAGL,WAAO;EACX;EAEQ,gBAAgB,cAAsB,sBAA+C;AACzF,eAAW,uBAAuB,sBAAsB;AAEpD,UAAI,oBAAoB,WAAW,oBAAoB,aAAa;AAChE,uBAAe,aAAa,QACxB,IAAI,OAAO,oBAAoB,aAAa,GAAG,GAC/C,oBAAoB,MAAM;;;AAKtC,WAAO;EACX;EAEQ,kBAAkB,YAA0D;;AAIhF,UAAM,SAA2B,CAAA;AACjC,UAAM,kBAA6C,CAAA;AAEnD,eAAW,WAAW,OAAO,KAAK,UAAU,GAAG;AAC3C,YAAM,WAAW,WAAW,OAAO;AAGnC,YAAM,WAAmB,KAAK,OAAO,eAC/B,kBAAkB,mBAAmB,SAAS,KAAK,KAAK,OAAO,YAAY,IAC3E,SAAS;AAEf,aAAO,KAAK;QACR,cAAa,KAAA,SAAS,iBAAW,QAAA,OAAA,SAAA,KAAI;QACrC,SAAS,SAAS;QAClB,KAAK;QACL,SAAQ,KAAA,SAAS,YAAM,QAAA,OAAA,SAAA,KAAI;QAC3B,QAAO,KAAA,SAAS,WAAK,QAAA,OAAA,SAAA,KAAI;OAC5B;AAED,sBAAgB,KAAK;QACjB,aAAa,SAAS;QACtB,QAAQ;OACX;;AAGL,WAAO;MACH;MACA,gBAAgB;;EAExB;EAEQ,kBACJ,MACA,yBAA+B;AAK/B,QAAI,8BAAkD;AAEtD,QAAI,KAAK,OAAO,sBAAsB;AAClC,oCAA8B,KAAK,OAAO,qBAAqB,KAAK,OAAO,MAAM,uBAAuB;;AAG5G,QAAI,CAAC,6BAA6B;AAE9B,oCAA8B;;AAGlC,WAAO;MACH,cAAc;MACd,kBAAkB;;EAE1B;EAEQ,aACJ,gBACA,MACA,cAA0B;AAE1B,WAAO;MACH,MAAM,eAAe,WAAW;MAChC;MACA,OAAO,aAAY;;EAE3B;EAEQ,oBAAiB;AACrB,QAAI,CAAC,KAAK,OAAO,6BAA6B;AAC1C,aAAO;;AAEX,WAAO,KAAK,OAAO,gCAAgC;EACvD;;;;ACnfE,IAAO,aAAP,MAAiB;EAGnB,YAAqB,QAA6B;AAA7B,SAAA,SAAA;AACjB,SAAK,gBAAgB,IAAI,cAAc,MAAM;EACjD;;;;;;EAOA,0BACI,UAA4C;AAE5C,UAAM,YAAY,KAAK,SAAuB;MAC1C,WAAW,CAAC,SAAS,IAAI;MACzB,aAAa,OAAO,OAAO,SAAS,eAAe;KACtD;AAED,WAAO;MACH,MAAM,UAAU,MAAM,CAAC;MACvB,aAAa,UAAU;;EAE/B;;;;;;EAOA,6BACI,UAAoD;AAEpD,UAAM,YAAY,KAAK,SAAuB;MAC1C,WAAW,SAAS;MACpB,aAAa,OAAO,OAAO,SAAS,eAAe;KACtD;AAED,WAAO;EACX;;;;EAKA,SAA2D,MAG1D;AACG,UAAM,iBAAyC,CAAA;AAC/C,UAAM,gBAAkD,CAAA;AACxD,UAAM,gCAA0C,CAAA;AAChD,UAAM,kBAAkC,CAAA;AACxC,UAAM,oBAA4C,CAAA;AAClD,UAAM,iBAAmD,CAAC,GAAG,KAAK,WAAW,GAAG,KAAK,WAAW;AAGhG,eAAW,QAAQ,gBAAgB;AAC/B,oBAAc,eAAe,gCAAgC,KAAK,OAAO,QAAQ,CAAC,IAAI;QAClF,MAAM,KAAK,kBAAkB,IAAI;QACjC,SAAS;;;AAKjB,eAAW,QAAQ,KAAK,WAAW;AAC/B,YAAM,aAAa,KAAK,QAAsB;QAC1C,MAAM,cAAc,eAAe,gCAAgC,KAAK,OAAO,QAAQ,CAAC;QACxF;QACA;QACA;OACH;AACD,sBAAgB,KAAK,WAAW,IAAI;;AAIxC,eAAW,QAAQ,KAAK,aAAa;AACjC,YAAM,aAAa,KAAK,QAAsB;QAC1C,MAAM,cAAc,eAAe,gCAAgC,KAAK,OAAO,QAAQ,CAAC;QACxF;QACA;QACA;OACH;AAED,wBAAmB,KAAK,OAAO,QAAS,IAAI,WAAW;;AAG3D,WAAO;MACH,OAAO;MACP,aAAa;;EAErB;;;;EAKQ,QAA0D,MAKjE;AACG,QAAI,CAAC,KAAK,MAAM;AACZ,YAAM,MAAM,0CAA0C;;AAG1D,UAAM,SAAS,KAAK,cAAc,YAA0B;MACxD,WAAW,KAAK;MAChB,eAAe,KAAK;MACpB,+BAA+B,CAAA;MAC/B,gBAAgB,KAAK;KACxB;AAED,QAAI,CAAC,QAAQ;AACT,YAAM,MAAM,4BAA4B,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU;;AAEpF,WAAO;MACH,MAAM,OAAO;MACb,gBAAgB,OAAO;MACvB,eAAe,OAAO;MACtB,+BAA+B,OAAO;;EAE9C;EAEQ,kBAAkB,MAAoC;;AAC1D,UAAM,cAA4B;MAC9B,UAAU,CAAA;MACV,QAAQ;QACJ,UAAU,KAAK,OAAO;QACtB,YAAY,KAAK,OAAO;QACxB,IAAI,KAAK,OAAO;QAChB,UAAU,KAAK,OAAO;QACtB,cAAc,KAAK,OAAO;QAC1B,MAAM,KAAK,OAAO;QAClB,kBAAkB,KAAK,OAAO;QAC9B,MAAM,KAAK,OAAO;QAClB,eAAc,KAAA,KAAK,OAAO,mBAAa,QAAA,OAAA,SAAA,KAAI;QAC3C,WAAU,KAAA,KAAK,OAAO,cAAQ,QAAA,OAAA,SAAA,KAAI;;;AAI1C,WAAO;EACX;;;;ACvKE,IAAO,iBAAP,MAAqB;EACvB,YACI,gBACA,eAAiD;AAEjD,QAAI,CAAC,gBAAgB;AACjB,YAAM,MAAM,sDAAsD;;AAGtE,QAAI,CAAC,eAAe;AAChB,YAAM,MAAM,qDAAqD;;AAGrE,QAAI,CAAC,MAAM,QAAQ,aAAa,GAAG;AAC/B,YAAM,MAAM,sDAAsD;;AAGtE,UAAM,yBAAoD;MACtD,MAAM,eAAe;MACrB,UAAU,eAAe;MACzB,IAAI,eAAe;MACnB,cAAc,eAAe;;AAGjC,UAAM,cAAgC,KAAK,iBAAiB,aAAa;AAEzE,WAAO;MACH,QAAQ;MACR,OAAO;;EAEf;EAEA,cAAc,YAA8C;AACxD,QAAI,CAAC,YAAY;AACb,YAAM,MAAM,0DAA0D;;AAG1E,QAAI,CAAC,MAAM,QAAQ,UAAU,GAAG;AAC5B,YAAM,MAAM,0EAA0E;;AAG1F,UAAM,mBAAqC,CAAA;AAE3C,eAAW,QAAQ,CAAC,aAAY;AAC5B,uBAAiB,KAAK,KAAK,YAAY,SAAS,QAAQ,SAAS,KAAK,CAAC;IAC3E,CAAC;AAED,WAAO;EACX;;;;;EAMQ,iBAAiB,YAA8C;AACnE,QAAI,WAAW,WAAW,GAAG;AACzB,aAAO,CAAA;;AAGX,UAAM,mBAAqC,CAAA;AAE3C,eAAW,QAAQ,CAAC,UAAS;AACzB,YAAM,cAA8B;QAChC,UAAU,MAAM;QAChB,MAAM,MAAM;QACZ,OAAO,KAAK,iBAAiB,MAAM,KAAK;;AAG5C,uBAAiB,KAAK,WAAW;IACrC,CAAC;AAED,WAAO;EACX;;;;ACxEE,IAAO,aAAP,MAAiB;EACnB,cAAc,UAA4C;AACtD,WAAO,KAAK,QAAQ,QAAQ;EAChC;EAEA,iBAAiB,UAA4C;AACzD,WAAO,SAAS,MAAM,IAAI,CAAC,SAAQ;AAC/B,aAAO,KAAK,QAAQ,IAAI;IAC5B,CAAC;EACL;EAEQ,QAAQ,MAAoC;AAChD,QAAI,CAAC,MAAM;AACP,YAAM,MAAM,iBAAiB;;AAGjC,QAAI,CAAC,KAAK,UAAU;AAChB,YAAM,MAAM,0BAA0B;;AAG1C,UAAM,SAAuC;MACzC,UAAU,KAAK,OAAO;MACtB,IAAI,KAAK,OAAO;MAChB,MAAM,KAAK,OAAO;MAClB,cAAc,KAAK,OAAO;;AAG9B,UAAM,WAA8B,CAAA;AAEpC,UAAM,eAAe,OAAO,oBAAoB,KAAK,QAAQ;AAC7D,iBAAa,QAAQ,CAAC,gBAAuB;AACzC,YAAM,cAAc,KAAK,SAAS,WAAW;AAE7C,UAAI,CAAC,aAAa;AACd,cAAM,MAAM,wBAAwB,WAAW,cAAc,KAAK,OAAO,QAAQ,GAAG;;AAIxF,YAAM,kBAAkB;AAGxB,YAAM,UAA8C,CAAA;AAGpD,YAAM,aAAa,YAAY;AAC/B,UAAI,YAAY;AACZ,YAAI,CAAC,MAAM,QAAQ,UAAU,GAAG;AAC5B,gBAAM,MAAM,oDAAoD;;AAGpE,mBAAW,QAAQ,CAAC,cAAa;AAC7B,kBAAQ,KAAK;YACT,UAAU,UAAU;YACpB,MAAM,UAAU;WACnB;QACL,CAAC;;AAGL,eAAS,KAAK;QACV,UAAU;QACV,eAAe,YAAY;QAC3B;QACA,MAAM,YAAY;QAClB,MAAM,YAAY;OACrB;IACL,CAAC;AAED,WAAO;MACH;MACA;;EAER;;;;ACvEE,IAAO,uBAAP,MAA2B;EAC7B,WAAW,UAAmD;AAC1D,QAAI,CAAC,UAAU;AACX,YAAM,MAAM,sCAAsC;;AAGtD,UAAM,UAAU;AAEhB,WAAO;MACH,UAAU,QAAQ;MAClB,MAAM,QAAQ;MACd,MAAM,QAAQ;MACd,SAAS,QAAQ,UAAU,QAAQ,UAAU,CAAA;MAC7C,eAAe,QAAQ;;EAE/B;;;;ACfE,IAAO,iBAAP,MAAqB;EACvB,qBAAqB,UAA0C;AAC3D,WAAO,SAAS,UAAU,IAAI,CAAC,aAAY;AACvC,aAAO,KAAK,YAAY,QAAQ;IACpC,CAAC;EACL;EAEQ,YAAY,UAAqC;AACrD,QAAI,CAAC,UAAU;AACX,YAAM,MAAM,qBAAqB;;AAGrC,WAAO;MACH,QAAQ,SAAS;;EAEzB;;;;ACfE,IAAO,aAAP,MAAiB;EACnB,oBAAoB,mBAAsD;;AACtE,UAAM,iBAAiB,kBAAkB,KAAK;AAE9C,UAAM,WAAoD,kBAAkB,KAAK,WAC3E,kBAAkB,KAAK,WACvB,CAAA;AAEN,WAAO;MACH,YAAY,kBAAkB;MAC9B,WAAW,kBAAkB;MAC7B,MAAM;QACF;QACA,QAAQ;UACJ,UAAU,eAAe;UACzB,YAAY,eAAe;UAC3B,IAAI,eAAe;UACnB,UAAU,eAAe;UACzB,cAAc,eAAe;UAC7B,MAAM,eAAe;UACrB,kBAAkB,eAAe;UACjC,MAAM,eAAe;UACrB,eAAc,KAAA,eAAe,mBAAa,QAAA,OAAA,SAAA,KAAI;UAC9C,WAAU,KAAA,eAAe,cAAQ,QAAA,OAAA,SAAA,KAAI;;;;EAIrD;;;;ACKE,IAAO,iBAAP,MAAqB;EAQvB,YAAqB,QAA6B;AAA7B,SAAA,SAAA;AACjB,SAAK,aAAa,IAAI,WAAU;AAChC,SAAK,iBAAiB,IAAI,eAAc;AACxC,SAAK,aAAa,IAAI,WAAW,MAAM;AACvC,SAAK,iBAAiB,IAAI,eAAc;AACxC,SAAK,uBAAuB,IAAI,qBAAoB;AACpD,SAAK,aAAa,IAAI,WAAU;EACpC;;;;;EAMA,sBAAsB,MAAsC;AACxD,WAAO;MACH,OAAO,KAAK,eAAe,qBAAqB,IAAI;MACpD,YAAY,KAAK,cAAc,KAAK,UAAU;;EAEtD;;;;;EAMA,yBAAyB,MAAwC;AAC7D,WAAO;MACH,OAAO,KAAK,WAAW,iBAAiB,IAAI;MAC5C,YAAY,KAAK,cAAc,KAAK,UAAU;;EAEtD;;;;;;EAOA,wBAAwB,MAAwC;AAC5D,WAAO;MACH,MAAM,KAAK,WAAW,cAAc,IAAI;;EAEhD;EAEA,kBACI,MAAkC;AAElC,UAAM,cAAc,KAAK,WAAW,SAAuB;MACvD,aAAa,OAAO,OAAO,KAAK,eAAe;MAC/C,WAAW,KAAK;KACnB;AAED,WAAO;MACH,OAAO,YAAY;MACnB,aAAa,YAAY;;EAEjC;;;;;;EAOA,wBACI,MAAwC;AAExC,UAAM,aAAa,KAAK,WAAW,0BAAwC,IAAI;AAE/E,WAAO;MACH,MAAM,WAAW;MACjB,aAAa,WAAW;;EAEhC;;;;;;EAOA,yBACI,MAAyC;AAEzC,UAAM,cAAc,KAAK,WAAW,6BAA2C,IAAI;AAEnF,WAAO;MACH,OAAO,YAAY;MACnB,YAAY,KAAK,cAAc,KAAK,UAAU;MAC9C,aAAa,YAAY;;EAEjC;;;;;EAMA,qBAAqB,MAA0C;AAC3D,WAAO;MACH,UAAU,KAAK,eAAe,YAAY,KAAK,QAAQ,KAAK,KAAK;;EAEzE;;;;;EAMA,uBAAuB,MAA2C;AAC9D,WAAO;MACH,OAAO,KAAK,eAAe,cAAc,KAAK,UAAU;MACxD,YAAY,KAAK,cAAc,KAAK,UAAU;;EAEtD;;;;;EAMA,+BACI,MAA+C;AAE/C,WAAO,KAAK,qBAAqB,WAAW,IAAI;EACpD;EAEA,sBAAsB,MAAuC;AACzD,WAAO;MACH,OAAO,KAAK,MAAM,IAAI,CAAC,MAAM,KAAK,WAAW,oBAAoB,CAAC,CAAC;;EAE3E;EAEA,YAAY,MAAoC;AAC5C,WAAO;MACH,OAAO,KAAK,MAAM,IAAI,CAAC,MAAM,KAAK,WAAW,oBAAoB,CAAC,CAAC;;EAE3E;EAEQ,cAAc,oBAAiD;;AACnE,WAAO;MACH,MAAM,mBAAmB;MACzB,OAAO,mBAAmB;MAC1B,OAAO,mBAAmB;MAC1B,UAAU,mBAAmB;MAC7B,aAAY,KAAA,mBAAmB,iBAAW,QAAA,OAAA,SAAA,KAAI;;EAEtD;;;;AClKE,IAAO,iBAAP,MAAqB;;;;;;EASvB,YAAsB,QAA6B;AAA7B,SAAA,SAAA;AAClB,QAAI,CAAC,QAAQ;AACT,YAAM,MAAM,0CAA0C;;AAG1D,SAAK,iBAAiB,IAAI,eAAe,MAAM;AAC/C,SAAK,eAAe,IAAI,aACpB,QACA,OAAO,cAAc,OAAO,cAAc,IAAI,YAAW,GACzD;MACI,MAAM,QAAQ;MACd,MAAM,QAAQ;MACd,SAAS,QAAQ;OAErB,KAAK,cAAc;EAE3B;;;;EAKA,YAAS;AACL,WAAO,IAAI,eAAe,KAAK,QAAQ,KAAK,YAAY;EAC5D;;;;EAKA,QAAK;AACD,WAAO,IAAI,kBAAkB,KAAK,QAAQ,KAAK,YAAY;EAC/D;;;;;EAMA,KAAK,cAAoB;AACrB,WAAO,IAAI,gBAAgB,KAAK,QAAQ,KAAK,cAAc,YAAY;EAC3E;;;;EAKA,QAAK;AACD,WAAO,IAAI,mBAAiC,KAAK,QAAQ,KAAK,YAAY;EAC9E;;;;;EAMA,KAAuD,UAAgB;AACnE,WAAO,IAAI,gBAA8B,KAAK,QAAQ,KAAK,cAAc,QAAQ;EACrF;;;;EAKA,YAAS;AACL,WAAO,IAAI,eAA6B,KAAK,QAAQ,KAAK,YAAY;EAC1E;;;;;EAMA,SAAS,UAAgB;AACrB,WAAO,IAAI,cAAc,KAAK,QAAQ,KAAK,cAAc,QAAQ;EACrE;;;;EAKA,aAAU;AACN,WAAO,IAAI,gBAAgB,KAAK,QAAQ,KAAK,YAAY;EAC7D;;;;;;EAOA,QAAQ,cAAsB,iBAAuB;AACjD,WAAO,IAAI,aAAa,KAAK,QAAQ,KAAK,cAAc,cAAc,eAAe;EACzF;;;;EAKA,iBAAc;AACV,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,YAAY;EACjE;;;;EAKA,cAAW;AACP,WAAO,IAAI,iBAAiB,KAAK,QAAQ,KAAK,YAAY;EAC9D;;;;AC7HE,SAAU,qBAAqB,QAA6B;AAC9D,SAAO,IAAI,eAAe,MAAM;AACpC;;;ACEO,IAAO,kCAAP,MAAsC;EACzC,YAAmB,OAAa;AAAb,SAAA,QAAA;EAAgB;EAEnC,YAAS;AACL,SAAK;EACT;;;;ACXG,IAAM,sBAAsB;EAC/B,uBAAuB;EACvB,2BAA2B;IACvB,MAAM;IACN,UAAU;IACV,cAAc;IACd,cAAc;IACd,cAAc;;EAElB,iBAAiB;IACb,UAAU;IACV,YAAY;;EAEhB,kBAAkB;IACd,UAAU;IACV,aAAa;IACb,cAAc;;EAElB,kCAAkC;EAClC,mBAAmB;;;;AChBjB,IAAO,eAAP,MAAmB;EAAzB,cAAA;AAEoB,SAAA,2BAAmC;EA8FvD;EA5FI,cAAc,aAA6B,cAAoB;AAC3D,QAAI,CAAC,aAAa;AACd,aAAO;;AAEX,WAAO,YAAY,KAAK,CAAC,MAAM,EAAE,OAAO,aAAa,YAAY;EACrE;EAEA,YACI,cACA,aACA,SAAe;AAEf,UAAM,eAAe,aAAa,OAAO,KAAK,CAAC,MAAM,EAAE,YAAY,OAAO;AAC1E,QAAI,cAAc;AACd,aAAO;;AAIX,QAAI,aAAa;AACb,iBAAW,cAAc,aAAa;AAClC,mBAAW,cAAc,OAAO,KAAK,WAAW,QAAQ,GAAG;AACvD,gBAAM,UAAU,WAAW,SAAS,UAAU;AAC9C,cAAI,QAAQ,SAAS,YAAY,UAAU;AACvC,kBAAM,kBAAkB;AACxB,kBAAM,uBAAuB,gBAAgB,OAAO,KAAK,CAAC,MAAM,EAAE,YAAY,OAAO;AACrF,gBAAI,sBAAsB;AACtB,qBAAO;;;;;;AAO3B,WAAO;EACX;EAEA,WAAW,cAAwC,aAA6B,QAAc;AAC1F,UAAM,cAAc,aAAa,MAAM,KAAK,CAAC,MAAM,EAAE,WAAW,MAAM;AACtE,QAAI,aAAa;AACb,aAAO;;AAIX,QAAI,aAAa;AACb,iBAAW,cAAc,aAAa;AAClC,mBAAW,cAAc,OAAO,KAAK,WAAW,QAAQ,GAAG;AACvD,gBAAM,UAAU,WAAW,SAAS,UAAU;AAC9C,cAAI,QAAQ,SAAS,YAAY,UAAU;AACvC,kBAAM,kBAAkB;AACxB,kBAAM,sBAAsB,gBAAgB,MAAM,KAAK,CAAC,MAAM,EAAE,WAAW,MAAM;AACjF,gBAAI,qBAAqB;AACrB,qBAAO;;;;;;AAO3B,WAAO;EACX;EAEA,uBAAuB,SAAgB;AACnC,UAAM,aAAwC,CAAA;AAE9C,aAAS,IAAI,GAAG,IAAI,QAAQ,WAAW,QAAQ,KAAK;AAChD,YAAM,YAAY,QAAQ,WAAW,CAAC;AAEtC,iBAAW,KAAK;QACZ,MAAM,UAAU;QAChB,OAAO,UAAU;OACpB;;AAGL,WAAO;MACH,KAAK,QAAQ;MACb,cAAc,CAAC,eAAe,mBAAkB;AAC5C,cAAM,YAAY,QAAQ,WAAW,aAAa,aAAa;AAC/D,YAAI,WAAW;AACX,oBAAU,QAAQ,mBAAc,QAAd,mBAAc,SAAd,iBAAkB;eACjC;AACH,kBAAQ,aAAa,eAAe,mBAAc,QAAd,mBAAc,SAAd,iBAAkB,EAAE;;MAEhE;MACA,cAAc,CAAC,YAAa,QAAQ,YAAY;MAChD,cAAc,CAAC,YAAa,QAAQ,YAAY;MAChD,MAAM,QAAQ;MACd,MAAM,QAAQ,cAAc,QAAQ,cAAc;MAClD;MACA,eAAe,QAAQ,gBAAgB,KAAK,uBAAuB,QAAQ,aAAa,IAAI;MAC5F,eAAe;;EAEvB;;AAGG,IAAM,eAAe,IAAI,aAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFtC,IAAO,qBAAP,MAAyB;EACrB,WACF,MACA,qBACAC,YACA,aAA2B;;AAE3B,aAAO,MAAM,KAAK,mBACd,qBACAA,YACA,MACA,aACA,IAAI,gCAAgC,CAAC,GACrC,IAAI;IAEZ,CAAC;;EAEa,mBACV,qBACAA,YACA,MACA,aACA,iBACA,eAA6B;;AAE7B,YAAM,cAAc,KAAK,qBAAqB,IAAI;AAGlD,YAAM,SAAS,MAAM,KAAK,4BACtB,qBACAA,YACA,YAAY,UACZ;QACI,OAAO,CAAA;QACP,aAAa,CAAA;QACb,QAAQ,CAAA;SAEZ,aACA,iBACA,aAAa;AAGjB,aAAO;QACH,oBAAoB,OAAO,YAAY,OAAO,CAAC,MAAM,EAAE,aAAa,WAAW,EAAE,IAAI,CAAC,MAAM,EAAE,YAAY;QAC1G,qBAAqB,OAAO,YACvB,OAAO,CAAC,MAAM,EAAE,aAAa,YAAY,EACzC,IAAI,CAAC,MAAM,EAAE,YAAY;QAC9B,QAAQ,YAAY;;IAE5B,CAAC;;EAEa,4BACV,qBACAA,YACA,gBACA,QACA,aACA,iBACA,eAA6B;;AAE7B,UAAI,CAAC,kBAAkB,eAAe,WAAW,GAAG;aAE7C;AAEH,iBAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC5C,gBAAM,UAAU,eAAe,CAAC;AAEhC,gBAAMA,WAAU,qBAAqB,aAAa,uBAAuB,OAAO,CAAC;AAEjF,gBAAM,gBAAgB,QAAQ,aAAa,QAAQ,WAAW,aAAa,MAAM,IAAI;AAGrF,cACI,QAAQ,cACR,iBACA,cAAc,SACd,cAAc,MAAM,YAAW,MAC3B,oBAAoB,0BAA0B,KAAK,YAAW,GACpE;AACE,kBAAM,wBAAwB,QAAQ,WAAW,aAC7C,oBAAoB,0BAA0B,YAAY;AAE9D,kBAAM,oBAAoB,QAAQ,WAAW,aACzC,oBAAoB,0BAA0B,QAAQ;AAG1D,gBAAI,CAAC,mBAAmB;AACpB,oBAAM,MAAM,kFAAkF;;AAGlG,kBAAM,eAAe,QAAQ,WAAW,aACpC,oBAAoB,0BAA0B,YAAY;AAG9D,gBAAI,WAA4B;AAEhC,gBACI,gBACA,aAAa,UAAU,oBAAoB,0BAA0B,cACvE;AACE,yBAAW;;AAIf,kBAAM,wBAAkD;cACpD,cAAc,wBAAwB,sBAAsB,QAAQ;cACpE,UAAU,oBAAoB,kBAAkB,QAAQ;cACxD;;AAIJ,kBAAM,gBAAgB,QAAQ;AAE9B,gBAAI,CAAC,eAAe;AAChB,sBAAQ,KACJ,kCAAkC,sBAAsB,YAAY,SAAS,sBAAsB,QAAQ,sFAAsF;mBAElM;AACH,kBAAI,kBAAkB,UAAU,QAAQ;AAEpC,uBAAO,YAAY,KAAK,qBAAqB;AAG7C,sBAAMA,WAAU,yBACZ,aAAa,uBAAuB,OAAO,GAC3C,sBAAsB,cACtB,gBAAgB,OAChB,aAAa,cAAc,aAAa,sBAAsB,YAAY,CAAC;AAI/E,gCAAgB,UAAS;qBACtB;AACH,wBAAQ,KACJ,iEAAiE,kBAAkB,KAAK,GAAG;;;qBAOvG,QAAQ,SAAS,YAAW,MAAO,oBAAoB,gBAAgB,SAAS,YAAW,GAC7F;AACE,kBAAM,sBAAsB,QAAQ,WAAW,aAC3C,oBAAoB,gBAAgB,UAAU;AAGlD,gBAAI,qBAAqB;AACrB,oBAAM,aAA0B;gBAC5B,YAAY,sBAAsB,oBAAoB,QAAQ;;AAIlE,qBAAO,MAAM,KAAK,UAAU;AAG5B,oBAAM,WAAW,QAAQ;AAEzB,oBAAMA,WAAU,iBACZ,aAAa,uBAAuB,OAAO,GAC3C,WAAW,YACX,UACA,aAAa,WAAW,qBAAqB,aAAa,WAAW,UAAU,CAAC;;qBAMxF,QAAQ,SAAS,YAAW,MAAO,oBAAoB,iBAAiB,SAAS,YAAW,GAC9F;AACE,kBAAM,uBAAuB,QAAQ,WAAW,aAC5C,oBAAoB,iBAAiB,WAAW;AAIpD,gBAAI,sBAAsB;AACtB,oBAAM,WAAyB;gBAC3B,SAAS,qBAAqB;;AAGlC,qBAAO,OAAO,KAAK,QAAQ;AAG3B,oBAAMA,WAAU,mBACZ,aAAa,uBAAuB,OAAO,GAC3C,SAAS,SACT,aAAa,YAAY,qBAAqB,aAAa,SAAS,OAAO,CAAC;;iBAGjF;AAEH,kBAAMA,WAAU,4BAA4B,aAAa,uBAAuB,OAAO,CAAC;;AAI5F,cAAI,QAAQ,YAAY,QAAQ,SAAS,SAAS,GAAG;AACjD,kBAAM,KAAK,4BACP,qBACAA,YACA,QAAQ,UACR,QACA,aACA,iBACA,aAAa;;;;AAM7B,aAAO;IACX,CAAC;;EAEO,qBAAqB,MAAY;AACrC,UAAM,UAAU,SAAS,cAAc,oBAAoB,qBAAqB;AAChF,YAAQ,YAAY;AAEpB,WAAO;EACX;;AAGG,IAAM,qBAAqB,IAAI,mBAAkB;;;AC5NlD,IAAO,gBAAP,MAAoB;EACtB,MACI,MACA,qBACAC,YACA,aAA2B;AAE3B,WAAO,KAAK,cACR,qBACAA,YACA,MACA,aACA,IAAI,gCAAgC,CAAC,GACrC,IAAI;EAEZ;EAEQ,cACJ,qBACAA,YACA,MACA,aACA,iBACA,eAA6B;AAE7B,UAAM,cAAc,KAAK,qBAAqB,IAAI;AAGlD,UAAM,SAAS,KAAK,uBAChB,qBACAA,YACA,YAAY,UACZ;MACI,OAAO,CAAA;MACP,aAAa,CAAA;MACb,QAAQ,CAAA;OAEZ,aACA,iBACA,aAAa;AAGjB,WAAO;MACH,oBAAoB,OAAO,YAAY,OAAO,CAAC,MAAM,EAAE,aAAa,WAAW,EAAE,IAAI,CAAC,MAAM,EAAE,YAAY;MAC1G,qBAAqB,OAAO,YACvB,OAAO,CAAC,MAAM,EAAE,aAAa,YAAY,EACzC,IAAI,CAAC,MAAM,EAAE,YAAY;MAC9B,QAAQ,YAAY;;EAE5B;EAEQ,uBACJ,qBACAA,YACA,gBACA,QACA,aACA,iBACA,eAA6B;AAE7B,QAAI,CAAC,kBAAkB,eAAe,WAAW,GAAG;WAE7C;AAEH,eAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC5C,cAAM,UAAU,eAAe,CAAC;AAEhC,QAAAA,WAAU,gBAAgB,aAAa,uBAAuB,OAAO,CAAC;AAEtE,cAAM,gBAAgB,QAAQ,aAAa,QAAQ,WAAW,aAAa,MAAM,IAAI;AAGrF,YACI,QAAQ,cACR,iBACA,cAAc,SACd,cAAc,MAAM,YAAW,MAC3B,oBAAoB,0BAA0B,KAAK,YAAW,GACpE;AACE,gBAAM,wBAAwB,QAAQ,WAAW,aAC7C,oBAAoB,0BAA0B,YAAY;AAE9D,gBAAM,oBAAoB,QAAQ,WAAW,aACzC,oBAAoB,0BAA0B,QAAQ;AAG1D,cAAI,CAAC,mBAAmB;AACpB,kBAAM,MAAM,kFAAkF;;AAGlG,gBAAM,eAAe,QAAQ,WAAW,aACpC,oBAAoB,0BAA0B,YAAY;AAG9D,cAAI,WAA4B;AAEhC,cACI,gBACA,aAAa,UAAU,oBAAoB,0BAA0B,cACvE;AACE,uBAAW;;AAIf,gBAAM,wBAAkD;YACpD,cAAc,wBAAwB,sBAAsB,QAAQ;YACpE,UAAU,oBAAoB,kBAAkB,QAAQ;YACxD;;AAGJ,gBAAM,gBAAgB,QAAQ;AAE9B,cAAI,CAAC,eAAe;AAChB,oBAAQ,KACJ,kCAAkC,sBAAsB,YAAY,SAAS,sBAAsB,QAAQ,sFAAsF;iBAElM;AACH,gBAAI,kBAAkB,UAAU,QAAQ;AAEpC,qBAAO,YAAY,KAAK,qBAAqB;AAG7C,cAAAA,WAAU,oBACN,aAAa,uBAAuB,OAAO,GAC3C,sBAAsB,cACtB,gBAAgB,OAChB,aAAa,cAAc,aAAa,sBAAsB,YAAY,CAAC;AAI/E,8BAAgB,UAAS;mBACtB;AACH,sBAAQ,KACJ,iEAAiE,kBAAkB,KAAK,GAAG;;;mBAOvG,QAAQ,SAAS,YAAW,MAAO,oBAAoB,gBAAgB,SAAS,YAAW,GAC7F;AACE,gBAAM,sBAAsB,QAAQ,WAAW,aAC3C,oBAAoB,gBAAgB,UAAU;AAGlD,cAAI,qBAAqB;AACrB,kBAAM,aAA0B;cAC5B,YAAY,sBAAsB,oBAAoB,QAAQ;;AAIlE,mBAAO,MAAM,KAAK,UAAU;AAG5B,kBAAM,WAAW,QAAQ;AAEzB,YAAAA,WAAU,YACN,aAAa,uBAAuB,OAAO,GAC3C,WAAW,YACX,UACA,aAAa,WAAW,qBAAqB,aAAa,WAAW,UAAU,CAAC;;mBAMxF,QAAQ,SAAS,YAAW,MAAO,oBAAoB,iBAAiB,SAAS,YAAW,GAC9F;AACE,gBAAM,uBAAuB,QAAQ,WAAW,aAC5C,oBAAoB,iBAAiB,WAAW;AAIpD,cAAI,sBAAsB;AACtB,kBAAM,WAAyB;cAC3B,SAAS,qBAAqB;;AAGlC,mBAAO,OAAO,KAAK,QAAQ;AAG3B,YAAAA,WAAU,cACN,aAAa,uBAAuB,OAAO,GAC3C,SAAS,SACT,aAAa,YAAY,qBAAqB,aAAa,SAAS,OAAO,CAAC;;eAGjF;AAEH,UAAAA,WAAU,uBAAuB,aAAa,uBAAuB,OAAO,CAAC;;AAIjF,YAAI,QAAQ,YAAY,QAAQ,SAAS,SAAS,GAAG;AACjD,eAAK,uBACD,qBACAA,YACA,QAAQ,UACR,QACA,aACA,iBACA,aAAa;;;;AAM7B,WAAO;EACX;EAEQ,qBAAqB,MAAY;AACrC,UAAM,UAAU,SAAS,cAAc,oBAAoB,qBAAqB;AAChF,YAAQ,YAAY;AAEpB,WAAO;EACX;;AAGG,IAAM,gBAAgB,IAAI,cAAa;;;ACvOvC,IAAM,gCAAsD,CAAC,aAAa,YAAW;AACxF,SAAO,WAAW,iCAAiC,WAAW,0BAA0BC,aAAY,OAAO,CAAC,CAAC;AACjH;AAEA,SAASA,aAAY,KAAW;AAC5B,QAAM,IAAI,QAAQ,WAAW,qBAAoB,GAAI,CAAC,GAAG,MAAe,IAAI,EAAE,YAAW,IAAK,EAAG;AACjG,SAAO,IAAI,UAAU,GAAG,CAAC,EAAE,YAAW,IAAK,IAAI,UAAU,CAAC;AAC9D;;;ACPO,IAAM,iCAAuD,CAAC,aAAa,YAAW;AACzF,SAAO,WAAW,iCAAiC,WAAW,0BAA0B,aAAa,OAAO,CAAC,CAAC;AAClH;AAEA,SAAS,aAAa,KAAW;AAC7B,QAAM,IAAI,QAAQ,WAAW,qBAAoB,GAAI,CAAC,GAAG,MAAe,IAAI,EAAE,YAAW,IAAK,EAAG;AACjG,SAAO,IAAI,UAAU,GAAG,CAAC,EAAE,YAAW,IAAK,IAAI,UAAU,CAAC;AAC9D;;;ACPO,IAAM,gCAAsD,CAAC,aAAa,YAAW;AACxF,SAAO,WACF,iCAAiC,WAAW,0BAA0B,YAAY,OAAO,CAAC,CAAC,EAC3F,YAAW;AACpB;AAEA,SAAS,YAAY,KAAW;AAC5B,QAAM,IAAI,QAAQ,WAAW,qBAAoB,GAAI,CAAC,GAAG,MAAc,OAAO,IAAI,EAAE,YAAW,IAAK,GAAG;AACvG,SAAO,oBAAoB,sBAAsB,GAAG,CAAC;AACzD;AAEA,SAAS,sBAAsB,KAAW;AACtC,MAAI,CAAC,IAAI,WAAW,GAAG,GAAG;AACtB,WAAO;;AAGX,SAAO,IAAI,UAAU,CAAC;AAC1B;AAEA,SAAS,oBAAoB,KAAW;AACpC,MAAI,CAAC,IAAI,SAAS,GAAG,GAAG;AACpB,WAAO;;AAGX,SAAO,IAAI,MAAM,GAAG,EAAE;AAC1B;;;ACzBM,IAAgB,uBAAhB,MAAoC;EACtC,YAAoB,eAAqC,QAAqB;AAA1D,SAAA,gBAAA;AAAqC,SAAA,SAAA;EAAwB;EAIvE,YAAS;AACf,QAAI,KAAK,QAAQ;AACb,aAAO,KAAK;;AAGhB,WAAO,KAAK;EAChB;;;;ACVE,IAAO,uBAAP,cAAoC,qBAGzC;EACG,YAAY,QAAwB;AAChC,UAAM,eAAe,MAAM;EAC/B;EAEA,gBAAgB,OAAiC;AAC7C,WAAO,KAAK,wBAAwB,MAAM,QAAQ,OAAO,KAAK;EAClE;EAEQ,wBAAwB,MAAc,OAAiC;;AAC3E,UAAM,eAAe,MAAM,UAAS,EAAG,MACnC,MACA,MAAM,SACN;MACI,iBAAiB,CAAC,YAAW;MAAE;MAC/B,qBAAqB,CAAC,SAAS,cAAc,iBAAiB,eAAc;;AACxE,cAAM,gBAAgB,QAAQ;AAE9B,YAAI,eAAe;AACf,gBAAM,mBAAmB,MAAM,uBACzBC,MAAA,MAAM,oBAAoB,cAAc,UAAU,EAAE,qBAAe,QAAAA,QAAA,SAAAA,MAAI,KACvE;AAGN,gBAAM,YAAY,KAAK,wBAAwB,kBAAkB,KAAK,EAAE;AAGxE,cAAI,MAAM,+BAA+B,MAAM;AAC3C,oBAAQ,aAAa,SAAS;iBAC3B;AACH,oBAAQ,aAAa,SAAS;;AAIlC,kBAAQ,aAAa,aAAa,0BAA0B,GAAG;;MAEvE;MACA,wBAAwB,CAAC,YAAW;MAEpC;MACA,eAAe,CAAC,SAAS,SAAS,UAAS;AAEvC,cAAM,cAAc,MAAM,gBAAgB,MAAM,cAAc,SAAS,KAAK,IAAI;AAGhF,YAAI,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,WAAW;AAExB,kBAAQ,aAAa,YAAY,SAAS;mBACnC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,UAAU;AAE9B,kBAAQ,aAAa,oBAAoB,iBAAiB,cAAc,YAAY,QAAQ;;MAEpG;MACA,aAAa,CAAC,SAAS,QAAQ,UAAU,SAAQ;AAC7C,YAAI,MAAM,aAAa;AACnB,gBAAM,YAAY,MAAM,YAAY,QAAQ,UAAU,IAAI;AAG1D,cAAI,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,UAAU;AAErB,oBAAQ,aAAa,UAAU,QAAQ;qBAChC,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,SAAS;AAE3B,oBAAQ,aAAa,QAAQ,UAAU,OAAO;;;MAG1D;QAEJ,KAAA,MAAM,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;AAG3B,WAAO;MACH,oBAAoB,aAAa;MACjC,qBAAqB,aAAa;MAClC,MAAM,aAAa;;EAE3B;;AAGG,IAAM,6BAA6B,CAAC,WAA6B,IAAI,qBAAqB,MAAM;;;ACxEjG,IAAO,yBAAP,cAAsC,qBAAyE;EAKjH,YAAY,QAAwB;AAChC,UAAM,eAAe,MAAM;AALd,SAAA,qBAA6B;AAC7B,SAAA,SAAiB;AACjB,SAAA,iBAAyB;EAI1C;EAEA,gBAAgB,OAAmC;;AAC/C,UAAM,SAAS,KAAK,wBAAwB,MAAM,QAAQ,OAAO,OAAO;MACpE,MAAM;MACN,YAAY,CAAA;MACZ,UAAU,CAAA;MACV,MAAM,CAAA;MACN,MAAK,KAAA,MAAM,gBAAU,QAAA,OAAA,SAAA,KAAI,KAAK;MAC9B,YAAY,KAAK;KACpB;AAED,QAAI,MAAM,gBAAgB,MAAM;AAC5B,WAAK,YAAY,MAAM;;AAG3B,WAAO;MACH,MAAM;;EAEd;EAEQ,wBACJ,MACA,OACA,QAA2B;;AAE3B,UAAM,UAAS,EAAG,MACd,MACA,MAAM,SACN;MACI,iBAAiB,CAAC,YAAW;AAEzB,gBAAQ,aAAa,KAAK,oBAAoB,WAAW,cAAa,CAAE;MAC5E;MACA,qBAAqB,CAAC,SAAS,cAAc,iBAAiB,eAAc;AACxE,cAAM,OAAuC;UACzC,UAAU;UACV,MAAM;;AAGV,cAAM,cAAc,KAAK,oBAAoB,QAAQ,aAAa;AAClE,cAAM,aAAa,KAAK,kBAAkB,aAAa,MAAM;AAE7D,YAAI,YAAY;AACZ,qBAAW,SAAS,KAAK;YACrB,MAAM;YACN,YAAY,KAAK,cAAc,OAAO;YACtC,KAAK,QAAQ,IAAI,YAAW;YAC5B;YACA,UAAU,CAAA;YACV,YAAY,KAAK,oBAAoB,OAAO;WAC/C;;MAET;MACA,wBAAwB,CAAC,YAAW;;AAChC,cAAM,OAAuC;UACzC,OAAMC,MAAA,QAAQ,UAAI,QAAAA,QAAA,SAAAA,MAAI;UACtB,OAAM,KAAA,QAAQ,UAAI,QAAA,OAAA,SAAA,KAAI;;AAG1B,cAAM,cAAc,KAAK,oBAAoB,QAAQ,aAAa;AAClE,cAAM,aAAa,KAAK,kBAAkB,aAAa,MAAM;AAE7D,YAAI,YAAY;AACZ,qBAAW,SAAS,KAAK;YACrB,MAAM;YACN,YAAY,KAAK,cAAc,OAAO;YACtC,KAAK,QAAQ,IAAI,YAAW;YAC5B;YACA,UAAU,CAAA;YACV,YAAY,KAAK,oBAAoB,OAAO;WAC/C;;MAET;MACA,eAAe,CAAC,SAAS,SAAS,UAAS;AACvC,cAAM,OAAiC;UACnC;UACA;;AAGJ,cAAM,cAAc,KAAK,oBAAoB,QAAQ,aAAa;AAClE,cAAM,aAAa,KAAK,kBAAkB,aAAa,MAAM;AAE7D,YAAI,YAAY;AACZ,qBAAW,SAAS,KAAK;YACrB,MAAM;YACN,YAAY,KAAK,cAAc,OAAO;YACtC,KAAK,QAAQ,IAAI,YAAW;YAC5B;YACA,UAAU,CAAA;YACV,YAAY,KAAK,oBAAoB,OAAO;WAC/C;;MAET;MACA,aAAa,CAAC,SAAS,QAAQ,UAAU,SAAQ;AAC7C,cAAM,OAAgC;UAClC;UACA;UACA;;AAGJ,cAAM,cAAc,KAAK,oBAAoB,QAAQ,aAAa;AAClE,cAAM,aAAa,KAAK,kBAAkB,aAAa,MAAM;AAE7D,YAAI,YAAY;AACZ,qBAAW,SAAS,KAAK;YACrB,MAAM;YACN,YAAY,KAAK,cAAc,OAAO;YACtC,KAAK,QAAQ,IAAI,YAAW;YAC5B;YACA,UAAU,CAAA;YACV,YAAY,KAAK,oBAAoB,OAAO;WAC/C;;MAET;QAEJ,KAAA,MAAM,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;AAG3B,WAAO;EACX;EAEQ,kBAAkB,OAAe,MAAyB;AAC9D,QAAI,KAAK,eAAe,OAAO;AAC3B,aAAO;;AAGX,eAAW,SAAS,KAAK,UAAU;AAC/B,YAAM,YAAY,KAAK,kBAAkB,OAAO,KAAK;AACrD,UAAI,WAAW;AACX,eAAO;;;AAIf,WAAO;EACX;EAEQ,cAAc,SAAmC;;AACrD,YAAO,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,gBAAU,QAAA,OAAA,SAAA,KAAI,CAAA;EAClC;EAEQ,oBAAoB,SAAmC;;AAC3D,QAAI,CAAC,SAAS;AACV,aAAO,KAAK;;AAEhB,UAAM,SAAQ,MAAA,KAAA,QAAQ,WAAW,KAAK,CAAC,MAAM,EAAE,SAAS,KAAK,kBAAkB,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,WAAK,QAAA,OAAA,SAAA,KAAI,KAAK;AAChG,WAAO;EACX;EAEQ,YAAY,MAAyB;AACzC,SAAK,aAAa,KAAK,WAAW,OAAO,CAAC,MAAM,EAAE,SAAS,KAAK,kBAAkB;AAClF,SAAK,aAAa;AAElB,eAAW,SAAS,KAAK,UAAU;AAC/B,WAAK,YAAY,KAAK;;EAE9B;;AAGG,IAAM,+BAA+B,CAAC,WAA0B,IAAI,uBAAuB,MAAM;;;AC/KlG,IAAO,uBAAP,cAAoC,qBAGzC;EACG,YAAY,QAAwB;AAChC,UAAM,eAAe,MAAM;EAC/B;EAEA,gBAAgB,OAAmC;AAC/C,UAAM,eAAe,6BAA6B,KAAK,UAAS,CAAE,EAAE,gBAAgB,KAAK,EAAE;AAE3F,WAAO;MACH,MAAM,KAAK,UAAU,YAAY;;EAEzC;;AAGG,IAAM,6BAA6B,CAAC,WAA0B,IAAI,qBAAqB,MAAM;;;ACnB9F,IAAgB,4BAAhB,MAAyC;EAC3C,YAAoB,eAA0C,QAA0B;AAApE,SAAA,gBAAA;AAA0C,SAAA,SAAA;EAA6B;EAIjF,iBAAc;AACpB,QAAI,KAAK,QAAQ;AACb,aAAO,KAAK;;AAGhB,WAAO,KAAK;EAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVE,IAAO,4BAAP,cAAyC,0BAG9C;EACG,YAAY,QAA6B;AACrC,UAAM,oBAAoB,MAAM;EACpC;EAEM,qBAAqB,OAAsC;;AAC7D,aAAO,MAAM,KAAK,6BAA6B,MAAM,QAAQ,OAAO,KAAK;IAC7E,CAAC;;EAEa,6BACV,MACA,OAAsC;;;;;;AAEtC,YAAM,eAAe,MAAM,OAAM,eAAc,KAAA,IAAA,EAAG,WAC9C,MACA,MAAM,SACN;QACI,sBAAsB,CAAO,YAAWC,WAAA,MAAA,QAAA,QAAA,aAAA;QAAE,CAAC;QAC3C,0BAA0B,CAAO,SAAS,cAAc,iBAAiB,eAAcA,WAAA,MAAA,QAAA,QAAA,aAAA;;AACnF,gBAAM,gBAAgB,QAAQ;AAE9B,cAAI,eAAe;AACf,kBAAM,mBAAmB,MAAM,4BACzB,MAAC,MAAM,MAAM,yBAAyB,cAAc,UAAU,GAAG,qBAAe,QAAA,OAAA,SAAA,KAAI,KACpF;AAGN,kBAAM,aAAa,MAAM,KAAK,6BAA6B,kBAAkB,KAAK,GAAG;AAGrF,gBAAI,MAAM,+BAA+B,MAAM;AAC3C,sBAAQ,aAAa,SAAS;mBAC3B;AACH,sBAAQ,aAAa,SAAS;;AAIlC,oBAAQ,aAAa,aAAa,0BAA0B,GAAG;;QAEvE,CAAC;QACD,6BAA6B,CAAO,YAAWA,WAAA,MAAA,QAAA,QAAA,aAAA;QAE/C,CAAC;QACD,oBAAoB,CAAO,SAAS,SAAS,UAASA,WAAA,MAAA,QAAA,QAAA,aAAA;AAElD,gBAAM,cAAc,MAAM,qBACpB,MAAM,MAAM,mBAAmB,SAAS,KAAK,IAC7C;AAGN,cAAI,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,WAAW;AAExB,oBAAQ,aAAa,YAAY,SAAS;qBACnC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,UAAU;AAE9B,oBAAQ,aAAa,oBAAoB,iBAAiB,cAAc,YAAY,QAAQ;;QAEpG,CAAC;QACD,kBAAkB,CAAO,SAAS,QAAQ,UAAU,SAAQA,WAAA,MAAA,QAAA,QAAA,aAAA;AACxD,cAAI,MAAM,kBAAkB;AACxB,kBAAM,YAAY,MAAM,MAAM,iBAAiB,QAAQ,UAAU,IAAI;AAGrE,gBAAI,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,UAAU;AAErB,sBAAQ,aAAa,UAAU,QAAQ;uBAChC,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,SAAS;AAE3B,sBAAQ,aAAa,QAAQ,UAAU,OAAO;;;QAG1D,CAAC;UAEL,KAAA,MAAM,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;AAG3B,aAAO;QACH,oBAAoB,aAAa;QACjC,qBAAqB,aAAa;QAClC,MAAM,aAAa;;;;;AAKxB,IAAM,kCAAkC,CAAC,WAAkC,IAAI,0BAA0B,MAAM;;;ACtFhH,IAAO,gCAAP,MAAoC;EAIxC,YAES,UAAgB;AAAhB,SAAA,WAAA;AALD,SAAA,cAAiC,CAAA;AACxB,SAAA,uBAA+B;EAK5C;;;;;EAMJ,gBAAgB,OAAa;AAC3B,SAAK,YAAY,KACf,IAAIC,YAAW,gBAAgB,KAAK,CAAC;AAEvC,WAAO;EACT;;;;;EAMA,QAAQ,KAAW;AACjB,SAAK,YAAY,KACf,IAAIA,YAAW,eAAe,OAAO,IAAI,SAAQ,CAAE,CAAC;AAGtD,WAAO;EACT;;;;;;;;EASA,kBAAkB,GAAW,GAAW,OAAe,QAAc;AACnE,SAAK,YAAY,KACf,IAAIA,YAAW,eAAe,QAAQ,CAAC,GAAG,GAAG,OAAO,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC;AAExE,WAAO;EACT;;;;;;;EAQA,mBAAmB,GAAW,GAAW,GAAS;AAChD,SAAK,YAAY,MAAM;AAEvB,SAAK,YAAY,KAAK,IAAIA,YAAW,eAAe,QAAQ,YAAY,CAAC;AACzE,SAAK,YAAY,KAAK,IAAIA,YAAW,eAAe,QAAQ,EAAE,SAAQ,CAAE,CAAC;AACzE,SAAK,YAAY,KAAK,IAAIA,YAAW,eAAe,QAAQ,EAAE,SAAQ,CAAE,CAAC;AACzE,SAAK,YAAY,KAAK,IAAIA,YAAW,eAAe,QAAQ,EAAE,SAAQ,CAAE,CAAC;AAEzE,WAAO;EACT;;;;;EAMA,oBAAoB,cAA0B;AAC5C,SAAK,YAAY,KACf,IAAIA,YAAW,eAAe,QAAQ,KAAK,oBAAoB,CAAC;AAGlE,QAAI,cAAc;AAChB,WAAK,WAAW,YAAY;;AAG9B,WAAO;EACT;;;;;EAMA,YAAY,SAAqB;AAC/B,SAAK,YAAY,KAAK,IAAIA,YAAW,eAAe,OAAO,OAAO,CAAC;AACnE,WAAO;EACT;;;;;EAMA,gBAAgB,aAA6B;AAC3C,SAAK,YAAY,KACf,IAAIA,YAAW,eACb,YACA,gBAAgB,aAAa,SAAS,OAAO,CAC9C;AAEH,WAAO;EACT;;;;;EAMA,YAAY,SAAe;AACzB,SAAK,YAAY,KACf,IAAIA,YAAW,eAAe,KAAK,QAAQ,SAAQ,CAAE,CAAC;AAExD,WAAO;EACT;;;;;;;EAQA,WAAW,QAAmB;AAC5B,SAAK,YAAY,KACf,IAAIA,YAAW,eAAe,MAAM,MAAM,CAAC;AAE7C,WAAO;EACT;;;;;EAMA,WAAW,QAAc;AACvB,SAAK,YAAY,KACf,IAAIA,YAAW,eAAe,KAAK,OAAO,SAAQ,CAAE,CAAC;AAEvD,WAAO;EACT;;;;;EAMA,UAAU,OAAa;AACrB,SAAK,YAAY,KAAK,IAAIA,YAAW,eAAe,KAAK,MAAM,SAAQ,CAAE,CAAC;AAC1E,WAAO;EACT;;;;EAKA,YAAS;AACP,WAAO,KAAK;EACd;;;;EAKA,iBAAc;AACZ,QAAI,QAAgB;AACpB,SAAK,YAAY,QAAQ,CAAAC,YAAS;AAChC,UAAI,MAAM,QAAQ,GAAG,IAAI,IAAI;AAC3B,gBAAQ,QAAQ,MAAMA,QAAO,SAAQ;aAChC;AACL,gBAAQ,QAAQ,MAAMA,QAAO,SAAQ;;IAEzC,CAAC;AAED,WAAO;EACT;;;;EAKA,SAAM;AACJ,WAAO,KAAK,WAAW,KAAK,eAAc;EAC5C;;;;ACjLI,SAAU,kBAAkB,KAAW;AACzC,SAAO,IAAI,8BAA8B,GAAG;AAChD;",
  "names": ["encode", "parse", "toString", "filter", "Parameters", "prototype", "descriptors", "filter", "hasOwnProperty", "filter", "prototype", "toString", "encode", "isFormData", "isFileList", "transitional", "filter", "self", "prototype", "validateStatus", "merge", "transitional", "signal", "encode", "done", "res", "validators", "transitional", "Axios", "AxiosError", "CanceledError", "isCancel", "CancelToken", "VERSION", "all", "isAxiosError", "spread", "toFormData", "AxiosHeaders", "HttpStatusCode", "mergeConfig", "Filters", "Parameters", "Parameters", "ElementType", "Parameters", "Parameters", "Parameters", "Parameters", "Parameters", "Parameters", "Parameters", "Parameters", "sdkInfo", "sdkInfo", "resolvers", "resolvers", "toCamelCase", "_a", "_a", "__awaiter", "Parameters", "filter"]
}
