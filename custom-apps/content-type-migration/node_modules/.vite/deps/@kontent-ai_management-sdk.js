import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/mime/Mime.js
var require_Mime = __commonJS({
  "node_modules/mime/Mime.js"(exports, module) {
    "use strict";
    function Mime() {
      this._types = /* @__PURE__ */ Object.create(null);
      this._extensions = /* @__PURE__ */ Object.create(null);
      for (let i = 0; i < arguments.length; i++) {
        this.define(arguments[i]);
      }
      this.define = this.define.bind(this);
      this.getType = this.getType.bind(this);
      this.getExtension = this.getExtension.bind(this);
    }
    Mime.prototype.define = function(typeMap, force) {
      for (let type in typeMap) {
        let extensions = typeMap[type].map(function(t) {
          return t.toLowerCase();
        });
        type = type.toLowerCase();
        for (let i = 0; i < extensions.length; i++) {
          const ext = extensions[i];
          if (ext[0] === "*") {
            continue;
          }
          if (!force && ext in this._types) {
            throw new Error(
              'Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".'
            );
          }
          this._types[ext] = type;
        }
        if (force || !this._extensions[type]) {
          const ext = extensions[0];
          this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
        }
      }
    };
    Mime.prototype.getType = function(path) {
      path = String(path);
      let last = path.replace(/^.*[/\\]/, "").toLowerCase();
      let ext = last.replace(/^.*\./, "").toLowerCase();
      let hasPath = last.length < path.length;
      let hasDot = ext.length < last.length - 1;
      return (hasDot || !hasPath) && this._types[ext] || null;
    };
    Mime.prototype.getExtension = function(type) {
      type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
      return type && this._extensions[type.toLowerCase()] || null;
    };
    module.exports = Mime;
  }
});

// node_modules/mime/types/standard.js
var require_standard = __commonJS({
  "node_modules/mime/types/standard.js"(exports, module) {
    module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
  }
});

// node_modules/mime/types/other.js
var require_other = __commonJS({
  "node_modules/mime/types/other.js"(exports, module) {
    module.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
  }
});

// node_modules/mime/index.js
var require_mime = __commonJS({
  "node_modules/mime/index.js"(exports, module) {
    "use strict";
    var Mime = require_Mime();
    module.exports = new Mime(require_standard(), require_other());
  }
});

// node_modules/@kontent-ai/management-sdk/node_modules/@kontent-ai/core-sdk/dist/es6/helpers/url.helper.js
var UrlHelper = class {
  /**
  * Adds query parameters to given url
  * @param url Url to which options will be added
  * @param options Query parameters to add
  */
  addOptionsToUrl(url, options) {
    if (options) {
      options.forEach((filter2) => {
        if (url.indexOf("?") > -1) {
          url += "&";
        } else {
          url += "?";
        }
        url += filter2.getParam();
      });
    }
    return url;
  }
};
var urlHelper = new UrlHelper();

// node_modules/@kontent-ai/management-sdk/node_modules/@kontent-ai/core-sdk/dist/es6/helpers/header.helper.js
var HeaderHelper = class {
  constructor() {
    this.sdkVersionHeader = "X-KC-SDKID";
  }
  /**
  * Header identifying SDK type & version for internal purposes of Kontent.ai
  */
  getSdkIdHeader(info) {
    return {
      header: this.sdkVersionHeader,
      value: `${info.host};${info.name};${info.version}`
    };
  }
};
var headerHelper = new HeaderHelper();

// node_modules/@kontent-ai/management-sdk/node_modules/@kontent-ai/core-sdk/dist/es6/helpers/headers-helper.js
function extractHeadersFromAxiosResponse(response) {
  const headers = [];
  for (const headerKey of Object.keys(response.headers)) {
    headers.push({
      header: headerKey,
      value: response.headers[headerKey]
    });
  }
  return headers;
}

// node_modules/@kontent-ai/management-sdk/node_modules/@kontent-ai/core-sdk/dist/es6/helpers/retry-helper.js
var RetryHelper = class {
  constructor() {
    this.requestCancelledMessagePrefix = "Request cancelled";
    this.retryAfterHeaderName = "Retry-After";
    this.defaultRetryStatusCodes = [408, 429, 500, 502, 503, 504];
    this.defaultRetryStrategy = {
      addJitter: true,
      deltaBackoffMs: 1e3,
      maxAttempts: 5,
      canRetryError: (error) => this.canRetryErrorDefault(error)
    };
  }
  getRetryErrorResult(data) {
    var _a, _b, _c;
    if (data.error && data.error.message) {
      if (data.error.message.startsWith(this.requestCancelledMessagePrefix)) {
        return {
          canRetry: false,
          retryInMs: 0,
          maxRetries: 0
        };
      }
    }
    const canRetryError = data.retryStrategy.canRetryError ? data.retryStrategy.canRetryError(data.error) : this.defaultRetryStrategy.canRetryError(data.error);
    if (!canRetryError) {
      return {
        canRetry: false,
        retryInMs: 0,
        maxRetries: 0
      };
    }
    const maxRetries = (_a = data.retryStrategy.maxAttempts) !== null && _a !== void 0 ? _a : this.defaultRetryStrategy.maxAttempts;
    const maxRetriesReached = data.retryAttempt >= maxRetries;
    if (maxRetriesReached) {
      return {
        canRetry: false,
        retryInMs: 0,
        maxRetries
      };
    }
    const retryResult = this.tryGetRetryAfterInMsFromError(data.error);
    if (retryResult) {
      return {
        canRetry: true,
        retryInMs: retryResult,
        maxRetries
      };
    }
    const waitTimeMs = this.getNextWaitTimeMs((_b = data.retryStrategy.addJitter) !== null && _b !== void 0 ? _b : this.defaultRetryStrategy.addJitter, (_c = data.retryStrategy.deltaBackoffMs) !== null && _c !== void 0 ? _c : this.defaultRetryStrategy.deltaBackoffMs, data.retryAttempt);
    return {
      canRetry: true,
      retryInMs: waitTimeMs,
      maxRetries
    };
  }
  getRetryStrategyFromStrategyOptions(retryOptions) {
    if (!retryOptions) {
      return this.defaultRetryStrategy;
    }
    return retryOptions;
  }
  canRetryInTime(startTime, maxCumulativeWaitTimeMs) {
    const start = startTime.getTime();
    const now = (/* @__PURE__ */ new Date()).getTime();
    const differenceInMs = now - start;
    return {
      canRetry: differenceInMs < maxCumulativeWaitTimeMs,
      differenceInMs
    };
  }
  getNextWaitTimeMs(addJitter, deltaBackoffMs, retryAttempts) {
    if (!addJitter) {
      return deltaBackoffMs * Math.pow(2, retryAttempts);
    }
    const from = 0.8 * deltaBackoffMs;
    const to = 1.2 * deltaBackoffMs * Math.pow(2, retryAttempts);
    return this.randomNumberFromInterval(from, to);
  }
  canRetryErrorDefault(error) {
    const axiosError = this.tryGetAxiosError(error);
    if (!axiosError) {
      return false;
    }
    const statusCode = this.getStatusCodeFromError(error);
    const canRetryStatusCode = this.canRetryStatusCode(statusCode, this.defaultRetryStatusCodes);
    if (canRetryStatusCode) {
      return true;
    }
    return false;
  }
  tryGetRetryAfterInMsFromError(error) {
    const axiosError = this.tryGetAxiosError(error);
    if (!axiosError || !axiosError.response) {
      return void 0;
    }
    const headers = extractHeadersFromAxiosResponse(axiosError.response);
    const retryValueHeader = headers.find((m) => m.header.toLowerCase() === this.retryAfterHeaderName.toLowerCase());
    if (!retryValueHeader) {
      return void 0;
    }
    const retryInSeconds = +retryValueHeader.value;
    return retryInSeconds * 1e3;
  }
  canRetryStatusCode(statusCode, useRetryForResponseCodes) {
    return useRetryForResponseCodes.includes(statusCode);
  }
  getStatusCodeFromError(error) {
    const axiosError = this.tryGetAxiosError(error);
    if (!axiosError || !axiosError.response) {
      return 0;
    }
    return axiosError.response.status;
  }
  tryGetAxiosError(error) {
    if (!error) {
      return void 0;
    }
    if (error.isAxiosError) {
      return error;
    }
    const originalError = error.originalError;
    if (originalError && originalError.isAxiosError) {
      return originalError;
    }
    return void 0;
  }
  /**
   * min and max included
   */
  randomNumberFromInterval(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }
};
var retryHelper = new RetryHelper();

// node_modules/@kontent-ai/management-sdk/node_modules/@kontent-ai/core-sdk/dist/es6/models/parameters.js
var Parameters;
(function(Parameters2) {
  class CustomParameter {
    /**
     * Custom parameter
     * @constructor
     * @param {string} name - Name of the parameter
     * @param {string} value - Value of the parameter
     */
    constructor(name, value) {
      this.name = name;
      this.value = value;
      if (!name) {
        throw Error(`Name of the custom parameter is not specified`);
      }
    }
    getParam() {
      return this.name;
    }
    getParamValue() {
      return this.value;
    }
  }
  Parameters2.CustomParameter = CustomParameter;
})(Parameters || (Parameters = {}));

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i = thing.length;
  if (!isNumber(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var ALPHA = "abcdefghijklmnopqrstuvwxyz";
var DIGIT = "0123456789";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/null.js
var null_default = null;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/platform/browser/index.js
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv
});
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var hasStandardBrowserEnv = ((product) => {
  return hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0;
})(typeof navigator !== "undefined" && navigator.product);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/platform/index.js
var platform_default = {
  ...utils_exports,
  ...browser_default
};

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__")
      return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/cookies.js
var cookies_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path) && cookie.push("path=" + path);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    function resolveURL(url) {
      let href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin(requestURL) {
      const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  }()
);

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e
    };
    data[isDownloadStream ? "download" : "upload"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
    let { responseType, withXSRFToken } = config;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener("abort", onCanceled);
      }
    }
    let contentType;
    if (utils_default.isFormData(requestData)) {
      if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false);
      } else if ((contentType = requestHeaders.getContentType()) !== false) {
        const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
        requestHeaders.setContentType([type || "multipart/form-data", ...tokens].join("; "));
      }
    }
    let request = new XMLHttpRequest();
    if (config.auth) {
      const username = config.auth.username || "";
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
      requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = config.transitional || transitional_default;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    if (platform_default.hasStandardBrowserEnv) {
      withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));
      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(fullPath)) {
        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === "function") {
      request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
    }
    if (typeof config.onUploadProgress === "function" && request.upload) {
      request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError_default(`Unknown adapter '${id}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id || "#" + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(
        `There is no suitable adapter to dispatch the request ` + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/env/data.js
var VERSION = "1.6.7";

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;
        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        if (!err.stack) {
          err.stack = stack;
        } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
          err.stack += "\n" + stack;
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class _CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new _CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/@kontent-ai/management-sdk/node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  getAdapter,
  mergeConfig: mergeConfig2
} = axios_default;

// node_modules/@kontent-ai/management-sdk/node_modules/@kontent-ai/core-sdk/dist/es6/http/http.debugger.js
var HttpDebugger = class {
  /*
  Called when http request is started
  */
  debugStartHttpRequest() {
  }
  /*
  Called when http request is resolved
  */
  debugSuccessHttpRequest() {
  }
  /*
  Called when http request is being retried
  */
  debugRetryHttpRequest() {
  }
};
var httpDebugger = new HttpDebugger();

// node_modules/@kontent-ai/management-sdk/node_modules/@kontent-ai/core-sdk/dist/es6/http/http.functions.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function getWithRetryAsync(instance, call, functionsConfig, options) {
  var _a;
  return __awaiter(this, void 0, void 0, function* () {
    const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;
    return yield runWithRetryAsync({
      retryAttempt: 0,
      url: call.url,
      retryStrategy: retryStrategyOptions,
      functionsConfig,
      call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {
        var _b, _c;
        httpDebugger.debugStartHttpRequest();
        const axiosResponse = yield instance.get(call.url, {
          headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),
          responseType: options === null || options === void 0 ? void 0 : options.responseType,
          cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token
        });
        const response = {
          data: axiosResponse.data,
          rawResponse: axiosResponse,
          headers: extractHeadersFromAxiosResponse(axiosResponse),
          status: axiosResponse.status,
          retryStrategy: {
            options: retryStrategyOptions,
            retryAttempts: retryAttempt
          }
        };
        httpDebugger.debugSuccessHttpRequest();
        return response;
      })
    });
  });
}
function postWithRetryAsync(instance, call, functionsConfig, options) {
  var _a;
  return __awaiter(this, void 0, void 0, function* () {
    const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;
    return yield runWithRetryAsync({
      retryAttempt: 0,
      url: call.url,
      retryStrategy: retryStrategyOptions,
      functionsConfig,
      call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {
        var _b, _c;
        httpDebugger.debugStartHttpRequest();
        const axiosResponse = yield instance.post(call.url, call.body, {
          headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),
          responseType: options === null || options === void 0 ? void 0 : options.responseType,
          // required for uploading large files
          // https://github.com/axios/axios/issues/1362
          maxContentLength: "Infinity",
          maxBodyLength: "Infinity",
          cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token
        });
        const response = {
          data: axiosResponse.data,
          rawResponse: axiosResponse,
          headers: extractHeadersFromAxiosResponse(axiosResponse),
          status: axiosResponse.status,
          retryStrategy: {
            options: retryStrategyOptions,
            retryAttempts: retryAttempt
          }
        };
        httpDebugger.debugSuccessHttpRequest();
        return response;
      })
    });
  });
}
function putWithRetryAsync(instance, call, functionsConfig, options) {
  var _a;
  return __awaiter(this, void 0, void 0, function* () {
    const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;
    return yield runWithRetryAsync({
      retryAttempt: 0,
      url: call.url,
      retryStrategy: retryStrategyOptions,
      functionsConfig,
      call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {
        var _b, _c;
        httpDebugger.debugStartHttpRequest();
        const axiosResponse = yield instance.put(call.url, call.body, {
          headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),
          responseType: options === null || options === void 0 ? void 0 : options.responseType,
          // required for uploading large files
          // https://github.com/axios/axios/issues/1362
          maxContentLength: "Infinity",
          maxBodyLength: "Infinity",
          cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token
        });
        const response = {
          data: axiosResponse.data,
          rawResponse: axiosResponse,
          headers: extractHeadersFromAxiosResponse(axiosResponse),
          status: axiosResponse.status,
          retryStrategy: {
            options: retryStrategyOptions,
            retryAttempts: retryAttempt
          }
        };
        httpDebugger.debugSuccessHttpRequest();
        return response;
      })
    });
  });
}
function patchWithRetryAsync(instance, call, functionsConfig, options) {
  var _a;
  return __awaiter(this, void 0, void 0, function* () {
    const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;
    return yield runWithRetryAsync({
      retryAttempt: 0,
      url: call.url,
      retryStrategy: retryStrategyOptions,
      functionsConfig,
      call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {
        var _b, _c;
        httpDebugger.debugStartHttpRequest();
        const axiosResponse = yield instance.patch(call.url, call.body, {
          headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),
          responseType: options === null || options === void 0 ? void 0 : options.responseType,
          // required for uploading large files
          // https://github.com/axios/axios/issues/1362
          maxContentLength: "Infinity",
          maxBodyLength: "Infinity",
          cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token
        });
        const response = {
          data: axiosResponse.data,
          rawResponse: axiosResponse,
          headers: extractHeadersFromAxiosResponse(axiosResponse),
          status: axiosResponse.status,
          retryStrategy: {
            options: retryStrategyOptions,
            retryAttempts: retryAttempt
          }
        };
        httpDebugger.debugSuccessHttpRequest();
        return response;
      })
    });
  });
}
function deleteWithRetryAsync(instance, call, functionsConfig, options) {
  var _a;
  return __awaiter(this, void 0, void 0, function* () {
    const retryStrategyOptions = (_a = options === null || options === void 0 ? void 0 : options.retryStrategy) !== null && _a !== void 0 ? _a : retryHelper.defaultRetryStrategy;
    return yield runWithRetryAsync({
      retryAttempt: 0,
      url: call.url,
      retryStrategy: retryStrategyOptions,
      functionsConfig,
      call: (retryAttempt) => __awaiter(this, void 0, void 0, function* () {
        var _b, _c;
        httpDebugger.debugStartHttpRequest();
        const axiosResponse = yield instance.delete(call.url, {
          headers: getHeadersJson((_b = options === null || options === void 0 ? void 0 : options.headers) !== null && _b !== void 0 ? _b : [], false),
          responseType: options === null || options === void 0 ? void 0 : options.responseType,
          // required for uploading large files
          // https://github.com/axios/axios/issues/1362
          maxContentLength: "Infinity",
          maxBodyLength: "Infinity",
          cancelToken: (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c.token
        });
        const response = {
          data: axiosResponse.data,
          rawResponse: axiosResponse,
          headers: extractHeadersFromAxiosResponse(axiosResponse),
          status: axiosResponse.status,
          retryStrategy: {
            options: retryStrategyOptions,
            retryAttempts: retryAttempt
          }
        };
        httpDebugger.debugSuccessHttpRequest();
        return response;
      })
    });
  });
}
function createCancelToken() {
  let canceler;
  const token = new axios_default.CancelToken((c) => {
    canceler = c;
  });
  return {
    cancel: (cancelMessage) => canceler(`${retryHelper.requestCancelledMessagePrefix}: ${cancelMessage !== null && cancelMessage !== void 0 ? cancelMessage : "User cancel"}`),
    token
  };
}
function runWithRetryAsync(data) {
  return __awaiter(this, void 0, void 0, function* () {
    try {
      return yield data.call(data.retryAttempt);
    } catch (error) {
      const retryResult = retryHelper.getRetryErrorResult({
        error,
        retryAttempt: data.retryAttempt,
        retryStrategy: data.retryStrategy
      });
      if (retryResult.canRetry) {
        httpDebugger.debugRetryHttpRequest();
        yield new Promise((resolve) => setTimeout(resolve, retryResult.retryInMs));
        if (data.functionsConfig.logErrorsToConsole) {
          console.warn(`Retry attempt '${data.retryAttempt + 1}' from a maximum of '${retryResult.maxRetries}' retries. Request url: '${data.url}'`);
        }
        return yield runWithRetryAsync({
          call: data.call,
          retryStrategy: data.retryStrategy,
          retryAttempt: data.retryAttempt + 1,
          url: data.url,
          functionsConfig: data.functionsConfig
        });
      }
      if (data.functionsConfig.logErrorsToConsole) {
        console.error(`Executing '${data.url}' failed. Request was retried '${data.retryAttempt}' times. `, error);
      }
      throw error;
    }
  });
}
function getHeadersJson(headers, addContentTypeHeader) {
  const headerJson = {};
  headers.forEach((header) => {
    headerJson[header.header] = header.value;
  });
  if (addContentTypeHeader) {
    const contentTypeHeader = headers.find((m) => m.header.toLowerCase() === "Content-Type".toLowerCase());
    if (!contentTypeHeader) {
      headerJson["Content-Type"] = "application/json";
    }
  }
  return headerJson;
}

// node_modules/@kontent-ai/management-sdk/node_modules/@kontent-ai/core-sdk/dist/es6/http/http.service.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var HttpService = class {
  constructor(opts) {
    this.opts = opts;
    this.axiosInstance = axios_default.create(opts === null || opts === void 0 ? void 0 : opts.axiosRequestConfig);
    this.functionsConfig = this.getFunctionsConfig();
  }
  getAsync(call, options) {
    return __awaiter2(this, void 0, void 0, function* () {
      return yield getWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);
    });
  }
  postAsync(call, options) {
    return __awaiter2(this, void 0, void 0, function* () {
      return yield postWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);
    });
  }
  putAsync(call, options) {
    return __awaiter2(this, void 0, void 0, function* () {
      return yield putWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);
    });
  }
  patchAsync(call, options) {
    return __awaiter2(this, void 0, void 0, function* () {
      return yield patchWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);
    });
  }
  deleteAsync(call, options) {
    return __awaiter2(this, void 0, void 0, function* () {
      return yield deleteWithRetryAsync(this.axiosInstance, call, this.functionsConfig, options);
    });
  }
  createCancelToken() {
    return createCancelToken();
  }
  getFunctionsConfig() {
    var _a, _b;
    return {
      logErrorsToConsole: (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.logErrorsToConsole) !== null && _b !== void 0 ? _b : true
    };
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/models/content-management-api-endpoints.js
var ContentManagementApiEndpoints = class {
  constructor(data) {
    this.projectsPath = "projects";
    this.subscriptionsPath = "subscriptions";
    this.environmentId = data.environmentId;
    this.subscriptionId = data.subscriptionId;
  }
  changeWorkflowStepOfLanguageVariant(itemIdentifier, languageIdentifier, workflowIdentifier) {
    return `${this.getEnvironmentsPath()}/items/${itemIdentifier.getParamValue()}/variants/${languageIdentifier.getParamValue()}/workflow/${workflowIdentifier.getParamValue()}`;
  }
  publishLaguageVariant(itemIdentifier, languageIdentifier) {
    return `${this.getEnvironmentsPath()}/items/${itemIdentifier.getParamValue()}/variants/${languageIdentifier.getParamValue()}/publish`;
  }
  createNewVersionOfALanguageVariant(itemIdentifier, languageIdentifier) {
    return `${this.getEnvironmentsPath()}/items/${itemIdentifier.getParamValue()}/variants/${languageIdentifier.getParamValue()}/new-version`;
  }
  unpublishLanguageVariant(itemIdentifier, languageIdentifier) {
    return `${this.getEnvironmentsPath()}/items/${itemIdentifier.getParamValue()}/variants/${languageIdentifier.getParamValue()}/unpublish-and-archive`;
  }
  cancelScheduledPublishingOfLanguageVariant(itemIdentifier, languageIdentifier) {
    return `${this.getEnvironmentsPath()}/items/${itemIdentifier.getParamValue()}/variants/${languageIdentifier.getParamValue()}/cancel-scheduled-publish`;
  }
  cancelScheduledUnpublishingOfLanguageVariant(itemIdentifier, languageIdentifier) {
    return `${this.getEnvironmentsPath()}/items/${itemIdentifier.getParamValue()}/variants/${languageIdentifier.getParamValue()}/cancel-scheduled-unpublish`;
  }
  listWorkflowSteps() {
    return `${this.getEnvironmentsPath()}/workflow`;
  }
  listWorkflows() {
    return `${this.getEnvironmentsPath()}/workflows`;
  }
  addWorkflow() {
    return `${this.getEnvironmentsPath()}/workflows`;
  }
  updateWorkflow(workflowIdentifier) {
    return `${this.getEnvironmentsPath()}/workflows/${workflowIdentifier.getParamValue()}`;
  }
  deleteWorkflow(identifier) {
    return `${this.getEnvironmentsPath()}/workflows/${identifier.getParamValue()}`;
  }
  changeWorkflowOfLanguageVariant(itemIdentifier, languageIdentifier) {
    return `${this.getEnvironmentsPath()}/items/${itemIdentifier.getParamValue()}/variants/${languageIdentifier.getParamValue()}/change-workflow`;
  }
  listContentTypeSnippets() {
    return `${this.getEnvironmentsPath()}/snippets`;
  }
  viewContentTypeSnippet(identifier) {
    return `${this.getEnvironmentsPath()}/snippets/${identifier.getParamValue()}`;
  }
  addContentTypeSnippet() {
    return `${this.getEnvironmentsPath()}/snippets`;
  }
  deleteContentTypeSnippet(identifier) {
    return `${this.getEnvironmentsPath()}/snippets/${identifier.getParamValue()}`;
  }
  modifyContentTypeSnippet(identifier) {
    return `${this.getEnvironmentsPath()}/snippets/${identifier.getParamValue()}`;
  }
  startProjectValidation() {
    return `${this.getEnvironmentsPath()}/validate-async`;
  }
  checkEnvironmentValidation(identifier) {
    return `${this.getEnvironmentsPath()}/validate-async/tasks/${identifier.getParamValue()}`;
  }
  listEnvironmentIssues(identifier) {
    return `${this.getEnvironmentsPath()}/validate-async/tasks/${identifier.getParamValue()}/issues`;
  }
  environmentInformation() {
    return `${this.getEnvironmentsPath()}`;
  }
  listContentTypes() {
    return `${this.getEnvironmentsPath()}/types`;
  }
  addContentType() {
    return `${this.getEnvironmentsPath()}/types`;
  }
  deleteContentType(identifier) {
    return `${this.getEnvironmentsPath()}/types/${identifier.getParamValue()}`;
  }
  viewContentType(identifier) {
    return `${this.getEnvironmentsPath()}/types/${identifier.getParamValue()}`;
  }
  modifyContentType(identifier) {
    return `${this.getEnvironmentsPath()}/types/${identifier.getParamValue()}`;
  }
  addTaxonomy() {
    return `${this.getEnvironmentsPath()}/taxonomies`;
  }
  modifyTaxonomy(identifier) {
    return `${this.getEnvironmentsPath()}/taxonomies/${identifier.getParamValue()}`;
  }
  deleteTaxonomy(identifier) {
    return `${this.getEnvironmentsPath()}/taxonomies/${identifier.getParamValue()}`;
  }
  listTaxonomies() {
    return `${this.getEnvironmentsPath()}/taxonomies`;
  }
  getTaxonomy(identifier) {
    return `${this.getEnvironmentsPath()}/taxonomies/${identifier.getParamValue()}`;
  }
  addAsset() {
    return `${this.getEnvironmentsPath()}/assets`;
  }
  deleteAsset(identifier) {
    return `${this.getEnvironmentsPath()}/assets/${identifier.getParamValue()}`;
  }
  upsertAsset(assetIdentifier) {
    return `${this.getEnvironmentsPath()}/assets/${assetIdentifier.getParamValue()}`;
  }
  uploadBinaryFile(filename) {
    return `${this.getEnvironmentsPath()}/files/${filename}`;
  }
  listAssets() {
    return `${this.getEnvironmentsPath()}/assets`;
  }
  viewAsset(identifier) {
    return `${this.getEnvironmentsPath()}/assets/${identifier.getParamValue()}`;
  }
  items() {
    return `${this.getEnvironmentsPath()}/items`;
  }
  viewContentItem(identifier) {
    return `${this.getEnvironmentsPath()}/items/${identifier.getParamValue()}`;
  }
  addContentItem() {
    return `${this.getEnvironmentsPath()}/items`;
  }
  updateContentItem(identifier) {
    return `${this.getEnvironmentsPath()}/items/${identifier.getParamValue()}`;
  }
  upsertContentItem(identifier) {
    return `${this.getEnvironmentsPath()}/items/${identifier.getParamValue()}`;
  }
  deleteContentItem(identifier) {
    return `${this.getEnvironmentsPath()}/items/${identifier.getParamValue()}`;
  }
  listLanguageVariantsOfItem(identifier) {
    return `${this.getEnvironmentsPath()}/items/${identifier.getParamValue()}/variants`;
  }
  listLanguageVariantsOfContentType(identifier) {
    return `${this.getEnvironmentsPath()}/types/${identifier.getParamValue()}/variants`;
  }
  listLanguageVariantsByCollection(identifier) {
    return `${this.getEnvironmentsPath()}/collections/${identifier.getParamValue()}/variants`;
  }
  listLanguageVariantsBySpace(identifier) {
    return `${this.getEnvironmentsPath()}/spaces/${identifier.getParamValue()}/variants`;
  }
  listLanguageVariantsOfContentTypeWithComponents(identifier) {
    return `${this.getEnvironmentsPath()}/types/${identifier.getParamValue()}/components`;
  }
  deleteLanguageVariant(itemIdentifier, langaugeIdentifier) {
    return `${this.getEnvironmentsPath()}/items/${itemIdentifier.getParamValue()}/variants/${langaugeIdentifier.getParamValue()}`;
  }
  viewOrUpsertLanguageVariant(itemIdentifier, langaugeIdentifier) {
    return `${this.getEnvironmentsPath()}/items/${itemIdentifier.getParamValue()}/variants/${langaugeIdentifier.getParamValue()}`;
  }
  viewLanguage(identifier) {
    return `${this.getEnvironmentsPath()}/languages/${identifier.getParamValue()}`;
  }
  addLanguage() {
    return `${this.getEnvironmentsPath()}/languages`;
  }
  modifyLanguage(identifier) {
    return `${this.getEnvironmentsPath()}/languages/${identifier.getParamValue()}`;
  }
  listLanguages() {
    return `${this.getEnvironmentsPath()}/languages`;
  }
  deleteLegacyWebhook(identifier) {
    return `${this.getEnvironmentsPath()}/webhooks/${identifier.getParamValue()}`;
  }
  getLegacyWebhook(identifier) {
    return `${this.getEnvironmentsPath()}/webhooks/${identifier.getParamValue()}`;
  }
  addLegacyWebhook() {
    return `${this.getEnvironmentsPath()}/webhooks`;
  }
  enableLegacyWebhook(identifier) {
    return `${this.getEnvironmentsPath()}/webhooks/${identifier.getParamValue()}/enable`;
  }
  disableLegacyWebhook(identifier) {
    return `${this.getEnvironmentsPath()}/webhooks/${identifier.getParamValue()}/disable`;
  }
  listLegacyWebhooks() {
    return `${this.getEnvironmentsPath()}/webhooks`;
  }
  deleteWebhook(identifier) {
    return `${this.getEnvironmentsPath()}/webhooks-vnext/${identifier.getParamValue()}`;
  }
  getWebhook(identifier) {
    return `${this.getEnvironmentsPath()}/webhooks-vnext/${identifier.getParamValue()}`;
  }
  addWebhook() {
    return `${this.getEnvironmentsPath()}/webhooks-vnext`;
  }
  enableWebhook(identifier) {
    return `${this.getEnvironmentsPath()}/webhooks-vnext/${identifier.getParamValue()}/enable`;
  }
  disableWebhook(identifier) {
    return `${this.getEnvironmentsPath()}/webhooks-vnext/${identifier.getParamValue()}/disable`;
  }
  listWebhooks() {
    return `${this.getEnvironmentsPath()}/webhooks-vnext`;
  }
  listAssetFolders() {
    return `${this.getEnvironmentsPath()}/folders`;
  }
  addAssetFolders() {
    return `${this.getEnvironmentsPath()}/folders`;
  }
  modifyAssetFolders() {
    return `${this.getEnvironmentsPath()}/folders`;
  }
  listCollections() {
    return `${this.getEnvironmentsPath()}/collections`;
  }
  setCollections() {
    return `${this.getEnvironmentsPath()}/collections`;
  }
  listAssetRenditions(identifier) {
    return `${this.getEnvironmentsPath()}/assets/${identifier.getParamValue()}/renditions`;
  }
  addAssetRendition(identifier) {
    return `${this.getEnvironmentsPath()}/assets/${identifier.getParamValue()}/renditions`;
  }
  modifyAssetRendition(assetIdentifier, renditionIdentifier) {
    return `${this.getEnvironmentsPath()}/assets/${assetIdentifier.getParamValue()}/renditions/${renditionIdentifier.getParamValue()}`;
  }
  viewAssetRendition(assetIdentifier, renditionIdentifier) {
    return `${this.getEnvironmentsPath()}/assets/${assetIdentifier.getParamValue()}/renditions/${renditionIdentifier.getParamValue()}`;
  }
  listSubscriptionProjects() {
    return `${this.getSubscriptionPath()}/projects`;
  }
  listSubscriptionUsers() {
    return `${this.getSubscriptionPath()}/users`;
  }
  viewSubscriptionProject(identifier) {
    return `${this.getSubscriptionPath()}/projects/${identifier.getParamValue()}`;
  }
  viewSubscriptionUser(identifier) {
    return `${this.getSubscriptionPath()}/users/${identifier.getParamValue()}`;
  }
  activateUserInAllProjects(identifier) {
    return `${this.getSubscriptionPath()}/users/${identifier.getParamValue()}/activate`;
  }
  deactivateUserInAllProjects(identifier) {
    return `${this.getSubscriptionPath()}/users/${identifier.getParamValue()}/deactivate`;
  }
  listRoles() {
    return `${this.getEnvironmentsPath()}/roles`;
  }
  viewRole(identifier) {
    return `${this.getEnvironmentsPath()}/roles/${identifier.getParamValue()}`;
  }
  getPreviewConfigruation() {
    return `${this.getEnvironmentsPath()}/preview-configuration`;
  }
  modifyPreviewConfigruation() {
    return `${this.getEnvironmentsPath()}/preview-configuration`;
  }
  inviteProjectUser() {
    return `${this.getEnvironmentsPath()}/users`;
  }
  changeProjectUserRoles(identifier) {
    return `${this.getEnvironmentsPath()}/users/${identifier.getParamValue()}/roles`;
  }
  getEnvironmentCloningStatus() {
    return `${this.getEnvironmentsPath()}/environment-cloning-state`;
  }
  deleteEnvironment() {
    return this.getEnvironmentsPath();
  }
  modifyEnvironment() {
    return this.getEnvironmentsPath();
  }
  cloneEnvironment() {
    return `${this.getEnvironmentsPath()}/clone-environment`;
  }
  markEnvironmentAsProduction() {
    return `${this.getEnvironmentsPath()}/mark-environment-as-production`;
  }
  listSpaces() {
    return `${this.getEnvironmentsPath()}/spaces`;
  }
  viewSpace(identifier) {
    return `${this.getEnvironmentsPath()}/spaces/${identifier.getParamValue()}`;
  }
  addSpace() {
    return `${this.getEnvironmentsPath()}/spaces`;
  }
  deleteSpace(identifier) {
    return `${this.getEnvironmentsPath()}/spaces/${identifier.getParamValue()}`;
  }
  modifySpace(identifier) {
    return `${this.getEnvironmentsPath()}/spaces/${identifier.getParamValue()}`;
  }
  getSubscriptionPath() {
    if (!this.subscriptionId) {
      throw Error(`SubscriptionId was not provided in client configuration`);
    }
    return `${this.subscriptionsPath}/${this.subscriptionId}`;
  }
  getEnvironmentsPath() {
    if (!this.environmentId) {
      throw Error(`EnvironmentId was not provided in client configuration`);
    }
    return `${this.projectsPath}/${this.environmentId}`;
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/models/content-items/content-item.models.js
var ContentItemModels;
(function(ContentItemModels2) {
  class ContentItem {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  ContentItemModels2.ContentItem = ContentItem;
})(ContentItemModels || (ContentItemModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/shared/shared-models.js
var SharedModels;
(function(SharedModels2) {
  class Pagination {
    constructor(continuationToken, nextPage) {
      this.continuationToken = continuationToken;
      this.nextPage = nextPage;
    }
  }
  SharedModels2.Pagination = Pagination;
  class ValidationError {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  SharedModels2.ValidationError = ValidationError;
  class ContentManagementBaseKontentError {
    constructor(data) {
      this.validationErrors = data.validationErrors;
      this.message = data.message;
      this.requestId = data.requestId;
      this.errorCode = data.errorCode;
      this.originalError = data.originalError;
    }
  }
  SharedModels2.ContentManagementBaseKontentError = ContentManagementBaseKontentError;
  class ReferenceObject {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  SharedModels2.ReferenceObject = ReferenceObject;
})(SharedModels || (SharedModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/assets/asset.models.js
var AssetModels;
(function(AssetModels2) {
  class Asset {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  AssetModels2.Asset = Asset;
  class AssetFileReference {
    constructor(data) {
      this.id = data.id;
      this.type = data.type;
    }
  }
  AssetModels2.AssetFileReference = AssetFileReference;
  class AssetFileDescription {
    constructor(data) {
      this.language = data.language;
      this.description = data.description;
    }
  }
  AssetModels2.AssetFileDescription = AssetFileDescription;
})(AssetModels || (AssetModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/asset-folders/asset-folder.models.js
var AssetFolderModels;
(function(AssetFolderModels2) {
  class AssetFolder {
    constructor(data) {
      this.id = data.id;
      this.name = data.name;
      this.externalId = data.externalId;
      this.folders = data.folders;
      this._raw = data._raw;
    }
  }
  AssetFolderModels2.AssetFolder = AssetFolder;
})(AssetFolderModels || (AssetFolderModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/taxonomies/taxonomy.models.js
var TaxonomyModels;
(function(TaxonomyModels2) {
  class Taxonomy {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  TaxonomyModels2.Taxonomy = Taxonomy;
})(TaxonomyModels || (TaxonomyModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/content-types/content-type.models.js
var ContentTypeModels;
(function(ContentTypeModels2) {
  class ContentTypeGroup {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  ContentTypeModels2.ContentTypeGroup = ContentTypeGroup;
  class ContentType {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  ContentTypeModels2.ContentType = ContentType;
})(ContentTypeModels || (ContentTypeModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/content-type-snippets/content-type-snippet-elements.builder.js
var ContentTypeSnippetElements = class {
  assetElement(element) {
    return element;
  }
  customElement(element) {
    return element;
  }
  dateTimeElement(element) {
    return element;
  }
  guidelinesElement(element) {
    return element;
  }
  linkedItemsElement(element) {
    return element;
  }
  subpagesElement(element) {
    return element;
  }
  multipleChoiceElement(element) {
    return element;
  }
  numberElement(element) {
    return element;
  }
  richTextElement(element) {
    return element;
  }
  taxonomyElement(element) {
    return element;
  }
  textElement(element) {
    return element;
  }
  any(element) {
    return element;
  }
};
var contentTypeSnippetElementsBuilder = new ContentTypeSnippetElements();

// node_modules/@kontent-ai/management-sdk/dist/es6/models/content-types/content-type-elements.builder.js
var ContentTypeElementsBuilder = class extends ContentTypeSnippetElements {
  urlSlugElement(element) {
    return element;
  }
  snippetElement(element) {
    return element;
  }
};
var contentTypeElementsBuilder = new ContentTypeElementsBuilder();

// node_modules/@kontent-ai/management-sdk/dist/es6/models/language-variants/language-variant.models.js
var LanguageVariantModels;
(function(LanguageVariantModels2) {
  class ContentItemLanguageVariant {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  LanguageVariantModels2.ContentItemLanguageVariant = ContentItemLanguageVariant;
  class ContentItemLanguageWithComponentsVariant {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  LanguageVariantModels2.ContentItemLanguageWithComponentsVariant = ContentItemLanguageWithComponentsVariant;
})(LanguageVariantModels || (LanguageVariantModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/language-variants/language-variant-elements-builder.js
var LanguageVariantElementsBuilder = class {
  assetElement(element) {
    return element;
  }
  customElement(element) {
    return element;
  }
  dateTimeElement(element) {
    return element;
  }
  linkedItemsElement(element) {
    return element;
  }
  multipleChoiceElement(element) {
    return element;
  }
  numberElement(element) {
    return element;
  }
  richTextElement(element) {
    return element;
  }
  taxonomyElement(element) {
    return element;
  }
  textElement(element) {
    return element;
  }
  urlSlugElement(element) {
    return element;
  }
  any(element) {
    return element;
  }
};
var languageVariantElementsBuilder = new LanguageVariantElementsBuilder();

// node_modules/@kontent-ai/management-sdk/dist/es6/models/elements/elements.models.js
var ElementModels;
(function(ElementModels2) {
  class ContentItemElement {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  ElementModels2.ContentItemElement = ContentItemElement;
  class ContentItemElementComponent {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  ElementModels2.ContentItemElementComponent = ContentItemElementComponent;
})(ElementModels || (ElementModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/content-type-snippets/content-type-snippets.models.js
var ContentTypeSnippetModels;
(function(ContentTypeSnippetModels2) {
  class ContentTypeSnippet {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  ContentTypeSnippetModels2.ContentTypeSnippet = ContentTypeSnippet;
})(ContentTypeSnippetModels || (ContentTypeSnippetModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/workflow/workflow.models.js
var WorkflowModels;
(function(WorkflowModels2) {
  class WorkflowStep {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  WorkflowModels2.WorkflowStep = WorkflowStep;
  class Workflow {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  WorkflowModels2.Workflow = Workflow;
})(WorkflowModels || (WorkflowModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/languages/language.models.js
var LanguageModels;
(function(LanguageModels2) {
  class LanguageModel {
    constructor(data) {
      this.name = data.name;
      this.id = data.id;
      this.codename = data.codename;
      this.externalId = data.externalId;
      this.isActive = data.isActive;
      this.isDefault = data.isDefault;
      this.fallbackLanguage = data.fallbackLanguage;
      this._raw = data._raw;
    }
  }
  LanguageModels2.LanguageModel = LanguageModel;
  class FallbackLanguageModel {
    constructor(data) {
      this.id = data.id;
    }
  }
  LanguageModels2.FallbackLanguageModel = FallbackLanguageModel;
})(LanguageModels || (LanguageModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/identifiers.js
var Identifiers;
(function(Identifiers2) {
  let TaskIdentifierEnum;
  (function(TaskIdentifierEnum2) {
    TaskIdentifierEnum2["InternalId"] = "internalId";
  })(TaskIdentifierEnum = Identifiers2.TaskIdentifierEnum || (Identifiers2.TaskIdentifierEnum = {}));
  let ContentItemIdentifierEnum;
  (function(ContentItemIdentifierEnum2) {
    ContentItemIdentifierEnum2["ExternalId"] = "externalId";
    ContentItemIdentifierEnum2["InternalId"] = "internalId";
    ContentItemIdentifierEnum2["Codename"] = "codename";
  })(ContentItemIdentifierEnum = Identifiers2.ContentItemIdentifierEnum || (Identifiers2.ContentItemIdentifierEnum = {}));
  let ContentTypeIdentifierEnum;
  (function(ContentTypeIdentifierEnum2) {
    ContentTypeIdentifierEnum2["ExternalId"] = "externalId";
    ContentTypeIdentifierEnum2["InternalId"] = "internalId";
    ContentTypeIdentifierEnum2["Codename"] = "codename";
  })(ContentTypeIdentifierEnum = Identifiers2.ContentTypeIdentifierEnum || (Identifiers2.ContentTypeIdentifierEnum = {}));
  let RenditionIdentifierEnum;
  (function(RenditionIdentifierEnum2) {
    RenditionIdentifierEnum2["ExternalId"] = "externalId";
    RenditionIdentifierEnum2["InternalId"] = "internalId";
  })(RenditionIdentifierEnum = Identifiers2.RenditionIdentifierEnum || (Identifiers2.RenditionIdentifierEnum = {}));
  let CollectionIdentifierEnum;
  (function(CollectionIdentifierEnum2) {
    CollectionIdentifierEnum2["ExternalId"] = "externalId";
    CollectionIdentifierEnum2["InternalId"] = "internalId";
    CollectionIdentifierEnum2["Codename"] = "codename";
  })(CollectionIdentifierEnum = Identifiers2.CollectionIdentifierEnum || (Identifiers2.CollectionIdentifierEnum = {}));
  let LanguageIdentifierEnum;
  (function(LanguageIdentifierEnum2) {
    LanguageIdentifierEnum2["InternalId"] = "internalId";
    LanguageIdentifierEnum2["Codename"] = "codename";
    LanguageIdentifierEnum2["ExternalId"] = "externalId";
  })(LanguageIdentifierEnum = Identifiers2.LanguageIdentifierEnum || (Identifiers2.LanguageIdentifierEnum = {}));
  let WorkflowIdentifierEnum;
  (function(WorkflowIdentifierEnum2) {
    WorkflowIdentifierEnum2["Id"] = "id";
    WorkflowIdentifierEnum2["Codename"] = "codename";
  })(WorkflowIdentifierEnum = Identifiers2.WorkflowIdentifierEnum || (Identifiers2.WorkflowIdentifierEnum = {}));
  let TaxonomyIdentifierEnum;
  (function(TaxonomyIdentifierEnum2) {
    TaxonomyIdentifierEnum2["InternalId"] = "internalId";
    TaxonomyIdentifierEnum2["ExternalId"] = "externalId";
    TaxonomyIdentifierEnum2["Codename"] = "codename";
  })(TaxonomyIdentifierEnum = Identifiers2.TaxonomyIdentifierEnum || (Identifiers2.TaxonomyIdentifierEnum = {}));
  let AssetIdentifierEnum;
  (function(AssetIdentifierEnum2) {
    AssetIdentifierEnum2["InternalId"] = "internalId";
    AssetIdentifierEnum2["ExternalId"] = "externalId";
    AssetIdentifierEnum2["Codename"] = "codename";
  })(AssetIdentifierEnum = Identifiers2.AssetIdentifierEnum || (Identifiers2.AssetIdentifierEnum = {}));
  let WebhookIdentifierEnum;
  (function(WebhookIdentifierEnum2) {
    WebhookIdentifierEnum2["Id"] = "id";
  })(WebhookIdentifierEnum = Identifiers2.WebhookIdentifierEnum || (Identifiers2.WebhookIdentifierEnum = {}));
  let EnvironmentIdentifierEnum;
  (function(EnvironmentIdentifierEnum2) {
    EnvironmentIdentifierEnum2["Id"] = "id";
  })(EnvironmentIdentifierEnum = Identifiers2.EnvironmentIdentifierEnum || (Identifiers2.EnvironmentIdentifierEnum = {}));
  let UserIdentifierEnum;
  (function(UserIdentifierEnum2) {
    UserIdentifierEnum2["Id"] = "id";
    UserIdentifierEnum2["Email"] = "email";
  })(UserIdentifierEnum = Identifiers2.UserIdentifierEnum || (Identifiers2.UserIdentifierEnum = {}));
  let RoleIdentifierEnum;
  (function(RoleIdentifierEnum2) {
    RoleIdentifierEnum2["Id"] = "id";
    RoleIdentifierEnum2["Codename"] = "codename";
  })(RoleIdentifierEnum = Identifiers2.RoleIdentifierEnum || (Identifiers2.RoleIdentifierEnum = {}));
  let SpaceIdentifierEnum;
  (function(SpaceIdentifierEnum2) {
    SpaceIdentifierEnum2["InternalId"] = "internalId";
    SpaceIdentifierEnum2["ExternalId"] = "externalId";
    SpaceIdentifierEnum2["Codename"] = "codename";
  })(SpaceIdentifierEnum = Identifiers2.SpaceIdentifierEnum || (Identifiers2.SpaceIdentifierEnum = {}));
  class AssetIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === AssetIdentifierEnum.InternalId) {
        return `${this.value}`;
      }
      if (this.identifier === AssetIdentifierEnum.ExternalId) {
        return `external-id/${this.value}`;
      }
      if (this.identifier === AssetIdentifierEnum.Codename) {
        return `codename/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.AssetIdentifier = AssetIdentifier;
  class TaxonomyIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === TaxonomyIdentifierEnum.InternalId) {
        return `${this.value}`;
      }
      if (this.identifier === TaxonomyIdentifierEnum.ExternalId) {
        return `external-id/${this.value}`;
      }
      if (this.identifier === TaxonomyIdentifierEnum.Codename) {
        return `codename/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.TaxonomyIdentifier = TaxonomyIdentifier;
  class ContentTypeIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === ContentTypeIdentifierEnum.Codename) {
        return `codename/${this.value}`;
      }
      if (this.identifier === ContentTypeIdentifierEnum.InternalId) {
        return `${this.value}`;
      }
      if (this.identifier === ContentTypeIdentifierEnum.ExternalId) {
        return `external-id/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.ContentTypeIdentifier = ContentTypeIdentifier;
  class RenditionIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === RenditionIdentifierEnum.InternalId) {
        return `${this.value}`;
      }
      if (this.identifier === RenditionIdentifierEnum.ExternalId) {
        return `external-id/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.RenditionIdentifier = RenditionIdentifier;
  class CollectionIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === CollectionIdentifierEnum.Codename) {
        return `codename/${this.value}`;
      }
      if (this.identifier === CollectionIdentifierEnum.InternalId) {
        return `${this.value}`;
      }
      if (this.identifier === CollectionIdentifierEnum.ExternalId) {
        return `external-id/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.CollectionIdentifier = CollectionIdentifier;
  class WorkflowIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === WorkflowIdentifierEnum.Id) {
        return `${this.value}`;
      }
      if (this.identifier === WorkflowIdentifierEnum.Codename) {
        return `codename/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.WorkflowIdentifier = WorkflowIdentifier;
  class TaskIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === TaskIdentifierEnum.InternalId) {
        return `${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.TaskIdentifier = TaskIdentifier;
  class ContentItemIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === ContentItemIdentifierEnum.Codename) {
        return `codename/${this.value}`;
      }
      if (this.identifier === ContentItemIdentifierEnum.InternalId) {
        return `${this.value}`;
      }
      if (this.identifier === ContentItemIdentifierEnum.ExternalId) {
        return `external-id/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.ContentItemIdentifier = ContentItemIdentifier;
  class LanguageIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === LanguageIdentifierEnum.Codename) {
        return `codename/${this.value}`;
      }
      if (this.identifier === LanguageIdentifierEnum.InternalId) {
        return `${this.value}`;
      }
      if (this.identifier === LanguageIdentifierEnum.ExternalId) {
        return `external-id/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.LanguageIdentifier = LanguageIdentifier;
  class WebhookIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === WebhookIdentifierEnum.Id) {
        return `${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.WebhookIdentifier = WebhookIdentifier;
  class EnvironmentIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === EnvironmentIdentifierEnum.Id) {
        return `${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.EnvironmentIdentifier = EnvironmentIdentifier;
  class UserIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === UserIdentifierEnum.Id) {
        return `${this.value}`;
      }
      if (this.identifier === UserIdentifierEnum.Email) {
        return `email/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.UserIdentifier = UserIdentifier;
  class RoleIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === RoleIdentifierEnum.Id) {
        return `${this.value}`;
      }
      if (this.identifier === RoleIdentifierEnum.Codename) {
        return `codename/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.RoleIdentifier = RoleIdentifier;
  class SpaceIdentifier {
    constructor(identifier, value) {
      this.identifier = identifier;
      this.value = value;
    }
    getParamValue() {
      if (this.identifier === SpaceIdentifierEnum.Codename) {
        return `codename/${this.value}`;
      }
      if (this.identifier === SpaceIdentifierEnum.InternalId) {
        return `${this.value}`;
      }
      if (this.identifier === SpaceIdentifierEnum.ExternalId) {
        return `external-id/${this.value}`;
      }
      throw Error(`Unsupported identifier '${this.identifier}'`);
    }
  }
  Identifiers2.SpaceIdentifier = SpaceIdentifier;
})(Identifiers || (Identifiers = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/webhook/webhook.models.js
var WebhookModels;
(function(WebhookModels2) {
  class WebhookDeliveryTriggersContentType {
    constructor(data) {
      this.enabled = data.enabled;
      this.actions = data.actions;
    }
  }
  WebhookModels2.WebhookDeliveryTriggersContentType = WebhookDeliveryTriggersContentType;
  class WebhookDeliveryTriggersAsset {
    constructor(data) {
      this.enabled = data.enabled;
      this.actions = data.actions;
    }
  }
  WebhookModels2.WebhookDeliveryTriggersAsset = WebhookDeliveryTriggersAsset;
  class WebhookDeliveryTriggersTaxonomy {
    constructor(data) {
      this.enabled = data.enabled;
      this.actions = data.actions;
    }
  }
  WebhookModels2.WebhookDeliveryTriggersTaxonomy = WebhookDeliveryTriggersTaxonomy;
  class WebhookDeliveryTriggersLanguage {
    constructor(data) {
      this.enabled = data.enabled;
      this.actions = data.actions;
    }
  }
  WebhookModels2.WebhookDeliveryTriggersLanguage = WebhookDeliveryTriggersLanguage;
  class WebhookDeliveryTriggersContentItem {
    constructor(data) {
      this.enabled = data.enabled;
      this.actions = data.actions;
      this.filters = data.filters;
    }
  }
  WebhookModels2.WebhookDeliveryTriggersContentItem = WebhookDeliveryTriggersContentItem;
  class WebhookTransitionsTo {
    constructor(data) {
      this.id = data.id;
    }
  }
  WebhookModels2.WebhookTransitionsTo = WebhookTransitionsTo;
  class LegacyWebhookWorkflowStepChanges {
    constructor(data) {
      this.type = data.type;
      this.transitionsTo = data.transitionsTo;
    }
  }
  WebhookModels2.LegacyWebhookWorkflowStepChanges = LegacyWebhookWorkflowStepChanges;
  class LegacyWebhookDeliveryApiContentChanges {
    constructor(data) {
      this.type = data.type;
      this.operations = data.operations;
    }
  }
  WebhookModels2.LegacyWebhookDeliveryApiContentChanges = LegacyWebhookDeliveryApiContentChanges;
  class LegacyWebhookPreviewDeliveryApiContentChanges {
    constructor(data) {
      this.type = data.type;
      this.operations = data.operations;
    }
  }
  WebhookModels2.LegacyWebhookPreviewDeliveryApiContentChanges = LegacyWebhookPreviewDeliveryApiContentChanges;
  class LegacyWebhookManagementApiContentChanges {
    constructor(data) {
      this.type = data.type;
      this.operations = data.operations;
    }
  }
  WebhookModels2.LegacyWebhookManagementApiContentChanges = LegacyWebhookManagementApiContentChanges;
  class Webhook {
    constructor(data) {
      this.id = data.id;
      this.name = data.name;
      this.secret = data.secret;
      this.url = data.url;
      this.lastModified = data.lastModified;
      this.healthStatus = data.healthStatus;
      this.deliveryTriggers = data.deliveryTriggers;
      this.enabled = data.enabled;
      this.headers = data.headers;
      this._raw = data._raw;
    }
  }
  WebhookModels2.Webhook = Webhook;
  class LegacyWebhook {
    constructor(data) {
      this.id = data.id;
      this.name = data.name;
      this.secret = data.secret;
      this.url = data.url;
      this.triggers = data.triggers;
      this.lastModified = data.lastModified;
      this.healthStatus = data.healthStatus;
    }
  }
  WebhookModels2.LegacyWebhook = LegacyWebhook;
})(WebhookModels || (WebhookModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/collections/collection.models.js
var CollectionModels;
(function(CollectionModels2) {
  class Collection {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  CollectionModels2.Collection = Collection;
})(CollectionModels || (CollectionModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/subscriptions/subscription.models.js
var SubscriptionModels;
(function(SubscriptionModels2) {
  class SubscriptionProject {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  SubscriptionModels2.SubscriptionProject = SubscriptionProject;
  class SubscriptionUser {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  SubscriptionModels2.SubscriptionUser = SubscriptionUser;
})(SubscriptionModels || (SubscriptionModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/roles/role.models.js
var RoleModels;
(function(RoleModels2) {
  class Role {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  RoleModels2.Role = Role;
})(RoleModels || (RoleModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/project-users/project-users.models.js
var ProjectUserModels;
(function(ProjectUserModels2) {
  class ProjectUser {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  ProjectUserModels2.ProjectUser = ProjectUser;
  class CollectionGroup {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  ProjectUserModels2.CollectionGroup = CollectionGroup;
})(ProjectUserModels || (ProjectUserModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/asset-renditions/asset-rendition.models.js
var AssetRenditionModels;
(function(AssetRenditionModels2) {
  class AssetRendition {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  AssetRenditionModels2.AssetRendition = AssetRendition;
})(AssetRenditionModels || (AssetRenditionModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/environments/environment.models.js
var EnvironmentModels;
(function(EnvironmentModels2) {
  class EnvironmentReportModel {
    constructor(id, name) {
      this.id = id;
      this.name = name;
    }
  }
  EnvironmentModels2.EnvironmentReportModel = EnvironmentReportModel;
  class EnvironmentValidationVariantIssueModel {
    constructor(item, language, issues) {
      this.item = item;
      this.language = language;
      this.issues = issues;
      this.issue_type = "variant_issue";
    }
  }
  EnvironmentModels2.EnvironmentValidationVariantIssueModel = EnvironmentValidationVariantIssueModel;
  class EnvironmentValidationTypeIssueModel {
    constructor(type, issues) {
      this.type = type;
      this.issues = issues;
      this.issue_type = "type_issue";
    }
  }
  EnvironmentModels2.EnvironmentValidationTypeIssueModel = EnvironmentValidationTypeIssueModel;
  class EnvironmentInformationModel {
    constructor(id, name, environment) {
      this.id = id;
      this.name = name;
      this.environment = environment;
    }
  }
  EnvironmentModels2.EnvironmentInformationModel = EnvironmentInformationModel;
  class EnvironmentVariantContentItemModel {
    constructor(id, name, codename) {
      this.id = id;
      this.name = name;
      this.codename = codename;
    }
  }
  EnvironmentModels2.EnvironmentVariantContentItemModel = EnvironmentVariantContentItemModel;
  class EnvironmentVariantLanguageModel {
    constructor(id, name, codename) {
      this.id = id;
      this.name = name;
      this.codename = codename;
    }
  }
  EnvironmentModels2.EnvironmentVariantLanguageModel = EnvironmentVariantLanguageModel;
  class EnvironmentVariantElementModel {
    constructor(id, name, codename) {
      this.id = id;
      this.name = name;
      this.codename = codename;
    }
  }
  EnvironmentModels2.EnvironmentVariantElementModel = EnvironmentVariantElementModel;
  class EnvironmentTypeIssueModel {
    constructor(type, issues) {
      this.type = type;
      this.issues = issues;
    }
  }
  EnvironmentModels2.EnvironmentTypeIssueModel = EnvironmentTypeIssueModel;
  class EnvironmentTypeModel {
    constructor(id, name, codename) {
      this.id = id;
      this.name = name;
      this.codename = codename;
    }
  }
  EnvironmentModels2.EnvironmentTypeModel = EnvironmentTypeModel;
  class EnvironmentIssueModel {
    constructor(element, messages) {
      this.element = element;
      this.messages = messages;
    }
  }
  EnvironmentModels2.EnvironmentIssueModel = EnvironmentIssueModel;
  class EnvironmentVariantIssueModel {
    constructor(item, language, issues) {
      this.item = item;
      this.language = language;
      this.issues = issues;
    }
  }
  EnvironmentModels2.EnvironmentVariantIssueModel = EnvironmentVariantIssueModel;
  class EnvironmentCloningStateModel {
    constructor(cloningState) {
      this.cloningState = cloningState;
    }
  }
  EnvironmentModels2.EnvironmentCloningStateModel = EnvironmentCloningStateModel;
  class EnvironmentModel {
    constructor(id, name, isProduction) {
      this.id = id;
      this.name = name;
      this.isProduction = isProduction;
    }
  }
  EnvironmentModels2.EnvironmentModel = EnvironmentModel;
  class CloneEnvironmentModel2 {
    constructor(id, managementApiKey, deliveryPreviewApiKey, securedDeliveryApiKey) {
      this.id = id;
      this.managementApiKey = managementApiKey;
      this.deliveryPreviewApiKey = deliveryPreviewApiKey;
      this.securedDeliveryApiKey = securedDeliveryApiKey;
    }
  }
  EnvironmentModels2.CloneEnvironmentModel = CloneEnvironmentModel2;
})(EnvironmentModels || (EnvironmentModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/assets/asset-elements.builder.js
var AssetElementsBuilder = class {
  taxonomyElement(element) {
    return element;
  }
};
var assetElementsBuilder = new AssetElementsBuilder();

// node_modules/@kontent-ai/management-sdk/dist/es6/models/spaces/space.models.js
var SpaceModels;
(function(SpaceModels2) {
  class Space {
    constructor(data) {
      Object.assign(this, data);
    }
  }
  SpaceModels2.Space = Space;
})(SpaceModels || (SpaceModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/models/preview/preview.models.js
var PreviewModels;
(function(PreviewModels2) {
  class PreviewConfiguration {
    constructor(data) {
      this.spaceDomains = data.spaceDomains;
      this.previewUrlPatterns = data.previewUrlPatterns;
      this._raw = data._raw;
    }
  }
  PreviewModels2.PreviewConfiguration = PreviewConfiguration;
})(PreviewModels || (PreviewModels = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/base-query.js
var BaseQuery = class {
  constructor(config, queryService) {
    this.config = config;
    this.queryService = queryService;
    this.queryConfig = {
      headers: [],
      cancelTokenRequest: void 0
    };
    this.parameters = [];
    this.apiEndpoints = new ContentManagementApiEndpoints({
      environmentId: this.config.environmentId,
      subscriptionId: this.config.subscriptionId
    });
    this._addSlashToUrl = true;
  }
  /**
   * Gets url for this query
   */
  getUrl() {
    if (this._customUrl) {
      return this._customUrl;
    }
    return this.getUrlForAction(this.getAction());
  }
  /**
   * Adds header to request
   * @param header Header to add
   */
  withHeader(header) {
    this.queryConfig.headers.push(header);
    return this;
  }
  /**
   * Adds headers to request
   * @param headers Headers to add
   */
  withHeaders(headers) {
    this.queryConfig.headers.push(...headers);
    return this;
  }
  /**
   * Adds cancel token to request
   */
  withCancelToken(tokenRequest) {
    this.queryConfig.cancelTokenRequest = tokenRequest;
    return this;
  }
  /**
   * Gets array of currently set headers
   */
  getHeaders() {
    return this.queryConfig.headers;
  }
  /**
   * Sets custom query parmeter that will be added to URL
   * @param name Parameter name
   * @param value Parameter value
   */
  withCustomParameter(name, value) {
    this.parameters.push(new Parameters.CustomParameter(name, value));
    return this;
  }
  /**
   * Overrides default url resolver and resolves this query with a custom one
   * @param url Custom url to resolve query
   */
  withUrl(url) {
    this._customUrl = url;
    return this;
  }
  /**
   * Gets parameters assigned to this query
   */
  getParameters() {
    return this.parameters;
  }
  getUrlForAction(action) {
    return encodeURI(this.queryService.getFullUrl(action, this.getParameters(), this._addSlashToUrl));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/base-listing-query.js
var BaseListingQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.xContinuationHeaderName = "x-continuation";
  }
  /**
   * Configuration for list queries
   * @param config List configuration
   */
  withListQueryConfig(config) {
    this.listQueryConfig = config;
    return this;
  }
  /**
   * Sets the 'x-continuation' header value. This can be used for fetching next pages.
   * @param token Value from continuation_token property
   */
  xContinuationToken(token) {
    this.queryConfig.headers.push({
      header: this.xContinuationHeaderName,
      value: token
    });
    return this;
  }
  /**
   * Query to get all items. Uses paging data and may execute multiple HTTP requests depending on number of items
   */
  toAllPromise() {
    return this.queryService.getListAllResponseAsync({
      listQueryConfig: this.listQueryConfig,
      allResponseFactory: (items, responses) => this.allResponseFactory(items, responses),
      getResponse: (token) => {
        if (token) {
          this.xContinuationToken(token).toPromise();
        }
        return this.toPromise();
      }
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/content-item-identifier-query.class.js
var ContentItemIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets using internal Id
  * @param id Internal Id of content item
  */
  byItemId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentItemIdentifier(Identifiers.ContentItemIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using external Id
  * @param id External Id of content item
  */
  byItemExternalId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentItemIdentifier(Identifiers.ContentItemIdentifierEnum.ExternalId, id));
  }
  /**
  * Gets query using codename
  * @param codename Codename of content item
  */
  byItemCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentItemIdentifier(Identifiers.ContentItemIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/id-and-external-id-identifier-query.class.js
var IdIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets using internal Id
  * @param id Internal Id
  */
  byItemId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentItemIdentifier(Identifiers.ContentItemIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using external Id
  * @param externalId External Id
  */
  byItemExternalId(externalId) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentItemIdentifier(Identifiers.ContentItemIdentifierEnum.ExternalId, externalId));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/data-query.class.js
var DataQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * Gets query with data
   * @param data Data for query
   */
  withData(data) {
    return this.buildResult(this.config, this.queryService, data);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/id-codename-identifier-query.class.js
var IdCodenameIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets using internal Id
  * @param id Internal Id
  */
  byItemId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentItemIdentifier(Identifiers.ContentItemIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using codename
  * @param codename Codename
  */
  byItemCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentItemIdentifier(Identifiers.ContentItemIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/environment-identifier-query.class.js
var EnvironmentIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * For given environment by id
   * @param environmentId EnvironmentId
   */
  environmentId(environmentId) {
    return this.buildResult(this.config, this.queryService, new Identifiers.EnvironmentIdentifier(Identifiers.EnvironmentIdentifierEnum.Id, environmentId));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/language-id-and-codename-identifier-query.class.js
var LanguageIdAndCodenameIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets using internal Id
  * @param id Internal Id
  */
  byLanguageId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.LanguageIdentifier(Identifiers.LanguageIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using codename
  * @param codename Codename
  */
  byLanguageCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.LanguageIdentifier(Identifiers.LanguageIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/taxonomy-identifier-query.class.js
var TaxonomyIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets using internal Id
  * @param id Internal Id of content item
  */
  byTaxonomyId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.TaxonomyIdentifier(Identifiers.TaxonomyIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using external Id
  * @param id External Id of content item
  */
  byTaxonomyExternalId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.TaxonomyIdentifier(Identifiers.TaxonomyIdentifierEnum.ExternalId, id));
  }
  /**
  * Gets query using codename
  * @param codename Codename of content item
  */
  byTaxonomyCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.TaxonomyIdentifier(Identifiers.TaxonomyIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/asset-identifier-query.class.js
var AssetIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * Gets asset using internal Id
   * @param id Internal Id of the asset
   */
  byAssetId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.AssetIdentifier(Identifiers.AssetIdentifierEnum.InternalId, id));
  }
  /**
   * Gets asset using external Id
   * @param id External Id of the asset
   */
  byAssetExternalId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.AssetIdentifier(Identifiers.AssetIdentifierEnum.ExternalId, id));
  }
  /**
   * Gets asset using codename
   * @param id Codename of the asset
   */
  byAssetCodename(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.AssetIdentifier(Identifiers.AssetIdentifierEnum.Codename, id));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/workflow-step-identifier-query.class.js
var WorkflowStepIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * Id identifier
   * @param id If of the workflow step
   */
  byWorkflowStepId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.WorkflowIdentifier(Identifiers.WorkflowIdentifierEnum.Id, id));
  }
  /**
   * Codename identifier
   * @param codename codename of the workflow step
   */
  byWorkflowStepCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.WorkflowIdentifier(Identifiers.WorkflowIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/content-type-identifier-query.class.js
var ContentTypeIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets using internal Id
  * @param id Internal Id of content item
  */
  byTypeId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentTypeIdentifier(Identifiers.ContentTypeIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using external Id
  * @param id External Id of content item
  */
  byTypeExternalId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentTypeIdentifier(Identifiers.ContentTypeIdentifierEnum.ExternalId, id));
  }
  /**
  * Gets query using codename
  * @param codename Codename of content item
  */
  byTypeCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentTypeIdentifier(Identifiers.ContentTypeIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/content-item-external-id-identifier.class.js
var ContentItemExternalIdIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  byItemExternalId(externalId) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentItemIdentifier(Identifiers.ContentItemIdentifierEnum.ExternalId, externalId));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/language-identifier-query.class.js
var LanguageIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets using external Id
  * @param externalId Internal Id
  */
  byExternalId(externalId) {
    return this.buildResult(this.config, this.queryService, new Identifiers.LanguageIdentifier(Identifiers.LanguageIdentifierEnum.ExternalId, externalId));
  }
  /**
  * Gets using internal Id
  * @param id Internal Id
  */
  byLanguageId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.LanguageIdentifier(Identifiers.LanguageIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using codename
  * @param codename Codename
  */
  byLanguageCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.LanguageIdentifier(Identifiers.LanguageIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/content-type-codename-and-id-identifier-query.class.js
var ContentTypeCodenameAndIdIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets query using internal Id
  * @param id Internal Id of content item
  */
  byTypeId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentTypeIdentifier(Identifiers.ContentTypeIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using codename
  * @param codename Codename of content item
  */
  byTypeCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.ContentTypeIdentifier(Identifiers.ContentTypeIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/data-query-optional.class.js
var DataQueryOptional = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * Gets query without data
   */
  withoutData() {
    return this.buildResult(this.config, this.queryService, void 0);
  }
  /**
   * Gets query with data
   * @param data Data for query
   */
  withData(data) {
    return this.buildResult(this.config, this.queryService, data);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/webhook-identifier-query.class.js
var WebhookIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * Id identifier
   * @param id Id of the webhook
   */
  byId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.WebhookIdentifier(Identifiers.WebhookIdentifierEnum.Id, id));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/action-query.class.js
var ActionQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * Sets action to use for request
   */
  withAction(action) {
    return this.buildResult(this.config, this.queryService, action);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/collection-identifier-query.class.js
var CollectionIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets using internal Id
  * @param id Internal Id of collection
  */
  byCollectionId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.CollectionIdentifier(Identifiers.CollectionIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using external Id
  * @param id External Id of collection
  */
  byCollectionExternalId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.CollectionIdentifier(Identifiers.CollectionIdentifierEnum.ExternalId, id));
  }
  /**
  * Gets query using codename
  * @param codename Codename of collection
  */
  byCollectionCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.CollectionIdentifier(Identifiers.CollectionIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/user-identifier-query.class.js
var UserIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * Gets using email
   * @param email Email
   */
  byEmail(email) {
    return this.buildResult(this.config, this.queryService, new Identifiers.UserIdentifier(Identifiers.UserIdentifierEnum.Email, email));
  }
  /**
   * Gets using internal Id
   * @param id Internal Id
   */
  byId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.UserIdentifier(Identifiers.UserIdentifierEnum.Id, id));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/role-identifier-query.class.js
var RoleIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * Id
   * @param id Internal Id
   */
  byId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.RoleIdentifier(Identifiers.RoleIdentifierEnum.Id, id));
  }
  /**
   * Codename
   * @param codename Codename
   */
  byCodename(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.RoleIdentifier(Identifiers.RoleIdentifierEnum.Codename, id));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/rendition-identifier-query.class.js
var RenditionIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets using internal Id
  * @param id Internal Id of content item
  */
  byRenditionId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.RenditionIdentifier(Identifiers.RenditionIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using external Id
  * @param id External Id of content item
  */
  byRenditionExternalId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.RenditionIdentifier(Identifiers.RenditionIdentifierEnum.ExternalId, id));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/workflow-identifier-query.class.js
var WorkflowIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * Id identifier
   * @param id If of the workflow
   */
  byWorkflowId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.WorkflowIdentifier(Identifiers.WorkflowIdentifierEnum.Id, id));
  }
  /**
   * Codename identifier
   * @param codename codename of the workflow
   */
  byWorkflowCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.WorkflowIdentifier(Identifiers.WorkflowIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/task-identifier-query.class.js
var TaskIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
   * Query by task Id
   * @param id Task id
   */
  byTaskId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.TaskIdentifier(Identifiers.TaskIdentifierEnum.InternalId, id));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/query-builders/space-identifier-query.class.js
var SpaceIdentifierQuery = class {
  constructor(config, queryService, buildResult) {
    this.config = config;
    this.queryService = queryService;
    this.buildResult = buildResult;
  }
  /**
  * Gets using internal Id
  * @param id Internal Id of space
  */
  bySpaceId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.SpaceIdentifier(Identifiers.SpaceIdentifierEnum.InternalId, id));
  }
  /**
  * Gets query using external Id
  * @param id External Id of space
  */
  bySpaceExternalId(id) {
    return this.buildResult(this.config, this.queryService, new Identifiers.SpaceIdentifier(Identifiers.SpaceIdentifierEnum.ExternalId, id));
  }
  /**
  * Gets query using codename
  * @param codename Codename of space
  */
  bySpaceCodename(codename) {
    return this.buildResult(this.config, this.queryService, new Identifiers.SpaceIdentifier(Identifiers.SpaceIdentifierEnum.Codename, codename));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/base-responses.js
var BaseResponses;
(function(BaseResponses2) {
  class ContentManagementListAllResponse {
    constructor(obj) {
      this.responses = obj.responses;
      this.data = {
        items: obj.items
      };
    }
  }
  BaseResponses2.ContentManagementListAllResponse = ContentManagementListAllResponse;
  class BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      this.debug = debug;
      this.rawData = rawData;
      this.data = data;
    }
  }
  BaseResponses2.BaseContentManagementListResponse = BaseContentManagementListResponse;
  class BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      this.debug = debug;
      this.rawData = rawData;
      this.data = data;
    }
  }
  BaseResponses2.BaseContentManagementResponse = BaseContentManagementResponse;
  class EmptyContentManagementResponse extends BaseResponses2.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  BaseResponses2.EmptyContentManagementResponse = EmptyContentManagementResponse;
})(BaseResponses || (BaseResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/content-items/content-item-responses.js
var ContentItemResponses;
(function(ContentItemResponses2) {
  class ContentItemsResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentItemResponses2.ContentItemsResponse = ContentItemsResponse;
  class ContentItemsListAllResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  ContentItemResponses2.ContentItemsListAllResponse = ContentItemsListAllResponse;
  class ViewContentItemResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentItemResponses2.ViewContentItemResponse = ViewContentItemResponse;
  class AddContentItemResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentItemResponses2.AddContentItemResponse = AddContentItemResponse;
  class UpdateContentItemResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentItemResponses2.UpdateContentItemResponse = UpdateContentItemResponse;
  class UpsertContentItemResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentItemResponses2.UpsertContentItemResponse = UpsertContentItemResponse;
})(ContentItemResponses || (ContentItemResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/assets/asset-responses.js
var AssetResponses;
(function(AssetResponses2) {
  class AssetsListResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetResponses2.AssetsListResponse = AssetsListResponse;
  class AssetsListAllResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  AssetResponses2.AssetsListAllResponse = AssetsListAllResponse;
  class ViewAssetResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetResponses2.ViewAssetResponse = ViewAssetResponse;
  class UploadBinaryFileResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetResponses2.UploadBinaryFileResponse = UploadBinaryFileResponse;
  class AddAssetResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetResponses2.AddAssetResponse = AddAssetResponse;
  class UpdateAssetResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetResponses2.UpdateAssetResponse = UpdateAssetResponse;
  class UpsertAssertResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetResponses2.UpsertAssertResponse = UpsertAssertResponse;
})(AssetResponses || (AssetResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/asset-folders/asset-folder-responses.js
var AssetFolderResponses;
(function(AssetFolderResponses2) {
  class AssetFoldersListResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetFolderResponses2.AssetFoldersListResponse = AssetFoldersListResponse;
  class AddAssetFoldersResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetFolderResponses2.AddAssetFoldersResponse = AddAssetFoldersResponse;
  class ModifyAssetFoldersResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetFolderResponses2.ModifyAssetFoldersResponse = ModifyAssetFoldersResponse;
})(AssetFolderResponses || (AssetFolderResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/taxonomies/taxonomy-responses.js
var TaxonomyResponses;
(function(TaxonomyResponses2) {
  class TaxonomyListResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  TaxonomyResponses2.TaxonomyListResponse = TaxonomyListResponse;
  class ListAllTaxonomiesResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  TaxonomyResponses2.ListAllTaxonomiesResponse = ListAllTaxonomiesResponse;
  class GetTaxonomyResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  TaxonomyResponses2.GetTaxonomyResponse = GetTaxonomyResponse;
  class AddTaxonomyResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  TaxonomyResponses2.AddTaxonomyResponse = AddTaxonomyResponse;
  class ModifyTaxonomyResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  TaxonomyResponses2.ModifyTaxonomyResponse = ModifyTaxonomyResponse;
})(TaxonomyResponses || (TaxonomyResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/content-types/content-type-responses.js
var ContentTypeResponses;
(function(ContentTypeResponses2) {
  class ContentTypeListResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentTypeResponses2.ContentTypeListResponse = ContentTypeListResponse;
  class ContentTypeListAllResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  ContentTypeResponses2.ContentTypeListAllResponse = ContentTypeListAllResponse;
  class ModifyContentTypeResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentTypeResponses2.ModifyContentTypeResponse = ModifyContentTypeResponse;
  class ViewContentTypeResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentTypeResponses2.ViewContentTypeResponse = ViewContentTypeResponse;
  class AddContentTypeResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentTypeResponses2.AddContentTypeResponse = AddContentTypeResponse;
})(ContentTypeResponses || (ContentTypeResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/language-variants/language-variant-responses.js
var LanguageVariantResponses;
(function(LanguageVariantResponses2) {
  class ListLanguageVariantsOfItemResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageVariantResponses2.ListLanguageVariantsOfItemResponse = ListLanguageVariantsOfItemResponse;
  class ListLanguageVariantsOfContentTypeWithComponentsResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageVariantResponses2.ListLanguageVariantsOfContentTypeWithComponentsResponse = ListLanguageVariantsOfContentTypeWithComponentsResponse;
  class ListAllLanguageVariantsOfContentTypeWithComponentsResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  LanguageVariantResponses2.ListAllLanguageVariantsOfContentTypeWithComponentsResponse = ListAllLanguageVariantsOfContentTypeWithComponentsResponse;
  class ListLanguageVariantsOfContentTypeResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageVariantResponses2.ListLanguageVariantsOfContentTypeResponse = ListLanguageVariantsOfContentTypeResponse;
  class ListLanguageVariantsByCollectionResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageVariantResponses2.ListLanguageVariantsByCollectionResponse = ListLanguageVariantsByCollectionResponse;
  class ListLanguageVariantsBySpaceResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageVariantResponses2.ListLanguageVariantsBySpaceResponse = ListLanguageVariantsBySpaceResponse;
  class ListAllLanguageVariantsOfContentTypeResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  LanguageVariantResponses2.ListAllLanguageVariantsOfContentTypeResponse = ListAllLanguageVariantsOfContentTypeResponse;
  class ListAllLanguageVariantsByCollectionResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  LanguageVariantResponses2.ListAllLanguageVariantsByCollectionResponse = ListAllLanguageVariantsByCollectionResponse;
  class ListAllLanguageVariantsBySpaceResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  LanguageVariantResponses2.ListAllLanguageVariantsBySpaceResponse = ListAllLanguageVariantsBySpaceResponse;
  class UpsertLanguageVariantResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageVariantResponses2.UpsertLanguageVariantResponse = UpsertLanguageVariantResponse;
  class ViewLanguageVariantResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageVariantResponses2.ViewLanguageVariantResponse = ViewLanguageVariantResponse;
})(LanguageVariantResponses || (LanguageVariantResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/content-type-snippets/content-type-snippet-responses.js
var ContentTypeSnippetResponses;
(function(ContentTypeSnippetResponses2) {
  class ContentTypeSnippetListResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentTypeSnippetResponses2.ContentTypeSnippetListResponse = ContentTypeSnippetListResponse;
  class ContentTypeSnippetListAllResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  ContentTypeSnippetResponses2.ContentTypeSnippetListAllResponse = ContentTypeSnippetListAllResponse;
  class ViewContentTypeSnippetResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentTypeSnippetResponses2.ViewContentTypeSnippetResponse = ViewContentTypeSnippetResponse;
  class AddContentTypeSnippetResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentTypeSnippetResponses2.AddContentTypeSnippetResponse = AddContentTypeSnippetResponse;
  class ModifyContentTypeSnippetResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ContentTypeSnippetResponses2.ModifyContentTypeSnippetResponse = ModifyContentTypeSnippetResponse;
})(ContentTypeSnippetResponses || (ContentTypeSnippetResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/workflow/workflow-responses.js
var WorkflowResponses;
(function(WorkflowResponses2) {
  class ListWorkflowStepsResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  WorkflowResponses2.ListWorkflowStepsResponse = ListWorkflowStepsResponse;
  class ListWorkflowsResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  WorkflowResponses2.ListWorkflowsResponse = ListWorkflowsResponse;
  class AddWorkflowResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  WorkflowResponses2.AddWorkflowResponse = AddWorkflowResponse;
  class UpdateWorkflowResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  WorkflowResponses2.UpdateWorkflowResponse = UpdateWorkflowResponse;
})(WorkflowResponses || (WorkflowResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/languages/language-responses.js
var LanguageResponses;
(function(LanguageResponses2) {
  class ListLanguagesResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageResponses2.ListLanguagesResponse = ListLanguagesResponse;
  class ListAllLanguagesResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  LanguageResponses2.ListAllLanguagesResponse = ListAllLanguagesResponse;
  class ViewLanguageResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageResponses2.ViewLanguageResponse = ViewLanguageResponse;
  class AddLanguageResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageResponses2.AddLanguageResponse = AddLanguageResponse;
  class ModifyLanguageResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  LanguageResponses2.ModifyLanguageResponse = ModifyLanguageResponse;
})(LanguageResponses || (LanguageResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/webhook/webhook-responses.js
var WebhookResponses;
(function(WebhookResponses2) {
  class GetLegacyWebhookResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  WebhookResponses2.GetLegacyWebhookResponse = GetLegacyWebhookResponse;
  class GetWebhookResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  WebhookResponses2.GetWebhookResponse = GetWebhookResponse;
  class AddLegacyWebhookResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  WebhookResponses2.AddLegacyWebhookResponse = AddLegacyWebhookResponse;
  class AddWebhookResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  WebhookResponses2.AddWebhookResponse = AddWebhookResponse;
  class LegacyWebhookListResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  WebhookResponses2.LegacyWebhookListResponse = LegacyWebhookListResponse;
  class WebhookListResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  WebhookResponses2.WebhookListResponse = WebhookListResponse;
})(WebhookResponses || (WebhookResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/generic/generic-responses.js
var GenericResponses;
(function(GenericResponses2) {
  class GenericResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, response) {
      super(debug, response, response);
    }
  }
  GenericResponses2.GenericResponse = GenericResponse;
})(GenericResponses || (GenericResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/collections/collection-responses.js
var CollectionResponses;
(function(CollectionResponses2) {
  class CollectionsListResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  CollectionResponses2.CollectionsListResponse = CollectionsListResponse;
  class SetCollectionsResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  CollectionResponses2.SetCollectionsResponse = SetCollectionsResponse;
})(CollectionResponses || (CollectionResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/subscriptions/subscription-responses.js
var SubscriptionResponses;
(function(SubscriptionResponses2) {
  class SubscriptionProjectsListResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  SubscriptionResponses2.SubscriptionProjectsListResponse = SubscriptionProjectsListResponse;
  class SubscriptionProjectsListAllResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  SubscriptionResponses2.SubscriptionProjectsListAllResponse = SubscriptionProjectsListAllResponse;
  class ViewSubscriptionProjectResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  SubscriptionResponses2.ViewSubscriptionProjectResponse = ViewSubscriptionProjectResponse;
  class SubscriptionUsersListResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  SubscriptionResponses2.SubscriptionUsersListResponse = SubscriptionUsersListResponse;
  class SubscriptionUsersListAllResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  SubscriptionResponses2.SubscriptionUsersListAllResponse = SubscriptionUsersListAllResponse;
  class ViewSubscriptionUserResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  SubscriptionResponses2.ViewSubscriptionUserResponse = ViewSubscriptionUserResponse;
})(SubscriptionResponses || (SubscriptionResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/roles/role-responses.js
var RoleResponses;
(function(RoleResponses2) {
  class RoleListResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  RoleResponses2.RoleListResponse = RoleListResponse;
  class ViewRoleResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  RoleResponses2.ViewRoleResponse = ViewRoleResponse;
})(RoleResponses || (RoleResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/project-users/project-users-responses.js
var ProjectUsersResponses;
(function(ProjectUsersResponses2) {
  class InviteUserResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ProjectUsersResponses2.InviteUserResponse = InviteUserResponse;
  class ChangeUserRolesResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  ProjectUsersResponses2.ChangeUserRolesResponse = ChangeUserRolesResponse;
})(ProjectUsersResponses || (ProjectUsersResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/asset-renditions/asset-rendition-responses.js
var AssetRenditionResponses;
(function(AssetRenditionResponses2) {
  class AssetRenditionsListResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetRenditionResponses2.AssetRenditionsListResponse = AssetRenditionsListResponse;
  class AssetRenditionsListAllResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  AssetRenditionResponses2.AssetRenditionsListAllResponse = AssetRenditionsListAllResponse;
  class ModifyAssetRenditionResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetRenditionResponses2.ModifyAssetRenditionResponse = ModifyAssetRenditionResponse;
  class ViewAssetRenditionResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetRenditionResponses2.ViewAssetRenditionResponse = ViewAssetRenditionResponse;
  class AddAssetRenditionResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  AssetRenditionResponses2.AddAssetRenditionResponse = AddAssetRenditionResponse;
})(AssetRenditionResponses || (AssetRenditionResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/spaces/space-responses.js
var SpaceResponses;
(function(SpaceResponses2) {
  class SpacesListResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  SpaceResponses2.SpacesListResponse = SpacesListResponse;
  class ViewSpaceResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  SpaceResponses2.ViewSpaceResponse = ViewSpaceResponse;
  class AddSpaceResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  SpaceResponses2.AddSpaceResponse = AddSpaceResponse;
  class ModifySpaceResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  SpaceResponses2.ModifySpaceResponse = ModifySpaceResponse;
})(SpaceResponses || (SpaceResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/environments/environment-responses.js
var EnvironmentResponses;
(function(EnvironmentResponses2) {
  class EnvironmentValidationIssuesListResponse extends BaseResponses.BaseContentManagementListResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  EnvironmentResponses2.EnvironmentValidationIssuesListResponse = EnvironmentValidationIssuesListResponse;
  class EnvironmentValidationIssuesListAllResponse extends BaseResponses.ContentManagementListAllResponse {
    constructor(data) {
      super(data);
    }
  }
  EnvironmentResponses2.EnvironmentValidationIssuesListAllResponse = EnvironmentValidationIssuesListAllResponse;
  class StartEnvironmentValidationResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  EnvironmentResponses2.StartEnvironmentValidationResponse = StartEnvironmentValidationResponse;
  class CheckEnvironmentValidationResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  EnvironmentResponses2.CheckEnvironmentValidationResponse = CheckEnvironmentValidationResponse;
  class EnvironmentInformationResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  EnvironmentResponses2.EnvironmentInformationResponse = EnvironmentInformationResponse;
  class GetCloningStateResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  EnvironmentResponses2.GetCloningStateResponse = GetCloningStateResponse;
  class ModifyEnvironmentResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  EnvironmentResponses2.ModifyEnvironmentResponse = ModifyEnvironmentResponse;
  class CloneEnvironmentResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  EnvironmentResponses2.CloneEnvironmentResponse = CloneEnvironmentResponse;
})(EnvironmentResponses || (EnvironmentResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/responses/preview/preview-responses.js
var PreviewResponses;
(function(PreviewResponses2) {
  class PreviewConfigurationResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  PreviewResponses2.PreviewConfigurationResponse = PreviewConfigurationResponse;
  class ModifyConfigurationResponse extends BaseResponses.BaseContentManagementResponse {
    constructor(debug, rawData, data) {
      super(debug, rawData, data);
    }
  }
  PreviewResponses2.ModifyConfigurationResponse = ModifyConfigurationResponse;
})(PreviewResponses || (PreviewResponses = {}));

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-items/list-content-items-query.class.js
var ListContentItemsQuery = class extends BaseListingQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listContentItemsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.items();
  }
  allResponseFactory(items, responses) {
    return new ContentItemResponses.ContentItemsListAllResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-items/view-content-item-query.class.js
var ViewContentItemQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.viewContentItemAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewContentItem(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-items/add-content-item-query.class.js
var AddContentItemQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addContentItemAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.addContentItem();
  }
};
var AddContentItemQueryInit = class {
  constructor(config, queryService) {
    this.config = config;
    this.queryService = queryService;
  }
  withData(item) {
    return new AddContentItemQuery(this.config, this.queryService, item);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-items/update-content-item-query.class.js
var UpdateContentItemQuery = class extends BaseQuery {
  constructor(config, queryService, data, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.updateContentItemAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.updateContentItem(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-items/delete-content-item-query.class.js
var DeleteContentItemQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.deleteContentItemAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteContentItem(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-items/upsert-content-item-query.class.js
var UpsertContentItemQuery = class extends BaseQuery {
  constructor(config, queryService, data, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.upsertContentItemAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.upsertContentItem(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/assets/list-assets-query.class.js
var ListAssetsQuery = class extends BaseListingQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listAssetsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listAssets();
  }
  allResponseFactory(items, responses) {
    return new AssetResponses.AssetsListAllResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/assets/view-assets-query.js
var ViewAssetsQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.viewAssetAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewAsset(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/assets/upload-binary-file-query.class.js
var UploadBinaryFileQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.uploadBinaryFileAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.uploadBinaryFile(this.data.filename);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/assets/add-asset-query.class.js
var AddAssetQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addAssetAsync(this.getUrl(), this.data(assetElementsBuilder), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.addAsset();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/assets/upsert-asset-query.class.js
var UpsertAssetQuery = class extends BaseQuery {
  constructor(config, queryService, identifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.upsertAssetAsync(this.getUrl(), this.data(assetElementsBuilder), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.upsertAsset(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/assets/delete-asset-query.class.js
var DeleteAssetQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.deleteAssetAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteAsset(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/assets/upload-asset-from-url-query.class.js
var UploadAssetFromUrlQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
    this.withUrl("none");
  }
  toPromise() {
    return this.queryService.uploadAssetFromUrlAsync(this.getUploadBinaryFileUrl(), this.getAddAssetUrl(), this.data, this.queryConfig);
  }
  getAddAssetUrl() {
    return super.getUrlForAction(this.apiEndpoints.addAsset());
  }
  getUploadBinaryFileUrl() {
    return super.getUrlForAction(this.apiEndpoints.uploadBinaryFile(this.data.binaryFile.filename));
  }
  getAction() {
    return this.apiEndpoints.addAsset();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/taxonomies/list-taxonomies-query.class.js
var ListTaxonomiesQuery = class extends BaseListingQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listTaxonomiesAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listTaxonomies();
  }
  allResponseFactory(items, responses) {
    return new TaxonomyResponses.ListAllTaxonomiesResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/taxonomies/delete-taxonomy-query.class.js
var DeleteTaxonomyQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.deleteTaxonomyAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteTaxonomy(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/taxonomies/add-taxonomy-query.class.js
var AddTaxonomyQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addTaxonomyAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.addTaxonomy();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/taxonomies/get-taxonomy-query.class.js
var GetTaxonomyQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.getTaxonomyAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.getTaxonomy(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/taxonomies/modify-taxonomy-query.class.js
var ModifyTaxonomyQuery = class extends BaseQuery {
  constructor(config, queryService, identifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.modifyTaxonomyAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.modifyTaxonomy(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-types/list-content-types-query.class.js
var ListContentTypesQuery = class extends BaseListingQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listContentTypesAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listContentTypes();
  }
  allResponseFactory(items, responses) {
    return new ContentTypeResponses.ContentTypeListAllResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-types/view-content-type-query.class.js
var ViewContentTypeQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.viewContentTypeAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewContentType(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-types/delete-content-type-query.class.js
var DeleteContentTypeQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.deleteContentTypeAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteContentType(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-types/add-content-type-query.class.js
var AddContentTypeQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addContentTypeAsync(this.getUrl(), this.data(contentTypeElementsBuilder), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.addContentType();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-types/modify-content-type-query.class.js
var ModifyContentTypeQuery = class extends BaseQuery {
  constructor(config, queryService, identifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.modifyContentTypeAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.modifyContentType(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/language-variants/list-language-variants-of-item-query.class.js
var ListLanguageVariantsOfItemQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.listLanguageVariantsOfItemAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listLanguageVariantsOfItem(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/language-variants/list-language-variants-of-content-type-query.class.js
var ListLanguageVariantsOfContentTypeQuery = class extends BaseListingQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.listLanguageVariantsOfContentTypeAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listLanguageVariantsOfContentType(this.identifier);
  }
  allResponseFactory(items, responses) {
    return new LanguageVariantResponses.ListAllLanguageVariantsOfContentTypeResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/language-variants/list-language-variants-of-content-type-with-components-query.class.js
var ListLanguageVariantsOfContentTypeWithComponentsQuery = class extends BaseListingQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.listLanguageVariantsOfContentTypeWithComponentsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listLanguageVariantsOfContentTypeWithComponents(this.identifier);
  }
  allResponseFactory(items, responses) {
    return new LanguageVariantResponses.ListAllLanguageVariantsOfContentTypeWithComponentsResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/language-variants/upsert-language-variant-query.class.js
var UpsertLanguageVariantQuery = class extends BaseQuery {
  constructor(config, queryService, contentItemIdentifier, languageIdentifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.contentItemIdentifier = contentItemIdentifier;
    this.languageIdentifier = languageIdentifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.upsertLanguageVariantAsync(this.getUrl(), this.data(languageVariantElementsBuilder), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewOrUpsertLanguageVariant(this.contentItemIdentifier, this.languageIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/language-variants/view-language-variant-query.class.js
var ViewLanguageVariantQuery = class extends BaseQuery {
  constructor(config, queryService, contentItemIdentifier, languageIdentifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.contentItemIdentifier = contentItemIdentifier;
    this.languageIdentifier = languageIdentifier;
  }
  toPromise() {
    return this.queryService.viewLanguageVariantAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewOrUpsertLanguageVariant(this.contentItemIdentifier, this.languageIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/language-variants/delete-language-variant-query.class.js
var DeleteLanguageVariantQuery = class extends BaseQuery {
  constructor(config, queryService, contentItemIdentifier, languageIdentifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.contentItemIdentifier = contentItemIdentifier;
    this.languageIdentifier = languageIdentifier;
  }
  toPromise() {
    return this.queryService.deleteLanguageVariantAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteLanguageVariant(this.contentItemIdentifier, this.languageIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/language-variants/list-language-variants-by-collection-query.class.js
var ListLanguageVariantsByCollectionQuery = class extends BaseListingQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.listLanguageVariantsByCollectionAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listLanguageVariantsByCollection(this.identifier);
  }
  allResponseFactory(items, responses) {
    return new LanguageVariantResponses.ListAllLanguageVariantsByCollectionResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/language-variants/list-language-variants-by-space-query.class.js
var ListLanguageVariantsBySpaceQuery = class extends BaseListingQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.listLanguageVariantsBySpaceAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listLanguageVariantsBySpace(this.identifier);
  }
  allResponseFactory(items, responses) {
    return new LanguageVariantResponses.ListAllLanguageVariantsBySpaceResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-type-snippets/list-content-type-snippets-query.class.js
var ListContentTypeSnippetsQuery = class extends BaseListingQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listContentTypeSnippetsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listContentTypeSnippets();
  }
  allResponseFactory(items, responses) {
    return new ContentTypeSnippetResponses.ContentTypeSnippetListAllResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-type-snippets/view-content-type-snippet-query.class.js
var ViewContentTypeSnippetQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.viewContentTypeSnippetAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewContentTypeSnippet(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-type-snippets/add-content-type-snippet-query.class.js
var AddContentTypeSnippetQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addContentTypeSnippetAsync(this.getUrl(), this.data(contentTypeSnippetElementsBuilder), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.addContentTypeSnippet();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-type-snippets/modify-content-type-snippet-query.class.js
var ModifyContentTypeSnippetQuery = class extends BaseQuery {
  constructor(config, queryService, identifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.modifyContentTypeSnippetAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.modifyContentTypeSnippet(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/content-type-snippets/delete-content-type-snippet-query.class.js
var DeleteContentTypeSnippetQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.deleteContentTypeSnippetAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteContentTypeSnippet(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/languages/list-languages-query.class.js
var ListLanguagesQuery = class extends BaseListingQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listLanguagesAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listLanguages();
  }
  allResponseFactory(items, responses) {
    return new LanguageResponses.ListAllLanguagesResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/languages/modify-language-query.class.js
var ModifyLanguageQuery = class extends BaseQuery {
  constructor(config, queryService, identifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.modifyLanguageAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.modifyLanguage(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/languages/add-language-query.class.js
var AddLanguageQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addLanguageAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.addLanguage();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/languages/view-language-query.class.js
var ViewLanguageQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.viewLanguageAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewLanguage(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/list-workflow-steps-query.class.js
var ListWorkflowStepsQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listWorkflowStepsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listWorkflowSteps();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/change-workflow-step-of-language-variant-query.class.js
var ChangeWorkflowStepOfLanguageOrVariantQuery = class extends BaseQuery {
  constructor(config, queryService, contentItemIdentifier, languageIdentifier, workflowIdentifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.contentItemIdentifier = contentItemIdentifier;
    this.languageIdentifier = languageIdentifier;
    this.workflowIdentifier = workflowIdentifier;
  }
  toPromise() {
    return this.queryService.changeWorkflowStepOfLanguageVariantAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.changeWorkflowStepOfLanguageVariant(this.contentItemIdentifier, this.languageIdentifier, this.workflowIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/publish-language-variant-query.class.js
var PublishLanguageVariantQuery = class extends BaseQuery {
  constructor(config, queryService, contentItemIdentifier, languageIdentifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.contentItemIdentifier = contentItemIdentifier;
    this.languageIdentifier = languageIdentifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.publishLanguageVariantAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.publishLaguageVariant(this.contentItemIdentifier, this.languageIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/create-new-version-of-language-variant-query.class.js
var CreateNewVersionOfLanguageVariantQuery = class extends BaseQuery {
  constructor(config, queryService, contentItemIdentifier, languageIdentifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.contentItemIdentifier = contentItemIdentifier;
    this.languageIdentifier = languageIdentifier;
  }
  toPromise() {
    return this.queryService.createNewVersionOfLanguageVariantAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.createNewVersionOfALanguageVariant(this.contentItemIdentifier, this.languageIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/unpublish-language-variant-query.class.js
var UnpublishLanguageVariantQuery = class extends BaseQuery {
  constructor(config, queryService, contentItemIdentifier, languageIdentifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.contentItemIdentifier = contentItemIdentifier;
    this.languageIdentifier = languageIdentifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.unpublishLanguageVariantAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.unpublishLanguageVariant(this.contentItemIdentifier, this.languageIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/cancel-scheduled-publishing-of-language-variant-query.class.js
var CancelScheduledPublishingOfLanguageVariantQuery = class extends BaseQuery {
  constructor(config, queryService, contentItemIdentifier, languageIdentifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.contentItemIdentifier = contentItemIdentifier;
    this.languageIdentifier = languageIdentifier;
  }
  toPromise() {
    return this.queryService.cancelScheduledPublishingOfLanguageVariantAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.cancelScheduledPublishingOfLanguageVariant(this.contentItemIdentifier, this.languageIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/cancel-scheduled-unpublishing-of-language-variant-query.class.js
var CancelScheduledUnpublishingOfLanguageVariantQuery = class extends BaseQuery {
  constructor(config, queryService, contentItemIdentifier, languageIdentifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.contentItemIdentifier = contentItemIdentifier;
    this.languageIdentifier = languageIdentifier;
  }
  toPromise() {
    return this.queryService.cancelScheduledUnpublishingOfLanguageVariantAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.cancelScheduledUnpublishingOfLanguageVariant(this.contentItemIdentifier, this.languageIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/list-workflows-query.class.js
var ListWorkflowsQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listWorkflowsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listWorkflows();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/add-workflow-query.class.js
var AddWorkflowQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addWorkflowAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.addWorkflow();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/delete-workflow-query.class.js
var DeleteWorkflowQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.deleteWorkflowAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteWorkflow(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/update-workflow-query.class.js
var UpdateWorkflowQuery = class extends BaseQuery {
  constructor(config, queryService, data, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.updateWorkflowAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.updateWorkflow(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/workflow/change-workflow-of-language-variant-query.class.js
var ChangeWorkflowOfLanguageOrVariantQuery = class extends BaseQuery {
  constructor(config, queryService, contentItemIdentifier, languageIdentifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.contentItemIdentifier = contentItemIdentifier;
    this.languageIdentifier = languageIdentifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.changeWorkflowOfLanguageVariantAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.changeWorkflowOfLanguageVariant(this.contentItemIdentifier, this.languageIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/delete-webhook-query.class.js
var DeleteWebhookQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.deleteWebhookAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteWebhook(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/add-webhook-query.class.js
var AddWebhookQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addWebhookAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.addWebhook();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/get-webhook-query.class.js
var GetWebhookQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.getWebhookAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.getWebhook(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/list-webhooks-query.class.js
var ListWebhooksQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listWebhooksAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listWebhooks();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/enable-webhook-query.class.js
var EnableWebhookQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.enableWebhookAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.enableWebhook(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/disable-webhook-query.class.js
var DisableWebhookQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.disableWebhookAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.disableWebhook(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/add-legacy-webhook-query.class.js
var AddLegacyWebhookQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addLegacyWebhookAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.addLegacyWebhook();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/delete-legacy-webhook-query.class.js
var DeleteLegacyWebhookQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.deleteWebhookAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteLegacyWebhook(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/get-legacy-webhook-query.class.js
var GetLegacyWebhookQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.getLegacyWebhookAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.getLegacyWebhook(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/list-legacy-webhooks-query.class.js
var ListLegacyWebhooksQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listLegacyWebhooksAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listLegacyWebhooks();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/enable-legacy-webhook-query.class.js
var EnableLegacyWebhookQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.enableWebhookAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.enableLegacyWebhook(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/webhooks/disable-legacy-webhook-query.class.js
var DisableLegacyWebhookQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.disableWebhookAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.disableLegacyWebhook(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/asset-folders/list-asset-folders.class.js
var ListAssetFoldersQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listAssetFoldersAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listAssetFolders();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/asset-folders/add-asset-folders.class.js
var AddAssetFoldersQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addAssetFoldersAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.addAssetFolders();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/asset-folders/modify-asset-folders.class.js
var ModifyAssetFoldersQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.modifyAssetFoldersAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.modifyAssetFolders();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/generic/delete-query.class.js
var DeleteQuery = class extends BaseQuery {
  constructor(config, queryService, action) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.action = action;
  }
  toPromise() {
    return this.queryService.genericDeleteResponseAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.action;
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/generic/get-query.class.js
var GetQuery = class extends BaseQuery {
  constructor(config, queryService, action) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.action = action;
  }
  toPromise() {
    return this.queryService.genericGetResponseAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.action;
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/generic/patch-query.class.js
var PatchQuery = class extends BaseQuery {
  constructor(config, queryService, action, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.action = action;
    this.data = data;
  }
  toPromise() {
    return this.queryService.genericPatchResponseAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.action;
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/generic/post-query.class.js
var PostQuery = class extends BaseQuery {
  constructor(config, queryService, action, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.action = action;
    this.data = data;
  }
  toPromise() {
    return this.queryService.genericPostResponseAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.action;
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/generic/put-query.class.js
var PutQuery = class extends BaseQuery {
  constructor(config, queryService, action, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.action = action;
    this.data = data;
  }
  toPromise() {
    return this.queryService.genericPutResponseAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.action;
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/collections/list-collections-query.class.js
var ListCollectionsQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listCollectionsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listCollections();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/collections/set-collections-query.class.js
var SetCollectionsQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.setCollectionsAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.setCollections();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/subscriptions/list-subscription-projects-query.class.js
var ListSubscriptionProjectsQuery = class extends BaseListingQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listSubscriptionProjectsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listSubscriptionProjects();
  }
  allResponseFactory(items, responses) {
    return new SubscriptionResponses.SubscriptionProjectsListAllResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/subscriptions/list-subscription-users-query.class.js
var ListSubscriptionUsersQuery = class extends BaseListingQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.litSubscriptionUsersAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listSubscriptionUsers();
  }
  allResponseFactory(items, responses) {
    return new SubscriptionResponses.SubscriptionUsersListAllResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/subscriptions/view-subscription-project-query.class.js
var ViewSubscriptionProjectQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.viewSubscriptionProjectAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewSubscriptionProject(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/subscriptions/view-subscription-user-query.class.js
var ViewSubscriptionUserQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.viewSubscriptionUserAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewSubscriptionUser(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/subscriptions/activate-user-in-all-projects-query.class.js
var ActivateUserInAllProjectsQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.activateUserInAllProjectsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.activateUserInAllProjects(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/subscriptions/deactivate-user-in-all-projects-query.class.js
var DeactivateUserInAllProjectsQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.deactivateUserInAllProjectsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deactivateUserInAllProjects(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/roles/list-roles-query.class.js
var ListRolesQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listRolesAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listRoles();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/roles/view-role-query.class.js
var ViewRoleQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.viewRoleAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewRole(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/project-users/change-user-roles-query.class.js
var ChangeUserRolesQuery = class extends BaseQuery {
  constructor(config, queryService, identifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.changeUserRolesAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.changeProjectUserRoles(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/project-users/invite-user-query.class.js
var InviteProjectUserQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.inviteProjectUserAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.inviteProjectUser();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/asset-renditions/list-asset-renditions-query.class.js
var ListAssetRenditionsQuery = class extends BaseListingQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.listAssetRenditionsAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listAssetRenditions(this.identifier);
  }
  allResponseFactory(items, responses) {
    return new AssetRenditionResponses.AssetRenditionsListAllResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/asset-renditions/view-assset-rendition-query.class.js
var ViewAssetRenditionQuery = class extends BaseQuery {
  constructor(config, queryService, assetIdentifier, renditionIdentifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.assetIdentifier = assetIdentifier;
    this.renditionIdentifier = renditionIdentifier;
  }
  toPromise() {
    return this.queryService.viewAssetRenditionAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewAssetRendition(this.assetIdentifier, this.renditionIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/asset-renditions/add-asset-rendition-query.class.js
var AddAssetRenditionQuery = class extends BaseQuery {
  constructor(config, queryService, assetIdentifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.assetIdentifier = assetIdentifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addAssetRenditionAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.addAssetRendition(this.assetIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/asset-renditions/modify-asset-rendition-query.class.js
var ModifyAssetRenditionQuery = class extends BaseQuery {
  constructor(config, queryService, assetIdentifier, renditionIdentifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.assetIdentifier = assetIdentifier;
    this.renditionIdentifier = renditionIdentifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.modifyAssetRenditionAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.modifyAssetRendition(this.assetIdentifier, this.renditionIdentifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/spaces/add-space-query.class.js
var AddSpaceQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.addSpaceAsync(this.getUrl(), this.data, this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.addSpace();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/spaces/delete-space-query.class.js
var DeleteSpaceQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.deleteSpaceAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteSpace(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/spaces/list-spaces-query.class.js
var ListSpacesQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.listSpacesAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listSpaces();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/spaces/modify-space-query.class.js
var ModifySpaceQuery = class extends BaseQuery {
  constructor(config, queryService, identifier, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
    this.data = data;
  }
  toPromise() {
    return this.queryService.modifySpaceAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.modifySpace(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/spaces/view-space-query.class.js
var ViewSpaceQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.viewSpaceAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.viewSpace(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/environments/check-environment-validation-query.class.js
var CheckEnvironmentValidationQuery = class extends BaseQuery {
  constructor(config, queryService, identifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.identifier = identifier;
  }
  toPromise() {
    return this.queryService.checkEnvironmentValidationAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.checkEnvironmentValidation(this.identifier);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/environments/clone-environment-query.js
var CloneEnvironmentQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.cloneEnvironmentAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.cloneEnvironment();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/environments/delete-environment-query.js
var DeleteEnvironmentQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.deleteEnvironmentAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.deleteEnvironment();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/environments/get-environment-cloning-state-query.js
var GetEnvironmentCloningStateQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.getEnvironmentCloningStateAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.getEnvironmentCloningStatus();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/environments/list-project-validation-issues-query.class.js
var ListEnvironmentValidationIssuesQuery = class extends BaseListingQuery {
  constructor(config, queryService, taskIdentifier) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.taskIdentifier = taskIdentifier;
  }
  toPromise() {
    return this.queryService.listEnvironmentValidationIssuesAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.listEnvironmentIssues(this.taskIdentifier);
  }
  allResponseFactory(items, responses) {
    return new EnvironmentResponses.EnvironmentValidationIssuesListAllResponse({
      items,
      responses
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/environments/mark-environment-as-production-query.js
var MarkEnvironmentAsProductionQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.markEnvironmentAsProductionAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.markEnvironmentAsProduction();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/environments/start-project-validation-query.class.js
var StartEnvironmentValidationQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.startEnvironmentValidationAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.startProjectValidation();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/environments/modify-environment-query.js
var ModifyEnvironmentQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.modifyEnvironmentAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.modifyEnvironment();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/environments/environment-information-query.class.js
var EnvironmentInformationQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.environmentInformationAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.environmentInformation();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/preview/get-preview-configuration-query.class.js
var GetPreviewConfigurationQuery = class extends BaseQuery {
  constructor(config, queryService) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
  }
  toPromise() {
    return this.queryService.getPreviewConfigurationAsync(this.getUrl(), this.queryConfig);
  }
  getAction() {
    return this.apiEndpoints.getPreviewConfigruation();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/queries/preview/modify-preview-configuration-query.class.js
var ModifyPreviewConfigurationQuery = class extends BaseQuery {
  constructor(config, queryService, data) {
    super(config, queryService);
    this.config = config;
    this.queryService = queryService;
    this.data = data;
  }
  toPromise() {
    return this.queryService.modifyPreviewConfigurationAsync(this.getUrl(), this.queryConfig, this.data);
  }
  getAction() {
    return this.apiEndpoints.modifyPreviewConfigruation();
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/base-mapper.js
var BaseMapper = class {
  mapResponseDebug(baseResponse) {
    if (!baseResponse) {
      throw Error(`Cannot map debug model from the response`);
    }
    return {
      response: baseResponse
    };
  }
  mapPagination(rawPagination) {
    return new SharedModels.Pagination(rawPagination.continuation_token, rawPagination.next_page);
  }
  mapReference(rawReference) {
    return new SharedModels.ReferenceObject({
      codename: rawReference.codename,
      externalId: rawReference.external_id,
      id: rawReference.id
    });
  }
  mapEmptyResponse(response) {
    return new BaseResponses.EmptyContentManagementResponse(this.mapResponseDebug(response), void 0, void 0);
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/content-items-mapper.js
var ContentItemsMapper = class extends BaseMapper {
  mapListingItemsResponse(response) {
    const pagination = super.mapPagination(response.data.pagination);
    const items = response.data.items.map((m) => this.mapContentItem(m));
    return new ContentItemResponses.ContentItemsResponse(super.mapResponseDebug(response), response.data, {
      pagination,
      items
    });
  }
  mapViewContentItemResponse(response) {
    return new ContentItemResponses.ViewContentItemResponse(super.mapResponseDebug(response), response.data, this.mapContentItem(response.data));
  }
  mapAddContentItemResponse(response) {
    return new ContentItemResponses.AddContentItemResponse(super.mapResponseDebug(response), response.data, this.mapContentItem(response.data));
  }
  mapUpdateContentItemResponse(response) {
    return new ContentItemResponses.UpdateContentItemResponse(super.mapResponseDebug(response), response.data, this.mapContentItem(response.data));
  }
  mapUpsertContentItemResponse(response) {
    return new ContentItemResponses.UpsertContentItemResponse(super.mapResponseDebug(response), response.data, this.mapContentItem(response.data));
  }
  mapContentItem(rawItem) {
    return new ContentItemModels.ContentItem({
      codename: rawItem.codename,
      externalId: rawItem.external_id,
      id: rawItem.id,
      lastModified: new Date(rawItem.last_modified),
      name: rawItem.name,
      type: rawItem.type,
      collection: super.mapReference(rawItem.collection),
      _raw: rawItem
    });
  }
};
var contentItemsMapper = new ContentItemsMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/elements-mapper.js
var ElementsMapper = class extends BaseMapper {
  mapTypeElements(elementsRaw) {
    return elementsRaw.map((m) => this.mapTypeElement(m));
  }
  mapTypeElement(rawElement) {
    return rawElement;
  }
  mapElements(elementsRaw) {
    return elementsRaw.map((m) => {
      var _a;
      return new ElementModels.ContentItemElement({
        element: super.mapReference(m.element),
        value: this.mapElementValue(m.value),
        components: this.mapElementComponents((_a = m.components) !== null && _a !== void 0 ? _a : []),
        mode: m.mode,
        searchableValue: m.searchableValue,
        _raw: m
      });
    });
  }
  mapElement(rawElement) {
    return new ElementModels.ContentItemElement({
      element: super.mapReference(rawElement.element),
      value: this.mapElementValue(rawElement.value),
      mode: rawElement.mode,
      searchableValue: rawElement.searchableValue,
      _raw: rawElement
    });
  }
  mapElementComponents(components) {
    return components.map((m) => new ElementModels.ContentItemElementComponent({
      elements: this.mapElements(m.elements),
      id: m.id,
      type: m.type,
      _raw: m
    }));
  }
  mapElementValue(rawValue) {
    if (Array.isArray(rawValue)) {
      return rawValue.map((m) => super.mapReference(m));
    }
    return rawValue;
  }
};
var elementsMapper = new ElementsMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/assets-mapper.js
var AssetsMapper = class extends BaseMapper {
  mapListingAssetsResponse(response) {
    const pagination = super.mapPagination(response.data.pagination);
    const items = response.data.assets.map((m) => this.mapAsset(m));
    return new AssetResponses.AssetsListResponse(super.mapResponseDebug(response), response.data, {
      pagination,
      items
    });
  }
  mapViewAssetResponse(response) {
    return new AssetResponses.ViewAssetResponse(super.mapResponseDebug(response), response.data, this.mapAsset(response.data));
  }
  mapUploadBinaryFileResponse(response) {
    return new AssetResponses.UploadBinaryFileResponse(super.mapResponseDebug(response), response.data, this.mapAssetReference(response.data));
  }
  mapAddAssetResponse(response) {
    return new AssetResponses.AddAssetResponse(super.mapResponseDebug(response), response.data, this.mapAsset(response.data));
  }
  mapUpdateAssetResponse(response) {
    return new AssetResponses.UpdateAssetResponse(super.mapResponseDebug(response), response.data, this.mapAsset(response.data));
  }
  mapUpsertAssetResponse(response) {
    return new AssetResponses.UpsertAssertResponse(super.mapResponseDebug(response), response.data, this.mapAsset(response.data));
  }
  mapAssetReference(rawFileReference) {
    return new AssetModels.AssetFileReference({
      id: rawFileReference.id,
      type: rawFileReference.type
    });
  }
  mapAsset(rawAsset) {
    return new AssetModels.Asset({
      descriptions: rawAsset.descriptions.map((m) => new AssetModels.AssetFileDescription({
        description: m.description,
        language: super.mapReference(m.language)
      })),
      externalId: rawAsset.external_id,
      fileName: rawAsset.file_name,
      fileReference: this.mapAssetReference(rawAsset.file_reference),
      id: rawAsset.id,
      url: rawAsset.url,
      imageHeight: rawAsset.image_height,
      imageWidth: rawAsset.image_width,
      lastModified: new Date(rawAsset.last_modified),
      size: rawAsset.size,
      title: rawAsset.title,
      type: rawAsset.type,
      folder: rawAsset.folder,
      codename: rawAsset.codename,
      collection: rawAsset.collection,
      _raw: rawAsset
    });
  }
};
var assetsMapper = new AssetsMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/taxonomy-mapper.js
var TaxonomyMapper = class extends BaseMapper {
  mapListingTaxonomysResponse(response) {
    let taxonomies;
    let pagination;
    if (Array.isArray(response.data)) {
      taxonomies = response.data.map((m) => this.mapTaxonomy(m));
      pagination = new SharedModels.Pagination(null, null);
    } else {
      taxonomies = response.data.taxonomies.map((m) => this.mapTaxonomy(m));
      pagination = super.mapPagination(response.data.pagination);
    }
    return new TaxonomyResponses.TaxonomyListResponse(super.mapResponseDebug(response), response.data, {
      pagination,
      items: taxonomies
    });
  }
  mapGetTaxonomyResponse(response) {
    const taxonomy = this.mapTaxonomy(response.data);
    return new TaxonomyResponses.GetTaxonomyResponse(super.mapResponseDebug(response), response.data, taxonomy);
  }
  mapModifyTaxonomyResponse(response) {
    const taxonomy = this.mapTaxonomy(response.data);
    return new TaxonomyResponses.ModifyTaxonomyResponse(super.mapResponseDebug(response), response.data, taxonomy);
  }
  mapAddTaxonomyResponse(response) {
    const taxonomy = this.mapTaxonomy(response.data);
    return new TaxonomyResponses.AddTaxonomyResponse(super.mapResponseDebug(response), response.data, taxonomy);
  }
  mapTaxonomy(rawTaxonomy) {
    return new TaxonomyModels.Taxonomy({
      codename: rawTaxonomy.codename,
      id: rawTaxonomy.id,
      lastModified: new Date(rawTaxonomy.last_modified),
      name: rawTaxonomy.name,
      terms: rawTaxonomy.terms.map((m) => this.mapTaxonomy(m)),
      externalId: rawTaxonomy.external_id,
      _raw: rawTaxonomy
    });
  }
};
var taxonomyMappper = new TaxonomyMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/content-type-mapper.js
var ContentTypeMapper = class extends BaseMapper {
  mapListingResponse(response) {
    return new ContentTypeResponses.ContentTypeListResponse(super.mapResponseDebug(response), response.data, {
      items: response.data.types.map((m) => this.mapContentType(m)),
      pagination: super.mapPagination(response.data.pagination)
    });
  }
  mapViewContentTypeResponse(response) {
    return new ContentTypeResponses.ViewContentTypeResponse(super.mapResponseDebug(response), response.data, this.mapContentType(response.data));
  }
  mapModifyContentTypeResponse(response) {
    return new ContentTypeResponses.ModifyContentTypeResponse(super.mapResponseDebug(response), response.data, this.mapContentType(response.data));
  }
  mapAddContentTypeResponse(response) {
    return new ContentTypeResponses.AddContentTypeResponse(super.mapResponseDebug(response), response.data, this.mapContentType(response.data));
  }
  mapContentType(rawContentType) {
    return new ContentTypeModels.ContentType({
      codename: rawContentType.codename,
      id: rawContentType.id,
      name: rawContentType.name,
      elements: elementsMapper.mapTypeElements(rawContentType.elements),
      lastModified: new Date(rawContentType.last_modified),
      externalId: rawContentType.external_id,
      contentGroups: rawContentType.content_groups ? rawContentType.content_groups.map((m) => this.mapContentTypeGroup(m)) : void 0,
      _raw: rawContentType
    });
  }
  mapContentTypeGroup(rawContentTypeGroup) {
    return new ContentTypeModels.ContentTypeGroup({
      name: rawContentTypeGroup.name,
      codename: rawContentTypeGroup.codename,
      externalId: rawContentTypeGroup.external_id,
      id: rawContentTypeGroup.id
    });
  }
};
var contentTypeMapper = new ContentTypeMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/environment-mapper.js
var CloneEnvironmentModel = EnvironmentModels.CloneEnvironmentModel;
var EnvironmentMapper = class extends BaseMapper {
  mapGetEnvironmentCloningStateResponse(response) {
    return new EnvironmentResponses.GetCloningStateResponse(super.mapResponseDebug(response), response.data, {
      cloningInfo: new EnvironmentModels.EnvironmentCloningStateModel(response.data.cloning_state)
    });
  }
  mapModifyEnvironmentResponse(response) {
    return new EnvironmentResponses.ModifyEnvironmentResponse(super.mapResponseDebug(response), response.data, new EnvironmentModels.EnvironmentModel(response.data.id, response.data.name, response.data.is_production));
  }
  mapCloneEnvironmentResponse(response) {
    return new EnvironmentResponses.CloneEnvironmentResponse(super.mapResponseDebug(response), response.data, new CloneEnvironmentModel(response.data.id, response.data.management_api_key, response.data.delivery_preview_api_key, response.data.secured_delivery_api_key));
  }
  mapProjectValidationIssuesListResponse(response) {
    return new EnvironmentResponses.EnvironmentValidationIssuesListResponse(super.mapResponseDebug(response), response.data, {
      items: response.data.issues.map((m) => this.mapEnvironmentValidationIssue(m)),
      pagination: super.mapPagination(response.data.pagination)
    });
  }
  mapStartEnvironmentValidationResponse(response) {
    return new EnvironmentResponses.StartEnvironmentValidationResponse(super.mapResponseDebug(response), response.data, {
      id: response.data.id,
      status: response.data.status,
      validation_result: response.data.validation_result
    });
  }
  mapCheckEnvironmentValidationResponse(response) {
    return new EnvironmentResponses.CheckEnvironmentValidationResponse(super.mapResponseDebug(response), response.data, {
      id: response.data.id,
      status: response.data.status,
      validation_result: response.data.validation_result
    });
  }
  mapEnvironmentInformationResponse(response) {
    return new EnvironmentResponses.EnvironmentInformationResponse(super.mapResponseDebug(response), response.data, {
      project: new EnvironmentModels.EnvironmentInformationModel(response.data.id, response.data.name, response.data.environment)
    });
  }
  mapProjectModel(raw) {
    return new EnvironmentModels.EnvironmentReportModel(raw.id, raw.name);
  }
  mapTypeModel(raw) {
    return new EnvironmentModels.EnvironmentTypeModel(raw.id, raw.name, raw.codename);
  }
  mapItemModel(raw) {
    return new EnvironmentModels.EnvironmentVariantContentItemModel(raw.id, raw.name, raw.codename);
  }
  mapLanguageModel(raw) {
    return new EnvironmentModels.EnvironmentVariantLanguageModel(raw.id, raw.name, raw.codename);
  }
  mapIssueModel(raw) {
    return new EnvironmentModels.EnvironmentIssueModel(this.mapVariantElementModel(raw.element), raw.messages);
  }
  mapTypeIssue(raw) {
    return new EnvironmentModels.EnvironmentTypeIssueModel(this.mapTypeModel(raw.type), raw.issues.map((m) => this.mapIssueModel(m)));
  }
  mapVariantIssue(raw) {
    return new EnvironmentModels.EnvironmentVariantIssueModel(this.mapItemModel(raw.item), this.mapLanguageModel(raw.language), raw.issues.map((m) => this.mapIssueModel(m)));
  }
  mapVariantElementModel(raw) {
    return new EnvironmentModels.EnvironmentVariantElementModel(raw.id, raw.name, raw.codename);
  }
  mapEnvironmentValidationIssue(raw) {
    if (raw.issue_type === "variant_issue") {
      return new EnvironmentModels.EnvironmentValidationVariantIssueModel(this.mapItemModel(raw.item), this.mapLanguageModel(raw.language), raw.issues.map((m) => this.mapIssueModel(m)));
    }
    if (raw.issue_type === "type_issue") {
      return new EnvironmentModels.EnvironmentValidationTypeIssueModel(this.mapTypeModel(raw.type), raw.issues.map((m) => this.mapIssueModel(m)));
    }
    throw Error(`Unsupported issue type '${raw.issue_type}'`);
  }
};
var environmentMapper = new EnvironmentMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/language-variant-mapper.js
var LanguageVariantMapper = class extends BaseMapper {
  mapUpsertLanguageVariantResponse(response) {
    const variant = this.mapLanguageVariant(response.data);
    return new LanguageVariantResponses.UpsertLanguageVariantResponse(super.mapResponseDebug(response), response.data, variant);
  }
  mapViewLanguageVariantResponse(response) {
    const variant = this.mapLanguageVariant(response.data);
    return new LanguageVariantResponses.ViewLanguageVariantResponse(super.mapResponseDebug(response), response.data, variant);
  }
  mapLanguageVariantsOfItemResponse(response) {
    const variants = response.data.map((m) => this.mapLanguageVariant(m));
    return new LanguageVariantResponses.ListLanguageVariantsOfItemResponse(super.mapResponseDebug(response), response.data, {
      items: variants
    });
  }
  mapLanguageVariantsByCollectionResponse(response) {
    const variants = response.data.variants.map((m) => this.mapLanguageVariant(m));
    return new LanguageVariantResponses.ListLanguageVariantsByCollectionResponse(super.mapResponseDebug(response), response.data, {
      items: variants,
      pagination: super.mapPagination(response.data.pagination)
    });
  }
  mapLanguageVariantsBySpaceResponse(response) {
    const variants = response.data.variants.map((m) => this.mapLanguageVariant(m));
    return new LanguageVariantResponses.ListLanguageVariantsBySpaceResponse(super.mapResponseDebug(response), response.data, {
      items: variants,
      pagination: super.mapPagination(response.data.pagination)
    });
  }
  mapLanguageVariantsOfContentTypeResponse(response) {
    const variants = response.data.variants.map((m) => this.mapLanguageVariant(m));
    return new LanguageVariantResponses.ListLanguageVariantsOfContentTypeResponse(super.mapResponseDebug(response), response.data, {
      items: variants,
      pagination: super.mapPagination(response.data.pagination)
    });
  }
  mapLanguageVariantsOfContentTypeWithComponentsResponse(response) {
    const variants = response.data.variants.map((m) => this.mapLanguageVariantWithComponents(m));
    return new LanguageVariantResponses.ListLanguageVariantsOfContentTypeWithComponentsResponse(super.mapResponseDebug(response), response.data, {
      items: variants,
      pagination: super.mapPagination(response.data.pagination)
    });
  }
  mapLanguageVariantWithComponents(rawVariant) {
    return new LanguageVariantModels.ContentItemLanguageWithComponentsVariant({
      rawElements: rawVariant.elements,
      elements: elementsMapper.mapElements(rawVariant.elements),
      item: super.mapReference(rawVariant.item),
      language: super.mapReference(rawVariant.language),
      lastModified: new Date(rawVariant.last_modified),
      workflowStep: super.mapReference(rawVariant.workflow_step),
      workflow: {
        workflowIdentifier: super.mapReference(rawVariant.workflow.workflow_identifier),
        stepIdentifier: super.mapReference(rawVariant.workflow.step_identifier)
      },
      _raw: rawVariant
    });
  }
  mapLanguageVariant(rawVariant) {
    return new LanguageVariantModels.ContentItemLanguageVariant({
      elements: elementsMapper.mapElements(rawVariant.elements),
      item: super.mapReference(rawVariant.item),
      language: super.mapReference(rawVariant.language),
      lastModified: new Date(rawVariant.last_modified),
      workflowStep: super.mapReference(rawVariant.workflow_step),
      workflow: {
        workflowIdentifier: super.mapReference(rawVariant.workflow.workflow_identifier),
        stepIdentifier: super.mapReference(rawVariant.workflow.step_identifier)
      },
      _raw: rawVariant
    });
  }
};
var languageVariantMapper = new LanguageVariantMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/content-type-snippet-mapper.js
var ContentTypeSnippetMapper = class extends BaseMapper {
  mapListingResponse(response) {
    return new ContentTypeSnippetResponses.ContentTypeSnippetListResponse(super.mapResponseDebug(response), response.data, {
      items: response.data.snippets.map((m) => this.mapContentTypeSnippet(m)),
      pagination: super.mapPagination(response.data.pagination)
    });
  }
  mapViewContentTypeSnippetResponse(response) {
    return new ContentTypeSnippetResponses.ViewContentTypeSnippetResponse(super.mapResponseDebug(response), response.data, this.mapContentTypeSnippet(response.data));
  }
  mapAddContentTypeSnippetResponse(response) {
    return new ContentTypeSnippetResponses.AddContentTypeSnippetResponse(super.mapResponseDebug(response), response.data, this.mapContentTypeSnippet(response.data));
  }
  mapModifyContentTypeSnippetResponse(response) {
    return new ContentTypeSnippetResponses.ModifyContentTypeSnippetResponse(super.mapResponseDebug(response), response.data, this.mapContentTypeSnippet(response.data));
  }
  mapContentTypeSnippet(rawContentType) {
    return new ContentTypeSnippetModels.ContentTypeSnippet({
      codename: rawContentType.codename,
      id: rawContentType.id,
      name: rawContentType.name,
      elements: elementsMapper.mapTypeElements(rawContentType.elements),
      lastModified: new Date(rawContentType.last_modified),
      externalId: rawContentType.external_id,
      _raw: rawContentType
    });
  }
};
var contentTypeSnippetMapper = new ContentTypeSnippetMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/workflow-mapper.js
var WorkflowMapper = class extends BaseMapper {
  mapListWorkflowStepsResponse(response) {
    const workflowSteps = response.data.map((m) => this.mapWorkflowStep(m));
    return new WorkflowResponses.ListWorkflowStepsResponse(super.mapResponseDebug(response), response.data, workflowSteps);
  }
  mapListWorkflowsResponse(response) {
    const workflows = response.data.map((m) => this.mapWorkflow(m));
    return new WorkflowResponses.ListWorkflowsResponse(super.mapResponseDebug(response), response.data, workflows);
  }
  mapAddWorkflowResponse(response) {
    return new WorkflowResponses.AddWorkflowResponse(super.mapResponseDebug(response), response.data, this.mapWorkflow(response.data));
  }
  mapUpdateWorkflowResponse(response) {
    return new WorkflowResponses.UpdateWorkflowResponse(super.mapResponseDebug(response), response.data, this.mapWorkflow(response.data));
  }
  mapWorkflowStep(rawStep) {
    return new WorkflowModels.WorkflowStep({
      id: rawStep.id,
      name: rawStep.name,
      codename: rawStep.codename,
      transitionsTo: rawStep.transitions_to,
      _raw: rawStep
    });
  }
  mapWorkflow(raw) {
    return new WorkflowModels.Workflow({
      id: raw.id,
      name: raw.name,
      codename: raw.codename,
      archivedStep: raw.archived_step,
      publishedStep: raw.published_step,
      scheduledStep: raw.scheduled_step,
      scopes: raw.scopes,
      steps: raw.steps,
      _raw: raw
    });
  }
};
var workflowMapper = new WorkflowMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/language-mapper.js
var LanguageMapper = class extends BaseMapper {
  mapViewLanguageResponse(response) {
    const language = this.mapLanguage(response.data);
    return new LanguageResponses.ViewLanguageResponse(super.mapResponseDebug(response), response.data, language);
  }
  mapModifyLanguageResponse(response) {
    const language = this.mapLanguage(response.data);
    return new LanguageResponses.ModifyLanguageResponse(super.mapResponseDebug(response), response.data, language);
  }
  mapAddLanguageResponse(response) {
    const language = this.mapLanguage(response.data);
    return new LanguageResponses.AddLanguageResponse(super.mapResponseDebug(response), response.data, language);
  }
  mapListLanguagesResponse(response) {
    const languages = response.data.languages.map((m) => this.mapLanguage(m));
    return new LanguageResponses.ListLanguagesResponse(super.mapResponseDebug(response), response.data, {
      items: languages,
      pagination: super.mapPagination(response.data.pagination)
    });
  }
  mapLanguage(rawModel) {
    return new LanguageModels.LanguageModel({
      codename: rawModel.codename,
      externalId: rawModel.external_id,
      id: rawModel.id,
      isActive: rawModel.is_active,
      isDefault: rawModel.is_default,
      name: rawModel.name,
      fallbackLanguage: rawModel.fallback_language ? new LanguageModels.FallbackLanguageModel({
        id: rawModel.fallback_language.id
      }) : void 0,
      _raw: rawModel
    });
  }
};
var languageMapper = new LanguageMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/webhook-mapper.js
var WebhookMapper = class extends BaseMapper {
  mapGetWebhookResponse(response) {
    return new WebhookResponses.GetWebhookResponse(super.mapResponseDebug(response), response.data, this.mapWebhook(response.data));
  }
  mapGetLegacyWebhookResponse(response) {
    return new WebhookResponses.GetLegacyWebhookResponse(super.mapResponseDebug(response), response.data, this.mapLegacyWebhook(response.data));
  }
  mapAddWebhookResponse(response) {
    return new WebhookResponses.AddWebhookResponse(super.mapResponseDebug(response), response.data, this.mapWebhook(response.data));
  }
  mapAddLegacyWebhookResponse(response) {
    return new WebhookResponses.AddLegacyWebhookResponse(super.mapResponseDebug(response), response.data, this.mapLegacyWebhook(response.data));
  }
  mapWebhooksListResponse(response) {
    return new WebhookResponses.WebhookListResponse(super.mapResponseDebug(response), response.data, {
      webhooks: response.data.map((m) => this.mapWebhook(m))
    });
  }
  mapLegacyWebhooksListResponse(response) {
    return new WebhookResponses.LegacyWebhookListResponse(super.mapResponseDebug(response), response.data, {
      webhooks: response.data.map((m) => this.mapLegacyWebhook(m))
    });
  }
  mapLegacyWebhook(rawWebhook) {
    return new WebhookModels.LegacyWebhook({
      id: rawWebhook.id,
      name: rawWebhook.name,
      lastModified: rawWebhook.last_modified ? new Date(rawWebhook.last_modified) : void 0,
      healthStatus: rawWebhook.health_status ? rawWebhook.health_status : void 0,
      secret: rawWebhook.secret,
      triggers: {
        deliveryApiContentChanges: rawWebhook.triggers.delivery_api_content_changes.map((m) => new WebhookModels.LegacyWebhookDeliveryApiContentChanges({
          operations: m.operations,
          type: m.type
        })),
        workflowStepChanges: rawWebhook.triggers.workflow_step_changes.map((m) => new WebhookModels.LegacyWebhookWorkflowStepChanges({
          transitionsTo: m.transitions_to.map((s) => new WebhookModels.WebhookTransitionsTo({
            id: s.id
          })),
          type: m.type
        })),
        previewDeliveryContentChanges: rawWebhook.triggers.preview_delivery_api_content_changes.map((m) => new WebhookModels.LegacyWebhookPreviewDeliveryApiContentChanges({
          operations: m.operations,
          type: m.type
        })),
        managementApiContentChanges: rawWebhook.triggers.management_api_content_changes.map((m) => new WebhookModels.LegacyWebhookManagementApiContentChanges({
          operations: m.operations,
          type: m.type
        }))
      },
      url: rawWebhook.url,
      _raw: rawWebhook
    });
  }
  mapWebhook(rawWebhook) {
    return new WebhookModels.Webhook({
      id: rawWebhook.id,
      name: rawWebhook.name,
      lastModified: rawWebhook.last_modified ? new Date(rawWebhook.last_modified) : void 0,
      healthStatus: rawWebhook.health_status,
      enabled: rawWebhook.enabled,
      headers: rawWebhook.headers,
      secret: rawWebhook.secret,
      deliveryTriggers: {
        slot: rawWebhook.delivery_triggers.slot,
        events: rawWebhook.delivery_triggers.events,
        asset: rawWebhook.delivery_triggers.asset ? new WebhookModels.WebhookDeliveryTriggersAsset({
          enabled: rawWebhook.delivery_triggers.asset.enabled,
          actions: rawWebhook.delivery_triggers.asset.actions
        }) : void 0,
        contentType: rawWebhook.delivery_triggers.content_type ? new WebhookModels.WebhookDeliveryTriggersContentType({
          enabled: rawWebhook.delivery_triggers.content_type.enabled,
          actions: rawWebhook.delivery_triggers.content_type.actions
        }) : void 0,
        taxonomy: rawWebhook.delivery_triggers.taxonomy ? new WebhookModels.WebhookDeliveryTriggersTaxonomy({
          enabled: rawWebhook.delivery_triggers.taxonomy.enabled,
          actions: rawWebhook.delivery_triggers.taxonomy.actions
        }) : void 0,
        language: rawWebhook.delivery_triggers.language ? new WebhookModels.WebhookDeliveryTriggersLanguage({
          enabled: rawWebhook.delivery_triggers.language.enabled,
          actions: rawWebhook.delivery_triggers.language.actions
        }) : void 0,
        contentItem: rawWebhook.delivery_triggers.content_item ? new WebhookModels.WebhookDeliveryTriggersContentItem({
          enabled: rawWebhook.delivery_triggers.content_item.enabled,
          actions: rawWebhook.delivery_triggers.content_item.actions,
          filters: rawWebhook.delivery_triggers.content_item.filters
        }) : void 0
      },
      url: rawWebhook.url,
      _raw: rawWebhook
    });
  }
};
var webhookMapper = new WebhookMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/asset-folder-mapper.js
var AssetFolderMapper = class extends BaseMapper {
  mapListAssetFoldersResponse(response) {
    const items = response.data.folders.map((m) => this.mapAssetFolder(m));
    return new AssetFolderResponses.AssetFoldersListResponse(super.mapResponseDebug(response), response.data, {
      last_modified: new Date(response.data.last_modified),
      items
    });
  }
  mapAddAssetFoldersResponse(response) {
    const items = response.data.folders.map((m) => this.mapAssetFolder(m));
    return new AssetFolderResponses.AddAssetFoldersResponse(super.mapResponseDebug(response), response.data, {
      last_modified: new Date(response.data.last_modified),
      items
    });
  }
  mapModifyAssetFoldersResponse(response) {
    const items = response.data.folders.map((m) => this.mapAssetFolder(m));
    return new AssetFolderResponses.ModifyAssetFoldersResponse(super.mapResponseDebug(response), response.data, {
      last_modified: new Date(response.data.last_modified),
      items
    });
  }
  mapAssetFolder(rawFolder) {
    return new AssetFolderModels.AssetFolder({
      externalId: rawFolder.external_id,
      id: rawFolder.id,
      name: rawFolder.name,
      folders: rawFolder.folders.map((m) => this.mapAssetFolder(m)),
      _raw: rawFolder
    });
  }
};
var assetFolderMapper = new AssetFolderMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/generic-mapper.js
var GenericMapper = class extends BaseMapper {
  mapGenericResponse(response) {
    return new GenericResponses.GenericResponse(super.mapResponseDebug(response), response.data);
  }
};
var genericMapper = new GenericMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/collections-mapper.js
var CollectionsMapper = class extends BaseMapper {
  mapListCollectionsResponse(response) {
    const items = response.data.collections.map((m) => this.mapCollection(m));
    return new CollectionResponses.CollectionsListResponse(super.mapResponseDebug(response), response.data, {
      lastModified: response.data.last_modified ? new Date(response.data.last_modified) : void 0,
      collections: items
    });
  }
  mapSetCollectionsResponse(response) {
    const items = response.data.collections.map((m) => this.mapCollection(m));
    return new CollectionResponses.SetCollectionsResponse(super.mapResponseDebug(response), response.data, {
      lastModified: response.data.last_modified ? new Date(response.data.last_modified) : void 0,
      collections: items
    });
  }
  mapCollection(rawCollection) {
    return new CollectionModels.Collection({
      id: rawCollection.id,
      name: rawCollection.name,
      codename: rawCollection.codename,
      _raw: rawCollection
    });
  }
};
var collectionsMappers = new CollectionsMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/subscription-mapper.js
var SubscriptionMapper = class extends BaseMapper {
  mapSubscriptionProjectsListResponse(response) {
    const subscriptionProjects = response.data.projects.map((m) => this.mapSubscriptionProject(m));
    const pagination = super.mapPagination(response.data.pagination);
    return new SubscriptionResponses.SubscriptionProjectsListResponse(super.mapResponseDebug(response), response.data, {
      pagination,
      items: subscriptionProjects
    });
  }
  mapSubscriptionUsersListResponse(response) {
    const subscriptionProjects = response.data.users.map((m) => this.mapSubscriptionUser(m));
    const pagination = super.mapPagination(response.data.pagination);
    return new SubscriptionResponses.SubscriptionUsersListResponse(super.mapResponseDebug(response), response.data, {
      pagination,
      items: subscriptionProjects
    });
  }
  mapViewSubscriptionProjectResponse(response) {
    return new SubscriptionResponses.ViewSubscriptionProjectResponse(super.mapResponseDebug(response), response.data, this.mapSubscriptionProject(response.data));
  }
  mapViewSubscriptionUserResponse(response) {
    return new SubscriptionResponses.ViewSubscriptionUserResponse(super.mapResponseDebug(response), response.data, this.mapSubscriptionUser(response.data));
  }
  mapSubscriptionProject(raw) {
    return new SubscriptionModels.SubscriptionProject({
      environments: raw.environments,
      id: raw.id,
      isActive: raw.is_active,
      name: raw.name,
      _raw: raw
    });
  }
  mapSubscriptionUser(raw) {
    return new SubscriptionModels.SubscriptionUser({
      email: raw.email,
      hasPendingInvitation: raw.has_pending_invitation,
      id: raw.id,
      firstName: raw.first_name,
      lastName: raw.last_name,
      projects: raw.projects.map((rawProject) => {
        const project = {
          id: rawProject.id,
          name: rawProject.name,
          environments: rawProject.environments.map((rawEnvironment) => {
            const environment = {
              id: rawEnvironment.id,
              name: rawEnvironment.name,
              isUserActive: rawEnvironment.is_user_active,
              lastActivityAt: rawEnvironment.last_activity_at ? new Date(rawEnvironment.last_activity_at) : void 0,
              collectionGroups: rawEnvironment.collection_groups.map((rawCollectionGroup) => {
                const collectionGroup = {
                  collections: rawCollectionGroup.collections,
                  roles: rawCollectionGroup.roles.map((rawRole) => {
                    const role = {
                      codename: rawRole.codename,
                      id: rawRole.id,
                      languages: rawRole.languages.map((rawLanguage) => {
                        const language = {
                          codename: rawLanguage.codename,
                          id: rawLanguage.id,
                          isActive: rawLanguage.is_active,
                          name: rawLanguage.name
                        };
                        return language;
                      }),
                      name: rawRole.name
                    };
                    return role;
                  })
                };
                return collectionGroup;
              })
            };
            return environment;
          })
        };
        return project;
      }),
      _raw: raw
    });
  }
};
var subscriptionMapper = new SubscriptionMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/role-mapper.js
var RoleMapper = class extends BaseMapper {
  mapRoleListResponse(response) {
    const items = response.data.roles.map((m) => this.mapRole(m));
    return new RoleResponses.RoleListResponse(super.mapResponseDebug(response), response.data, {
      roles: items
    });
  }
  mapViewRoleResponse(response) {
    return new RoleResponses.ViewRoleResponse(super.mapResponseDebug(response), response.data, this.mapRole(response.data));
  }
  mapRole(rawItem) {
    return new RoleModels.Role({
      id: rawItem.id,
      name: rawItem.name,
      codename: rawItem.codename,
      _raw: rawItem
    });
  }
};
var roleMapper = new RoleMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/project-user-mapper.js
var ProjectUserMapper = class extends BaseMapper {
  mapInviteUserResponse(response) {
    return new ProjectUsersResponses.InviteUserResponse(super.mapResponseDebug(response), response.data, this.mapProjectUser(response.data));
  }
  mapChangeUserRolesResponse(response) {
    return new ProjectUsersResponses.ChangeUserRolesResponse(super.mapResponseDebug(response), response.data, this.mapProjectUser(response.data));
  }
  mapCollectionGroup(rawItem) {
    return new ProjectUserModels.CollectionGroup({
      collections: rawItem.collections,
      roles: rawItem.roles,
      _raw: rawItem
    });
  }
  mapProjectUser(rawItem) {
    return new ProjectUserModels.ProjectUser({
      userId: rawItem.user_id,
      collectionGroups: rawItem.collection_groups.map((m) => this.mapCollectionGroup(m)),
      _raw: rawItem
    });
  }
};
var projectUserMapper = new ProjectUserMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/asset-rendition-mapper.js
var AssetRenditionMapper = class extends BaseMapper {
  mapListAssetRenditionsResponse(response) {
    return new AssetRenditionResponses.AssetRenditionsListResponse(super.mapResponseDebug(response), response.data, {
      items: response.data.asset_renditions.map((m) => this.mapAssetRendition(m)),
      pagination: super.mapPagination(response.data.pagination)
    });
  }
  mapViewAssetRenditionResponse(response) {
    return new AssetRenditionResponses.ViewAssetRenditionResponse(super.mapResponseDebug(response), response.data, this.mapAssetRendition(response.data));
  }
  mapModifyAssetRenditionResponse(response) {
    return new AssetRenditionResponses.ModifyAssetRenditionResponse(super.mapResponseDebug(response), response.data, this.mapAssetRendition(response.data));
  }
  mapAddAssetRenditionResponse(response) {
    return new AssetRenditionResponses.AddAssetRenditionResponse(super.mapResponseDebug(response), response.data, this.mapAssetRendition(response.data));
  }
  mapAssetRendition(raw) {
    return new AssetRenditionModels.AssetRendition({
      assetId: raw.asset_id,
      externalId: raw.external_id,
      lastModified: new Date(raw.last_modified),
      renditionId: raw.rendition_id,
      transformation: {
        fit: raw.transformation.fit,
        height: raw.transformation.height,
        mode: raw.transformation.mode,
        width: raw.transformation.width,
        x: raw.transformation.x,
        y: raw.transformation.y,
        customHeight: raw.transformation.custom_height,
        customWidth: raw.transformation.custom_width
      },
      _raw: raw
    });
  }
};
var assetRenditionMapper = new AssetRenditionMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/space-mapper.js
var SpacesMapper = class extends BaseMapper {
  mapListingSpacesResponse(response) {
    const items = response.data.map((m) => this.mapSpace(m));
    return new SpaceResponses.SpacesListResponse(super.mapResponseDebug(response), response.data, items);
  }
  mapViewSpaceResponse(response) {
    return new SpaceResponses.ViewSpaceResponse(super.mapResponseDebug(response), response.data, this.mapSpace(response.data));
  }
  mapAddSpaceResponse(response) {
    return new SpaceResponses.AddSpaceResponse(super.mapResponseDebug(response), response.data, this.mapSpace(response.data));
  }
  mapModifySpaceResponse(response) {
    return new SpaceResponses.ModifySpaceResponse(super.mapResponseDebug(response), response.data, this.mapSpace(response.data));
  }
  mapSpace(rawItem) {
    return new SpaceModels.Space({
      codename: rawItem.codename,
      id: rawItem.id,
      name: rawItem.name,
      webSpotlightRootItem: rawItem.web_spotlight_root_item,
      collections: rawItem.collections,
      _raw: rawItem
    });
  }
};
var spacesMapper = new SpacesMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/mappers/preview-mapper.js
var PreviewMapper = class extends BaseMapper {
  mapPreviewConfigurationResponse(response) {
    return new PreviewResponses.PreviewConfigurationResponse(super.mapResponseDebug(response), response.data, this.mapPreviewConfiguration(response.data));
  }
  mapModifyConfigurationResponse(response) {
    return new PreviewResponses.ModifyConfigurationResponse(super.mapResponseDebug(response), response.data, this.mapPreviewConfiguration(response.data));
  }
  mapPreviewConfiguration(rawItem) {
    return new PreviewModels.PreviewConfiguration({
      _raw: rawItem,
      previewUrlPatterns: rawItem.preview_url_patterns.map((urlPatternsContract) => {
        const urlPatterns = {
          contentType: urlPatternsContract.content_type,
          urlPatterns: urlPatternsContract.url_patterns.map((urlPatternContract) => {
            const urlPattern = {
              space: urlPatternContract.space,
              urlPattern: urlPatternContract.url_pattern
            };
            return urlPattern;
          })
        };
        return urlPatterns;
      }),
      spaceDomains: rawItem.space_domains
    });
  }
};
var previewMapper = new PreviewMapper();

// node_modules/@kontent-ai/management-sdk/dist/es6/sdk-info.generated.js
var sdkInfo = {
  host: "npmjs.com",
  version: "5.9.0",
  name: "@kontent-ai/management-sdk"
};

// node_modules/@kontent-ai/management-sdk/dist/es6/services/base-management-service.class.js
var import_mime = __toESM(require_mime());
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var BaseManagementQueryService = class {
  constructor(config, httpService, sdkInfo2) {
    this.config = config;
    this.httpService = httpService;
    this.sdkInfo = sdkInfo2;
    this.defaultBaseCMUrl = "https://manage.kontent.ai/v2";
  }
  /**
   * Gets url based on the action, query configuration and options (parameters)
   * @param action Action (= url part) that will be hit
   * @param options Query options
   * @param addSlash Indicates if slash is added to query
   */
  getFullUrl(action, options, addSlash = true) {
    return urlHelper.addOptionsToUrl(this.getBaseUrl() + (addSlash ? "/" : "") + action, options);
  }
  /**
   * Gets proper set of headers for given request.
   * @param config Query config
   */
  getHeaders(config) {
    const headers = [
      // sdk tracking header
      headerHelper.getSdkIdHeader({
        host: this.sdkInfo.host,
        name: this.sdkInfo.name,
        version: this.sdkInfo.version
      }),
      // add authorization header
      this.getAuthorizationHeader()
    ];
    headers.push(...config.headers);
    return headers;
  }
  /**
   * Http PATCH response
   * @param url Url of request
   * @param config Query configuration
   */
  patchResponseAsync(url, body, internalConfig, config) {
    return __awaiter3(this, void 0, void 0, function* () {
      try {
        return yield this.httpService.patchAsync({
          url,
          body
        }, {
          cancelToken: config.cancelTokenRequest,
          retryStrategy: this.config.retryStrategy,
          headers: this.getHeaders(config),
          responseType: internalConfig && internalConfig.responseType ? internalConfig.responseType : void 0
        });
      } catch (error) {
        throw this.mapContentManagementError(error);
      }
    });
  }
  /**
   * Http GET response
   * @param url Url of request
   * @param config Query configuration
   */
  getResponseAsync(url, internalConfig, config) {
    return __awaiter3(this, void 0, void 0, function* () {
      try {
        return yield this.httpService.getAsync({
          url
        }, {
          cancelToken: config.cancelTokenRequest,
          retryStrategy: this.config.retryStrategy,
          headers: this.getHeaders(config),
          responseType: internalConfig && internalConfig.responseType ? internalConfig.responseType : void 0
        });
      } catch (err) {
        throw this.mapContentManagementError(err);
      }
    });
  }
  /**
   * Http POST response
   * @param url Url of request
   * @param body Body of the request (names and values)
   * @param config Query configuration
   */
  postResponseAsync(url, body, internalConfig, config) {
    return __awaiter3(this, void 0, void 0, function* () {
      try {
        return yield this.httpService.postAsync({
          url,
          body
        }, {
          cancelToken: config.cancelTokenRequest,
          retryStrategy: this.config.retryStrategy,
          headers: this.getHeaders(config),
          responseType: internalConfig && internalConfig.responseType ? internalConfig.responseType : void 0
        });
      } catch (err) {
        throw this.mapContentManagementError(err);
      }
    });
  }
  /**
   * Http PUT response
   * @param url Url of request
   * @param body Body of the request (names and values)
   * @param config Query configuration
   */
  putResponseAsync(url, body, internalConfig, config) {
    return __awaiter3(this, void 0, void 0, function* () {
      try {
        return yield this.httpService.putAsync({
          url,
          body
        }, {
          cancelToken: config.cancelTokenRequest,
          retryStrategy: this.config.retryStrategy,
          headers: this.getHeaders(config),
          responseType: internalConfig && internalConfig.responseType ? internalConfig.responseType : void 0
        });
      } catch (err) {
        throw this.mapContentManagementError(err);
      }
    });
  }
  /**
   * Http Delete response
   * @param url Url of request
   * @param body Body of the request (names and values)
   * @param config Query configuration
   */
  deleteResponseAsync(url, internalConfig, config) {
    return __awaiter3(this, void 0, void 0, function* () {
      try {
        return yield this.httpService.deleteAsync({
          url
        }, {
          cancelToken: config.cancelTokenRequest,
          retryStrategy: this.config.retryStrategy,
          headers: this.getHeaders(config),
          responseType: internalConfig && internalConfig.responseType ? internalConfig.responseType : void 0
        });
      } catch (err) {
        throw this.mapContentManagementError(err);
      }
    });
  }
  getBinaryDataFromUrlAsync(url) {
    return __awaiter3(this, void 0, void 0, function* () {
      url = url.replace("#", "%23");
      const response = yield this.httpService.getAsync({
        url
      }, {
        responseType: "arraybuffer"
      });
      return response.data;
    });
  }
  getMimeTypeFromFilename(filename) {
    return (0, import_mime.getType)(filename);
  }
  mapContentManagementError(error) {
    var _a;
    let axiosError;
    if (error.error) {
      axiosError = error.error;
    } else {
      axiosError = error;
    }
    if (!axiosError || !axiosError.isAxiosError) {
      return error;
    }
    const cmError = (_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.data;
    if ((cmError === null || cmError === void 0 ? void 0 : cmError.error_code) || (cmError === null || cmError === void 0 ? void 0 : cmError.request_id)) {
      const validationErrors = [];
      if (cmError.validation_errors) {
        validationErrors.push(...cmError.validation_errors.map((validationErrorRaw) => new SharedModels.ValidationError({
          message: validationErrorRaw.message
        })));
      }
      return new SharedModels.ContentManagementBaseKontentError({
        errorCode: cmError.error_code,
        message: cmError.message,
        originalError: error,
        requestId: cmError.request_id,
        validationErrors
      });
    }
    return error;
  }
  /**
   * Gets authorization header
   */
  getAuthorizationHeader() {
    const key = this.config.apiKey;
    if (!key) {
      throw Error(`Cannot get authorization header for query type because API Key is undefined`);
    }
    return {
      header: "authorization",
      value: `bearer ${key}`
    };
  }
  /**
   * Gets base URL of the request including the project Id
   */
  getBaseUrl() {
    if (this.config.baseUrl) {
      return this.config.baseUrl;
    }
    return this.defaultBaseCMUrl;
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/services/management-query-service.class.js
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var ManagementQueryService = class extends BaseManagementQueryService {
  constructor(config, httpService, sdkInfo2) {
    super(config, httpService, sdkInfo2);
    this.config = config;
    this.httpService = httpService;
    this.sdkInfo = sdkInfo2;
  }
  genericPostResponseAsync(url, data, config) {
    const _super = Object.create(null, {
      postResponseAsync: { get: () => super.postResponseAsync }
    });
    return __awaiter4(this, void 0, void 0, function* () {
      return genericMapper.mapGenericResponse(yield _super.postResponseAsync.call(this, url, data, {}, config));
    });
  }
  genericPatchResponseAsync(url, data, config) {
    const _super = Object.create(null, {
      patchResponseAsync: { get: () => super.patchResponseAsync }
    });
    return __awaiter4(this, void 0, void 0, function* () {
      return genericMapper.mapGenericResponse(yield _super.patchResponseAsync.call(this, url, data, {}, config));
    });
  }
  genericDeleteResponseAsync(url, config) {
    const _super = Object.create(null, {
      deleteResponseAsync: { get: () => super.deleteResponseAsync }
    });
    return __awaiter4(this, void 0, void 0, function* () {
      return genericMapper.mapGenericResponse(yield _super.deleteResponseAsync.call(this, url, {}, config));
    });
  }
  genericGetResponseAsync(url, config) {
    const _super = Object.create(null, {
      getResponseAsync: { get: () => super.getResponseAsync }
    });
    return __awaiter4(this, void 0, void 0, function* () {
      return genericMapper.mapGenericResponse(yield _super.getResponseAsync.call(this, url, {}, config));
    });
  }
  genericPutResponseAsync(url, data, config) {
    const _super = Object.create(null, {
      putResponseAsync: { get: () => super.putResponseAsync }
    });
    return __awaiter4(this, void 0, void 0, function* () {
      return genericMapper.mapGenericResponse(yield _super.putResponseAsync.call(this, url, data, {}, config));
    });
  }
  getListAllResponseAsync(data) {
    return __awaiter4(this, void 0, void 0, function* () {
      const responses = yield this.getListAllResponseInternalAsync({
        resolvedResponses: [],
        getResponse: data.getResponse,
        xContinuationToken: void 0,
        listQueryConfig: data.listQueryConfig
      });
      return data.allResponseFactory(responses.reduce((prev, current) => {
        prev.push(...current.data.items);
        return prev;
      }, []), responses);
    });
  }
  publishLanguageVariantAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapEmptyResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  createNewVersionOfLanguageVariantAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapEmptyResponse(yield this.putResponseAsync(url, void 0, {}, config));
    });
  }
  unpublishLanguageVariantAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapEmptyResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  cancelScheduledPublishingOfLanguageVariantAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapEmptyResponse(yield this.putResponseAsync(url, void 0, {}, config));
    });
  }
  cancelScheduledUnpublishingOfLanguageVariantAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapEmptyResponse(yield this.putResponseAsync(url, void 0, {}, config));
    });
  }
  changeWorkflowStepOfLanguageVariantAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapEmptyResponse(yield this.putResponseAsync(url, void 0, {}, config));
    });
  }
  changeWorkflowOfLanguageVariantAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapEmptyResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  listWorkflowStepsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapListWorkflowStepsResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listWorkflowsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapListWorkflowsResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  addWorkflowAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapAddWorkflowResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  updateWorkflowAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return workflowMapper.mapUpdateWorkflowResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  deleteWorkflowAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return webhookMapper.mapEmptyResponse(yield this.deleteResponseAsync(url, {}, config));
    });
  }
  viewContentTypeSnippetAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentTypeSnippetMapper.mapViewContentTypeSnippetResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  deleteContentTypeSnippetAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentTypeSnippetMapper.mapEmptyResponse(yield this.deleteResponseAsync(url, {}, config));
    });
  }
  addContentTypeSnippetAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentTypeSnippetMapper.mapAddContentTypeSnippetResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  listContentTypeSnippetsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentTypeSnippetMapper.mapListingResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  environmentInformationAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return environmentMapper.mapEnvironmentInformationResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listEnvironmentValidationIssuesAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return environmentMapper.mapProjectValidationIssuesListResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  startEnvironmentValidationAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return environmentMapper.mapStartEnvironmentValidationResponse(yield this.postResponseAsync(url, {}, {}, config));
    });
  }
  checkEnvironmentValidationAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return environmentMapper.mapCheckEnvironmentValidationResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  addContentTypeAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentTypeMapper.mapAddContentTypeResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  deleteContentTypeAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentTypeMapper.mapEmptyResponse(yield this.deleteResponseAsync(url, {}, config));
    });
  }
  modifyContentTypeAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentTypeMapper.mapModifyContentTypeResponse(yield this.patchResponseAsync(url, data, {}, config));
    });
  }
  modifyTaxonomyAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return taxonomyMappper.mapModifyTaxonomyResponse(yield this.patchResponseAsync(url, data, {}, config));
    });
  }
  modifyContentTypeSnippetAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentTypeSnippetMapper.mapModifyContentTypeSnippetResponse(yield this.patchResponseAsync(url, data, {}, config));
    });
  }
  viewContentTypeAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentTypeMapper.mapViewContentTypeResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listContentTypesAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentTypeMapper.mapListingResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listAssetRenditionsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetRenditionMapper.mapListAssetRenditionsResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  viewAssetRenditionAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetRenditionMapper.mapViewAssetRenditionResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  addAssetRenditionAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetRenditionMapper.mapAddAssetRenditionResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  modifyAssetRenditionAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetRenditionMapper.mapModifyAssetRenditionResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  addTaxonomyAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return taxonomyMappper.mapAddTaxonomyResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  deleteTaxonomyAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return taxonomyMappper.mapEmptyResponse(yield this.deleteResponseAsync(url, {}, config));
    });
  }
  getTaxonomyAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return taxonomyMappper.mapGetTaxonomyResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listTaxonomiesAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return taxonomyMappper.mapListingTaxonomysResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  deleteAssetAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetsMapper.mapEmptyResponse(yield this.deleteResponseAsync(url, {}, config));
    });
  }
  upsertAssetAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetsMapper.mapUpsertAssetResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  addAssetAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetsMapper.mapAddAssetResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  listSubscriptionProjectsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return subscriptionMapper.mapSubscriptionProjectsListResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  litSubscriptionUsersAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return subscriptionMapper.mapSubscriptionUsersListResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  viewSubscriptionProjectAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return subscriptionMapper.mapViewSubscriptionProjectResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  viewSubscriptionUserAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return subscriptionMapper.mapViewSubscriptionUserResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  activateUserInAllProjectsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentItemsMapper.mapEmptyResponse(yield this.putResponseAsync(url, {}, {}, config));
    });
  }
  deactivateUserInAllProjectsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentItemsMapper.mapEmptyResponse(yield this.putResponseAsync(url, {}, {}, config));
    });
  }
  uploadAssetFromUrlAsync(uploadBinaryFileUrl, addAssetUrl, data, config) {
    const _super = Object.create(null, {
      getBinaryDataFromUrlAsync: { get: () => super.getBinaryDataFromUrlAsync },
      getMimeTypeFromFilename: { get: () => super.getMimeTypeFromFilename }
    });
    return __awaiter4(this, void 0, void 0, function* () {
      const binaryData = yield _super.getBinaryDataFromUrlAsync.call(this, data.fileUrl);
      const mimeType = _super.getMimeTypeFromFilename.call(this, data.binaryFile.filename);
      if (!mimeType) {
        throw Error(`Could not get MIME type for filename '${data.binaryFile.filename}'. Please include extension in your filename (e.g. myfile.png)`);
      }
      const configForUploadBinaryFile = JSON.parse(JSON.stringify(config));
      const uploadedBinaryFileResponse = yield this.uploadBinaryFileAsync(uploadBinaryFileUrl, {
        binaryData,
        contentType: mimeType,
        filename: data.binaryFile.filename,
        contentLength: binaryData.byteLength
      }, configForUploadBinaryFile);
      const assetResponse = yield this.addAssetAsync(addAssetUrl, {
        file_reference: {
          id: uploadedBinaryFileResponse.data.id,
          type: uploadedBinaryFileResponse.data.type
        },
        descriptions: data.asset.descriptions,
        external_id: data.asset.external_id,
        folder: data.asset.folder,
        title: data.asset.title,
        codename: data.asset.codename,
        collection: data.asset.collection,
        elements: data.asset.elements
      }, config);
      return assetResponse;
    });
  }
  uploadBinaryFileAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      config.headers.push({
        header: "Content-type",
        value: data.contentType
      });
      if (data.contentLength) {
        config.headers.push({ header: "Content-length", value: data.contentLength.toString() });
      }
      return assetsMapper.mapUploadBinaryFileResponse(yield this.postResponseAsync(url, data.binaryData, {}, config));
    });
  }
  viewAssetAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetsMapper.mapViewAssetResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listAssetsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetsMapper.mapListingAssetsResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listContentItemsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentItemsMapper.mapListingItemsResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  viewContentItemAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentItemsMapper.mapViewContentItemResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  addContentItemAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentItemsMapper.mapAddContentItemResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  upsertContentItemAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentItemsMapper.mapUpsertContentItemResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  updateContentItemAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentItemsMapper.mapUpdateContentItemResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  deleteContentItemAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentItemsMapper.mapEmptyResponse(yield this.deleteResponseAsync(url, {}, config));
    });
  }
  deleteLanguageVariantAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return contentItemsMapper.mapEmptyResponse(yield this.deleteResponseAsync(url, {}, config));
    });
  }
  upsertLanguageVariantAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageVariantMapper.mapUpsertLanguageVariantResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  viewLanguageVariantAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageVariantMapper.mapViewLanguageVariantResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listLanguageVariantsOfItemAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageVariantMapper.mapLanguageVariantsOfItemResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listLanguageVariantsOfContentTypeWithComponentsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageVariantMapper.mapLanguageVariantsOfContentTypeWithComponentsResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listLanguageVariantsOfContentTypeAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageVariantMapper.mapLanguageVariantsOfContentTypeResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listLanguageVariantsByCollectionAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageVariantMapper.mapLanguageVariantsByCollectionResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listLanguageVariantsBySpaceAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageVariantMapper.mapLanguageVariantsBySpaceResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listLanguagesAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageMapper.mapListLanguagesResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  viewLanguageAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageMapper.mapViewLanguageResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  addLanguageAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageMapper.mapAddLanguageResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  modifyLanguageAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return languageMapper.mapModifyLanguageResponse(yield this.patchResponseAsync(url, data, {}, config));
    });
  }
  listWebhooksAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return webhookMapper.mapWebhooksListResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listLegacyWebhooksAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return webhookMapper.mapLegacyWebhooksListResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  getWebhookAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return webhookMapper.mapGetWebhookResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  getLegacyWebhookAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return webhookMapper.mapGetLegacyWebhookResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  addWebhookAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return webhookMapper.mapAddWebhookResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  addLegacyWebhookAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return webhookMapper.mapAddLegacyWebhookResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  enableWebhookAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return webhookMapper.mapEmptyResponse(yield this.putResponseAsync(url, {}, {}, config));
    });
  }
  disableWebhookAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return webhookMapper.mapEmptyResponse(yield this.putResponseAsync(url, {}, {}, config));
    });
  }
  deleteWebhookAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return webhookMapper.mapEmptyResponse(yield this.deleteResponseAsync(url, {}, config));
    });
  }
  listAssetFoldersAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetFolderMapper.mapListAssetFoldersResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  addAssetFoldersAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetFolderMapper.mapAddAssetFoldersResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  modifyAssetFoldersAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return assetFolderMapper.mapModifyAssetFoldersResponse(yield this.patchResponseAsync(url, data, {}, config));
    });
  }
  listCollectionsAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return collectionsMappers.mapListCollectionsResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listRolesAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return roleMapper.mapRoleListResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  viewRoleAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return roleMapper.mapViewRoleResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  getPreviewConfigurationAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return previewMapper.mapPreviewConfigurationResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  modifyPreviewConfigurationAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return previewMapper.mapModifyConfigurationResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  setCollectionsAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return collectionsMappers.mapSetCollectionsResponse(yield this.patchResponseAsync(url, data, {}, config));
    });
  }
  inviteProjectUserAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return projectUserMapper.mapInviteUserResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  changeUserRolesAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return projectUserMapper.mapChangeUserRolesResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  getEnvironmentCloningStateAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return environmentMapper.mapGetEnvironmentCloningStateResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  deleteEnvironmentAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return environmentMapper.mapEmptyResponse(yield this.deleteResponseAsync(url, {}, config));
    });
  }
  modifyEnvironmentAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return environmentMapper.mapModifyEnvironmentResponse(yield this.patchResponseAsync(url, data, {}, config));
    });
  }
  cloneEnvironmentAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return environmentMapper.mapCloneEnvironmentResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  markEnvironmentAsProductionAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return environmentMapper.mapEmptyResponse(yield this.putResponseAsync(url, data, {}, config));
    });
  }
  addSpaceAsync(url, data, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return spacesMapper.mapAddSpaceResponse(yield this.postResponseAsync(url, data, {}, config));
    });
  }
  viewSpaceAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return spacesMapper.mapViewSpaceResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  listSpacesAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return spacesMapper.mapListingSpacesResponse(yield this.getResponseAsync(url, {}, config));
    });
  }
  deleteSpaceAsync(url, config) {
    return __awaiter4(this, void 0, void 0, function* () {
      return spacesMapper.mapEmptyResponse(yield this.deleteResponseAsync(url, {}, config));
    });
  }
  modifySpaceAsync(url, config, data) {
    return __awaiter4(this, void 0, void 0, function* () {
      return spacesMapper.mapModifySpaceResponse(yield this.patchResponseAsync(url, data, {}, config));
    });
  }
  getListAllResponseInternalAsync(data) {
    var _a, _b;
    return __awaiter4(this, void 0, void 0, function* () {
      const response = yield data.getResponse(data.xContinuationToken);
      if ((_a = data.listQueryConfig) === null || _a === void 0 ? void 0 : _a.delayBetweenRequests) {
        yield this.sleepAsync(data.listQueryConfig.delayBetweenRequests);
      }
      data.resolvedResponses.push(response);
      if ((_b = data.listQueryConfig) === null || _b === void 0 ? void 0 : _b.responseFetched) {
        data.listQueryConfig.responseFetched(response, data.xContinuationToken);
      }
      if (response.data.pagination.continuationToken) {
        return yield this.getListAllResponseInternalAsync({
          xContinuationToken: response.data.pagination.continuationToken,
          getResponse: data.getResponse,
          resolvedResponses: data.resolvedResponses,
          listQueryConfig: data.listQueryConfig
        });
      }
      return data.resolvedResponses;
    });
  }
  sleepAsync(ms) {
    return __awaiter4(this, void 0, void 0, function* () {
      return yield new Promise((resolve) => setTimeout(resolve, ms));
    });
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/services/mapping-service.class.js
var MappingService = class {
  constructor() {
    this.assetFoldersMapper = assetFolderMapper;
    this.assetsMapper = assetsMapper;
    this.contentItemsMapper = contentItemsMapper;
    this.contentTypeMapper = contentTypeMapper;
    this.contentTypeSnippetMapper = contentTypeSnippetMapper;
    this.elementsMapper = elementsMapper;
    this.languageMapper = languageMapper;
    this.languageVariantMapper = languageVariantMapper;
    this.environmentMapper = environmentMapper;
    this.taxonomyMapper = taxonomyMappper;
    this.webhookMapper = webhookMapper;
    this.workflowMapper = workflowMapper;
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/client/management-client.class.js
var ManagementClient = class {
  constructor(config) {
    this.config = config;
    this.mappingService = new MappingService();
    const httpService = config.httpService ? config.httpService : new HttpService();
    this.queryService = new ManagementQueryService(config, httpService, {
      host: sdkInfo.host,
      name: sdkInfo.name,
      version: sdkInfo.version
    });
    this.httpService = httpService;
  }
  createCancelToken() {
    return this.httpService.createCancelToken();
  }
  post() {
    return new ActionQuery(this.config, this.queryService, (config, queryService, action) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new PostQuery(nConfig, nQueryService, action, data)));
  }
  patch() {
    return new ActionQuery(this.config, this.queryService, (config, queryService, action) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new PatchQuery(nConfig, nQueryService, action, data)));
  }
  put() {
    return new ActionQuery(this.config, this.queryService, (config, queryService, action) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new PutQuery(nConfig, nQueryService, action, data)));
  }
  delete() {
    return new ActionQuery(this.config, this.queryService, (config, queryService, action) => new DeleteQuery(config, queryService, action));
  }
  get() {
    return new ActionQuery(this.config, this.queryService, (config, queryService, action) => new GetQuery(config, queryService, action));
  }
  createNewVersionOfLanguageVariant() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new CreateNewVersionOfLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
  }
  unpublishLanguageVariant() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new DataQueryOptional(nConfig, nQueryService, (pConfig, pQueryService, data) => new UnpublishLanguageVariantQuery(pConfig, pQueryService, contentItemIdentifier, languageIdentifier, data))));
  }
  cancelSheduledPublishingOfLanguageVariant() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new CancelScheduledPublishingOfLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
  }
  cancelSheduledUnpublishingOfLanguageVariant() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new CancelScheduledUnpublishingOfLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
  }
  changeWorkflowStepOfLanguageVariant() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new WorkflowStepIdentifierQuery(nConfig, nQueryService, (mConfig, mQueryservice, workflowIdentifier) => {
      return new ChangeWorkflowStepOfLanguageOrVariantQuery(config, queryService, contentItemIdentifier, languageIdentifier, workflowIdentifier);
    })));
  }
  changeWorkflowOfLanguageVariant() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new DataQuery(nConfig, nQueryService, (mConfig, mQueryservice, data) => {
      return new ChangeWorkflowOfLanguageOrVariantQuery(config, queryService, contentItemIdentifier, languageIdentifier, data);
    })));
  }
  listWorkflows() {
    return new ListWorkflowsQuery(this.config, this.queryService);
  }
  deleteWorkflow() {
    return new WorkflowIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteWorkflowQuery(config, queryService, identifier));
  }
  addWorkflow() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddWorkflowQuery(config, queryService, data));
  }
  updateWorkflow() {
    return new WorkflowIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new UpdateWorkflowQuery(nConfig, nQueryService, data, identifier)));
  }
  publishLanguageVariant() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new DataQueryOptional(nConfig, nQueryService, (pConfig, pQueryService, data) => new PublishLanguageVariantQuery(pConfig, pQueryService, contentItemIdentifier, languageIdentifier, data))));
  }
  listWorkflowSteps() {
    return new ListWorkflowStepsQuery(this.config, this.queryService);
  }
  listContentTypeSnippets() {
    return new ListContentTypeSnippetsQuery(this.config, this.queryService);
  }
  viewContentTypeSnippet() {
    return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewContentTypeSnippetQuery(config, queryService, identifier));
  }
  deleteContentTypeSnippet() {
    return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteContentTypeSnippetQuery(config, queryService, identifier));
  }
  addContentTypeSnippet() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddContentTypeSnippetQuery(config, queryService, data));
  }
  viewLanguageVariant() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new ViewLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
  }
  upsertLanguageVariant() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new DataQuery(nConfig, nQueryService, (mConfig, mQueryService, elements) => new UpsertLanguageVariantQuery(mConfig, mQueryService, contentItemIdentifier, languageIdentifier, elements))));
  }
  deleteLanguageVariant() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, contentItemIdentifier) => new LanguageIdAndCodenameIdentifierQuery(config, queryService, (nConfig, nQueryService, languageIdentifier) => new DeleteLanguageVariantQuery(nConfig, nQueryService, contentItemIdentifier, languageIdentifier)));
  }
  startEnvironmentValidation() {
    return new StartEnvironmentValidationQuery(this.config, this.queryService);
  }
  checkEnvironmentValidation() {
    return new TaskIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new CheckEnvironmentValidationQuery(config, queryService, identifier));
  }
  listEnvironmentValidationIssues() {
    return new TaskIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListEnvironmentValidationIssuesQuery(config, queryService, identifier));
  }
  deleteContentType() {
    return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteContentTypeQuery(config, queryService, identifier));
  }
  addContentType() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddContentTypeQuery(config, queryService, data));
  }
  modifyContentTypeSnippet() {
    return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyContentTypeSnippetQuery(nConfig, nQueryService, identifier, data)));
  }
  modifyContentType() {
    return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyContentTypeQuery(nConfig, nQueryService, identifier, data)));
  }
  modifyTaxonomy() {
    return new TaxonomyIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyTaxonomyQuery(nConfig, nQueryService, identifier, data)));
  }
  viewContentType() {
    return new ContentTypeIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewContentTypeQuery(config, queryService, identifier));
  }
  listContentTypes() {
    return new ListContentTypesQuery(this.config, this.queryService);
  }
  listAssetRenditions() {
    return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListAssetRenditionsQuery(config, queryService, identifier));
  }
  addAssetRendition() {
    return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new AddAssetRenditionQuery(nConfig, nQueryService, identifier, data)));
  }
  modifyAssetRendition() {
    return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, assetIdentifier) => new RenditionIdentifierQuery(config, queryService, (mConfig, mQueryService, renditionIdentifier) => {
      return new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyAssetRenditionQuery(nConfig, nQueryService, assetIdentifier, renditionIdentifier, data));
    }));
  }
  viewAssetRendition() {
    return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, assetIdentifier) => new RenditionIdentifierQuery(config, queryService, (xConfig, xQueryService, renditionIdentifier) => {
      return new ViewAssetRenditionQuery(config, queryService, assetIdentifier, renditionIdentifier);
    }));
  }
  deleteTaxonomy() {
    return new TaxonomyIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteTaxonomyQuery(config, queryService, identifier));
  }
  addTaxonomy() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddTaxonomyQuery(config, queryService, data));
  }
  listTaxonomies() {
    return new ListTaxonomiesQuery(this.config, this.queryService);
  }
  getTaxonomy() {
    return new TaxonomyIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new GetTaxonomyQuery(config, queryService, identifier));
  }
  deleteAsset() {
    return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteAssetQuery(config, queryService, identifier));
  }
  upsertAsset() {
    return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(this.config, this.queryService, (xConfig, xQueryService, data) => new UpsertAssetQuery(config, queryService, identifier, data)));
  }
  addAsset() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddAssetQuery(config, queryService, data));
  }
  uploadBinaryFile() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new UploadBinaryFileQuery(config, queryService, data));
  }
  uploadAssetFromUrl() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new UploadAssetFromUrlQuery(config, queryService, data));
  }
  viewAsset() {
    return new AssetIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewAssetsQuery(config, queryService, identifier));
  }
  listAssets() {
    return new ListAssetsQuery(this.config, this.queryService);
  }
  listContentItems() {
    return new ListContentItemsQuery(this.config, this.queryService);
  }
  viewContentItem() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewContentItemQuery(config, queryService, identifier));
  }
  addContentItem() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddContentItemQuery(config, queryService, data));
  }
  updateContentItem() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new UpdateContentItemQuery(nConfig, nQueryService, data, identifier)));
  }
  upsertContentItem() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new UpsertContentItemQuery(nConfig, nQueryService, data, identifier)));
  }
  deleteContentItem() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteContentItemQuery(config, queryService, identifier));
  }
  listLanguageVariantsOfItem() {
    return new ContentItemIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListLanguageVariantsOfItemQuery(config, queryService, identifier));
  }
  listLanguageVariantsOfContentType() {
    return new ContentTypeCodenameAndIdIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListLanguageVariantsOfContentTypeQuery(config, queryService, identifier));
  }
  listLanguageVariantsByCollection() {
    return new CollectionIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListLanguageVariantsByCollectionQuery(config, queryService, identifier));
  }
  listLanguageVariantsBySpace() {
    return new SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListLanguageVariantsBySpaceQuery(config, queryService, identifier));
  }
  listLanguageVariantsOfContentTypeWithComponents() {
    return new ContentTypeCodenameAndIdIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ListLanguageVariantsOfContentTypeWithComponentsQuery(config, queryService, identifier));
  }
  listLanguages() {
    return new ListLanguagesQuery(this.config, this.queryService);
  }
  viewLanguage() {
    return new LanguageIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewLanguageQuery(config, queryService, identifier));
  }
  addLanguage() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddLanguageQuery(config, queryService, data));
  }
  modifyLanguage() {
    return new LanguageIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifyLanguageQuery(nConfig, nQueryService, identifier, data)));
  }
  deleteWebhook() {
    return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteWebhookQuery(config, queryService, identifier));
  }
  addWebhook() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddWebhookQuery(config, queryService, data));
  }
  enableWebhook() {
    return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new EnableWebhookQuery(config, queryService, identifier));
  }
  disableWebhook() {
    return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DisableWebhookQuery(config, queryService, identifier));
  }
  getWebhook() {
    return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new GetWebhookQuery(config, queryService, identifier));
  }
  listWebhooks() {
    return new ListWebhooksQuery(this.config, this.queryService);
  }
  deleteLegacyWebhook() {
    return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteLegacyWebhookQuery(config, queryService, identifier));
  }
  addLegacyWebhook() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddLegacyWebhookQuery(config, queryService, data));
  }
  enableLegacyWebhook() {
    return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new EnableLegacyWebhookQuery(config, queryService, identifier));
  }
  disableLegacyWebhook() {
    return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DisableLegacyWebhookQuery(config, queryService, identifier));
  }
  getLegacyWebhook() {
    return new WebhookIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new GetLegacyWebhookQuery(config, queryService, identifier));
  }
  listLegacyWebhooks() {
    return new ListLegacyWebhooksQuery(this.config, this.queryService);
  }
  environmentInformation() {
    return new EnvironmentInformationQuery(this.config, this.queryService);
  }
  listAssetFolders() {
    return new ListAssetFoldersQuery(this.config, this.queryService);
  }
  addAssetFolders() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddAssetFoldersQuery(config, queryService, data));
  }
  modifyAssetFolders() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new ModifyAssetFoldersQuery(config, queryService, data));
  }
  listCollections() {
    return new ListCollectionsQuery(this.config, this.queryService);
  }
  setCollections() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new SetCollectionsQuery(config, queryService, data));
  }
  createLanguageVariantEditUrl(data) {
    let url = `https://app.kontent.ai/goto/edit-item/project/${this.config.environmentId}/variant-codename/${data.languageCodename}/item/${data.variantId}`;
    if (data.elementCodename) {
      url += `/element/${data.elementCodename}`;
    }
    if (data.nestedItemId) {
      url += `/item/${data.nestedItemId}`;
      if (data.nestedItemElementCodename) {
        url += `/element/${data.nestedItemElementCodename}`;
      }
    }
    return url;
  }
  listSubscriptionProjects() {
    return new ListSubscriptionProjectsQuery(this.config, this.queryService);
  }
  listSubscriptionUsers() {
    return new ListSubscriptionUsersQuery(this.config, this.queryService);
  }
  viewSubscriptionProject() {
    return new EnvironmentIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewSubscriptionProjectQuery(config, queryService, identifier));
  }
  viewSubscriptionUser() {
    return new UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewSubscriptionUserQuery(config, queryService, identifier));
  }
  activateUserInAllProjects() {
    return new UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ActivateUserInAllProjectsQuery(config, queryService, identifier));
  }
  deactivateUserInAllProjects() {
    return new UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeactivateUserInAllProjectsQuery(config, queryService, identifier));
  }
  listRoles() {
    return new ListRolesQuery(this.config, this.queryService);
  }
  viewRole() {
    return new RoleIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewRoleQuery(config, queryService, identifier));
  }
  getPreviewConfiguration() {
    return new GetPreviewConfigurationQuery(this.config, this.queryService);
  }
  modifyPreviewConfiguration() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new ModifyPreviewConfigurationQuery(config, queryService, data));
  }
  inviteUser() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new InviteProjectUserQuery(config, queryService, data));
  }
  changeUserRoles() {
    return new UserIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ChangeUserRolesQuery(nConfig, nQueryService, identifier, data)));
  }
  getEnvironmentCloningState() {
    return new GetEnvironmentCloningStateQuery(this.config, this.queryService);
  }
  deleteEnvironment() {
    return new DeleteEnvironmentQuery(this.config, this.queryService);
  }
  modifyEnvironment() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new ModifyEnvironmentQuery(config, queryService, data));
  }
  cloneEnvironment() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new CloneEnvironmentQuery(config, queryService, data));
  }
  markEnvironmentAsProduction() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new MarkEnvironmentAsProductionQuery(config, queryService, data));
  }
  addSpace() {
    return new DataQuery(this.config, this.queryService, (config, queryService, data) => new AddSpaceQuery(config, queryService, data));
  }
  deleteSpace() {
    return new SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DeleteSpaceQuery(config, queryService, identifier));
  }
  listSpaces() {
    return new ListSpacesQuery(this.config, this.queryService);
  }
  modifySpace() {
    return new SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new DataQuery(config, queryService, (nConfig, nQueryService, data) => new ModifySpaceQuery(nConfig, nQueryService, identifier, data)));
  }
  viewSpace() {
    return new SpaceIdentifierQuery(this.config, this.queryService, (config, queryService, identifier) => new ViewSpaceQuery(config, queryService, identifier));
  }
};

// node_modules/@kontent-ai/management-sdk/dist/es6/client/management-client.factory.js
function createManagementClient(config) {
  return new ManagementClient(config);
}
export {
  ActionQuery,
  ActivateUserInAllProjectsQuery,
  AddAssetFoldersQuery,
  AddAssetQuery,
  AddAssetRenditionQuery,
  AddContentItemQuery,
  AddContentItemQueryInit,
  AddContentTypeQuery,
  AddContentTypeSnippetQuery,
  AddLanguageQuery,
  AddLegacyWebhookQuery,
  AddSpaceQuery,
  AddTaxonomyQuery,
  AddWebhookQuery,
  AddWorkflowQuery,
  AssetElementsBuilder,
  AssetFolderMapper,
  AssetFolderModels,
  AssetFolderResponses,
  AssetIdentifierQuery,
  AssetModels,
  AssetRenditionMapper,
  AssetRenditionModels,
  AssetRenditionResponses,
  AssetResponses,
  AssetsMapper,
  BaseListingQuery,
  BaseMapper,
  BaseQuery,
  BaseResponses,
  CancelScheduledPublishingOfLanguageVariantQuery,
  CancelScheduledUnpublishingOfLanguageVariantQuery,
  ChangeUserRolesQuery,
  ChangeWorkflowOfLanguageOrVariantQuery,
  ChangeWorkflowStepOfLanguageOrVariantQuery,
  CheckEnvironmentValidationQuery,
  CloneEnvironmentQuery,
  CollectionIdentifierQuery,
  CollectionModels,
  CollectionResponses,
  CollectionsMapper,
  ContentItemExternalIdIdentifierQuery,
  ContentItemIdentifierQuery,
  ContentItemModels,
  ContentItemResponses,
  ContentItemsMapper,
  ContentManagementApiEndpoints,
  ContentTypeCodenameAndIdIdentifierQuery,
  ContentTypeElementsBuilder,
  ContentTypeIdentifierQuery,
  ContentTypeMapper,
  ContentTypeModels,
  ContentTypeResponses,
  ContentTypeSnippetElements,
  ContentTypeSnippetMapper,
  ContentTypeSnippetModels,
  ContentTypeSnippetResponses,
  CreateNewVersionOfLanguageVariantQuery,
  DataQuery,
  DataQueryOptional,
  DeactivateUserInAllProjectsQuery,
  DeleteAssetQuery,
  DeleteContentItemQuery,
  DeleteContentTypeQuery,
  DeleteContentTypeSnippetQuery,
  DeleteEnvironmentQuery,
  DeleteLanguageVariantQuery,
  DeleteLegacyWebhookQuery,
  DeleteQuery,
  DeleteSpaceQuery,
  DeleteTaxonomyQuery,
  DeleteWebhookQuery,
  DeleteWorkflowQuery,
  DisableLegacyWebhookQuery,
  DisableWebhookQuery,
  ElementModels,
  ElementsMapper,
  EnableLegacyWebhookQuery,
  EnableWebhookQuery,
  EnvironmentIdentifierQuery,
  EnvironmentInformationQuery,
  EnvironmentMapper,
  EnvironmentModels,
  EnvironmentResponses,
  GenericMapper,
  GenericResponses,
  GetEnvironmentCloningStateQuery,
  GetLegacyWebhookQuery,
  GetPreviewConfigurationQuery,
  GetQuery,
  GetTaxonomyQuery,
  GetWebhookQuery,
  IdCodenameIdentifierQuery,
  IdIdentifierQuery,
  Identifiers,
  InviteProjectUserQuery,
  LanguageIdAndCodenameIdentifierQuery,
  LanguageIdentifierQuery,
  LanguageMapper,
  LanguageModels,
  LanguageResponses,
  LanguageVariantElementsBuilder,
  LanguageVariantMapper,
  LanguageVariantModels,
  LanguageVariantResponses,
  ListAssetFoldersQuery,
  ListAssetRenditionsQuery,
  ListAssetsQuery,
  ListCollectionsQuery,
  ListContentItemsQuery,
  ListContentTypeSnippetsQuery,
  ListContentTypesQuery,
  ListEnvironmentValidationIssuesQuery,
  ListLanguageVariantsByCollectionQuery,
  ListLanguageVariantsBySpaceQuery,
  ListLanguageVariantsOfContentTypeQuery,
  ListLanguageVariantsOfContentTypeWithComponentsQuery,
  ListLanguageVariantsOfItemQuery,
  ListLanguagesQuery,
  ListLegacyWebhooksQuery,
  ListRolesQuery,
  ListSpacesQuery,
  ListSubscriptionProjectsQuery,
  ListSubscriptionUsersQuery,
  ListTaxonomiesQuery,
  ListWebhooksQuery,
  ListWorkflowStepsQuery,
  ListWorkflowsQuery,
  ManagementClient,
  ManagementQueryService,
  MappingService,
  MarkEnvironmentAsProductionQuery,
  ModifyAssetFoldersQuery,
  ModifyAssetRenditionQuery,
  ModifyContentTypeQuery,
  ModifyContentTypeSnippetQuery,
  ModifyEnvironmentQuery,
  ModifyLanguageQuery,
  ModifyPreviewConfigurationQuery,
  ModifySpaceQuery,
  ModifyTaxonomyQuery,
  PatchQuery,
  PostQuery,
  PreviewMapper,
  PreviewModels,
  PreviewResponses,
  ProjectUserMapper,
  ProjectUserModels,
  ProjectUsersResponses,
  PublishLanguageVariantQuery,
  PutQuery,
  RenditionIdentifierQuery,
  RoleIdentifierQuery,
  RoleMapper,
  RoleModels,
  RoleResponses,
  SetCollectionsQuery,
  SharedModels,
  SpaceIdentifierQuery,
  SpaceModels,
  SpaceResponses,
  SpacesMapper,
  StartEnvironmentValidationQuery,
  SubscriptionMapper,
  SubscriptionModels,
  SubscriptionResponses,
  TaskIdentifierQuery,
  TaxonomyIdentifierQuery,
  TaxonomyMapper,
  TaxonomyModels,
  TaxonomyResponses,
  UnpublishLanguageVariantQuery,
  UpdateContentItemQuery,
  UpdateWorkflowQuery,
  UploadAssetFromUrlQuery,
  UploadBinaryFileQuery,
  UpsertAssetQuery,
  UpsertContentItemQuery,
  UpsertLanguageVariantQuery,
  UserIdentifierQuery,
  ViewAssetRenditionQuery,
  ViewAssetsQuery,
  ViewContentItemQuery,
  ViewContentTypeQuery,
  ViewContentTypeSnippetQuery,
  ViewLanguageQuery,
  ViewLanguageVariantQuery,
  ViewRoleQuery,
  ViewSpaceQuery,
  ViewSubscriptionProjectQuery,
  ViewSubscriptionUserQuery,
  WebhookIdentifierQuery,
  WebhookMapper,
  WebhookModels,
  WebhookResponses,
  WorkflowIdentifierQuery,
  WorkflowMapper,
  WorkflowModels,
  WorkflowResponses,
  WorkflowStepIdentifierQuery,
  assetElementsBuilder,
  assetFolderMapper,
  assetRenditionMapper,
  assetsMapper,
  collectionsMappers,
  contentItemsMapper,
  contentTypeElementsBuilder,
  contentTypeMapper,
  contentTypeSnippetElementsBuilder,
  contentTypeSnippetMapper,
  createManagementClient,
  elementsMapper,
  environmentMapper,
  genericMapper,
  languageMapper,
  languageVariantElementsBuilder,
  languageVariantMapper,
  previewMapper,
  projectUserMapper,
  roleMapper,
  spacesMapper,
  subscriptionMapper,
  taxonomyMappper,
  webhookMapper,
  workflowMapper
};
//# sourceMappingURL=@kontent-ai_management-sdk.js.map
